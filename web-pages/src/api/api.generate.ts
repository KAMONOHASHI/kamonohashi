/* tslint:disable */
/* eslint-disable */
/**
 * KAMONOHASHI API
 * A platform for deep learning
 *
 * The version of the OpenAPI document: v2
 * Contact: kamonohashi-support@jp.nssol.nipponsteel.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsAccountApiModelsAccountOutputModel
 */
export interface NssolPlatypusApiModelsAccountApiModelsAccountOutputModel {
    /**
     * ログインユーザID
     * @type {number}
     * @memberof NssolPlatypusApiModelsAccountApiModelsAccountOutputModel
     */
    'userId'?: number | null;
    /**
     * ログインユーザ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsAccountOutputModel
     */
    'userName'?: string | null;
    /**
     * ログインユーザ表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsAccountOutputModel
     */
    'userDisplayName'?: string | null;
    /**
     * パスワード変更が可能か
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsAccountApiModelsAccountOutputModel
     */
    'passwordChangeEnabled'?: boolean;
    /**
     * 
     * @type {NssolPlatypusInfrastructureInfosTenantInfo}
     * @memberof NssolPlatypusApiModelsAccountApiModelsAccountOutputModel
     */
    'selectedTenant'?: NssolPlatypusInfrastructureInfosTenantInfo;
    /**
     * 
     * @type {NssolPlatypusInfrastructureInfosTenantInfo}
     * @memberof NssolPlatypusApiModelsAccountApiModelsAccountOutputModel
     */
    'defaultTenant'?: NssolPlatypusInfrastructureInfosTenantInfo;
    /**
     * テナント名と表示名のDictionary
     * @type {Array<NssolPlatypusInfrastructureInfosTenantInfo>}
     * @memberof NssolPlatypusApiModelsAccountApiModelsAccountOutputModel
     */
    'tenants'?: Array<NssolPlatypusInfrastructureInfosTenantInfo> | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsAccountApiModelsDisplayNameInputModel
 */
export interface NssolPlatypusApiModelsAccountApiModelsDisplayNameInputModel {
    /**
     * ユーザ表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsDisplayNameInputModel
     */
    'displayName'?: string | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsAccountApiModelsGitCredentialInputModel
 */
export interface NssolPlatypusApiModelsAccountApiModelsGitCredentialInputModel {
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsAccountApiModelsGitCredentialInputModel
     */
    'id': number;
    /**
     * トークン
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsGitCredentialInputModel
     */
    'token'?: string | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsAccountApiModelsGitCredentialOutputModel
 */
export interface NssolPlatypusApiModelsAccountApiModelsGitCredentialOutputModel {
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsAccountApiModelsGitCredentialOutputModel
     */
    'id'?: number;
    /**
     * トークン
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsGitCredentialOutputModel
     */
    'token'?: string | null;
    /**
     * サービス名
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsGitCredentialOutputModel
     */
    'name'?: string | null;
    /**
     * 
     * @type {NssolPlatypusInfrastructureTypesGitServiceType}
     * @memberof NssolPlatypusApiModelsAccountApiModelsGitCredentialOutputModel
     */
    'serviceType'?: NssolPlatypusInfrastructureTypesGitServiceType;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsAccountApiModelsGitInfoOutputModel
 */
export interface NssolPlatypusApiModelsAccountApiModelsGitInfoOutputModel {
    /**
     * デフォルトのGit
     * @type {number}
     * @memberof NssolPlatypusApiModelsAccountApiModelsGitInfoOutputModel
     */
    'defaultGitId'?: number | null;
    /**
     * Git認証情報一覧
     * @type {Array<NssolPlatypusApiModelsAccountApiModelsGitCredentialOutputModel>}
     * @memberof NssolPlatypusApiModelsAccountApiModelsGitInfoOutputModel
     */
    'gits'?: Array<NssolPlatypusApiModelsAccountApiModelsGitCredentialOutputModel> | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsAccountApiModelsLoginInputModel
 */
export interface NssolPlatypusApiModelsAccountApiModelsLoginInputModel {
    /**
     * ユーザ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsLoginInputModel
     */
    'userName': string;
    /**
     * パスワード
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsLoginInputModel
     */
    'password': string;
    /**
     * テナントID。省略時はデフォルトテナント。
     * @type {number}
     * @memberof NssolPlatypusApiModelsAccountApiModelsLoginInputModel
     */
    'tenantId'?: number | null;
    /**
     * 有効期限(秒)。省略時はシステムの既定値。
     * @type {number}
     * @memberof NssolPlatypusApiModelsAccountApiModelsLoginInputModel
     */
    'expiresIn'?: number | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsAccountApiModelsLoginOutputModel
 */
export interface NssolPlatypusApiModelsAccountApiModelsLoginOutputModel {
    /**
     * トークン
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsLoginOutputModel
     */
    'token'?: string | null;
    /**
     * ユーザ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsLoginOutputModel
     */
    'userName'?: string | null;
    /**
     * テナントID
     * @type {number}
     * @memberof NssolPlatypusApiModelsAccountApiModelsLoginOutputModel
     */
    'tenantId'?: number;
    /**
     * テナント名
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsLoginOutputModel
     */
    'tenantName'?: string | null;
    /**
     * 有効期限(秒)
     * @type {number}
     * @memberof NssolPlatypusApiModelsAccountApiModelsLoginOutputModel
     */
    'expiresIn'?: number;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsAccountApiModelsMenuListOutputModel
 */
export interface NssolPlatypusApiModelsAccountApiModelsMenuListOutputModel {
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsMenuListOutputModel
     */
    'name'?: string | null;
    /**
     * 説明
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsMenuListOutputModel
     */
    'description'?: string | null;
    /**
     * URL
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsMenuListOutputModel
     */
    'url'?: string | null;
    /**
     * メニューカテゴリ。  表示側でアイコンや色などを種別ごとに変更する際などに使用される想定。
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsMenuListOutputModel
     */
    'category'?: string | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsAccountApiModelsMenuTreeOutputModel
 */
export interface NssolPlatypusApiModelsAccountApiModelsMenuTreeOutputModel {
    /**
     * 表示文字列
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsMenuTreeOutputModel
     */
    'label'?: string | null;
    /**
     * メニューカテゴリ。  表示側でアイコンや色などを種別ごとに変更する際などに使用される想定。
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsMenuTreeOutputModel
     */
    'category'?: string | null;
    /**
     * URL
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsMenuTreeOutputModel
     */
    'url'?: string | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsAccountApiModelsMenuTreeOutputModelMenuGroup
 */
export interface NssolPlatypusApiModelsAccountApiModelsMenuTreeOutputModelMenuGroup {
    /**
     * 表示文字列
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsMenuTreeOutputModelMenuGroup
     */
    'label'?: string | null;
    /**
     * メニューカテゴリ。  表示側でアイコンや色などを種別ごとに変更する際などに使用される想定。
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsMenuTreeOutputModelMenuGroup
     */
    'category'?: string | null;
    /**
     * URL
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsMenuTreeOutputModelMenuGroup
     */
    'url'?: string | null;
    /**
     * 子
     * @type {Array<NssolPlatypusApiModelsAccountApiModelsMenuTreeOutputModel>}
     * @memberof NssolPlatypusApiModelsAccountApiModelsMenuTreeOutputModelMenuGroup
     */
    'children'?: Array<NssolPlatypusApiModelsAccountApiModelsMenuTreeOutputModel> | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsAccountApiModelsPasswordInputModel
 */
export interface NssolPlatypusApiModelsAccountApiModelsPasswordInputModel {
    /**
     * 現在のパスワード
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsPasswordInputModel
     */
    'currentPassword': string;
    /**
     * 変更後のパスワード
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsPasswordInputModel
     */
    'newPassword': string;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsAccountApiModelsRegistryCredentialInputModel
 */
export interface NssolPlatypusApiModelsAccountApiModelsRegistryCredentialInputModel {
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsAccountApiModelsRegistryCredentialInputModel
     */
    'id': number;
    /**
     * 認証ユーザ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsRegistryCredentialInputModel
     */
    'userName'?: string | null;
    /**
     * パスワードあるいはトークン
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsRegistryCredentialInputModel
     */
    'password'?: string | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsAccountApiModelsRegistryCredentialOutputModel
 */
export interface NssolPlatypusApiModelsAccountApiModelsRegistryCredentialOutputModel {
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsAccountApiModelsRegistryCredentialOutputModel
     */
    'id'?: number;
    /**
     * 認証ユーザ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsRegistryCredentialOutputModel
     */
    'userName'?: string | null;
    /**
     * パスワードあるいはトークン
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsRegistryCredentialOutputModel
     */
    'password'?: string | null;
    /**
     * サービス名
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsRegistryCredentialOutputModel
     */
    'name'?: string | null;
    /**
     * プロジェクト名
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsRegistryCredentialOutputModel
     */
    'projectName'?: string | null;
    /**
     * 
     * @type {NssolPlatypusInfrastructureTypesRegistryServiceType}
     * @memberof NssolPlatypusApiModelsAccountApiModelsRegistryCredentialOutputModel
     */
    'serviceType'?: NssolPlatypusInfrastructureTypesRegistryServiceType;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsAccountApiModelsRegistryInfoOutputModel
 */
export interface NssolPlatypusApiModelsAccountApiModelsRegistryInfoOutputModel {
    /**
     * デフォルトのレジストリ
     * @type {number}
     * @memberof NssolPlatypusApiModelsAccountApiModelsRegistryInfoOutputModel
     */
    'defaultRegistryId'?: number | null;
    /**
     * レジストリ認証情報一覧
     * @type {Array<NssolPlatypusApiModelsAccountApiModelsRegistryCredentialOutputModel>}
     * @memberof NssolPlatypusApiModelsAccountApiModelsRegistryInfoOutputModel
     */
    'registries'?: Array<NssolPlatypusApiModelsAccountApiModelsRegistryCredentialOutputModel> | null;
}
/**
 * テナント切替用入力モデル
 * @export
 * @interface NssolPlatypusApiModelsAccountApiModelsSwitchTenantInputModel
 */
export interface NssolPlatypusApiModelsAccountApiModelsSwitchTenantInputModel {
    /**
     * 有効期限(秒)。省略時はシステムの既定値。
     * @type {number}
     * @memberof NssolPlatypusApiModelsAccountApiModelsSwitchTenantInputModel
     */
    'expiresIn'?: number | null;
}
/**
 * Webhook用モデル
 * @export
 * @interface NssolPlatypusApiModelsAccountApiModelsWebhookModel
 */
export interface NssolPlatypusApiModelsAccountApiModelsWebhookModel {
    /**
     * Slackの送信先URL
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsWebhookModel
     */
    'slackUrl'?: string | null;
    /**
     * Slackメッセージのメンション
     * @type {string}
     * @memberof NssolPlatypusApiModelsAccountApiModelsWebhookModel
     */
    'mention'?: string | null;
}
/**
 * アクアリウムデータセット作成の入力モデル
 * @export
 * @interface NssolPlatypusApiModelsAquariumDataSetApiModelsCreateInputModel
 */
export interface NssolPlatypusApiModelsAquariumDataSetApiModelsCreateInputModel {
    /**
     * データセット名
     * @type {string}
     * @memberof NssolPlatypusApiModelsAquariumDataSetApiModelsCreateInputModel
     */
    'name': string;
}
/**
 * アクアリウムデータセットの出力モデル
 * @export
 * @interface NssolPlatypusApiModelsAquariumDataSetApiModelsIndexOutputModel
 */
export interface NssolPlatypusApiModelsAquariumDataSetApiModelsIndexOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsAquariumDataSetApiModelsIndexOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsAquariumDataSetApiModelsIndexOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsAquariumDataSetApiModelsIndexOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsAquariumDataSetApiModelsIndexOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsAquariumDataSetApiModelsIndexOutputModel
     */
    'id'?: number;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsAquariumDataSetApiModelsIndexOutputModel
     */
    'name'?: string | null;
    /**
     * 最新バージョン番号
     * @type {number}
     * @memberof NssolPlatypusApiModelsAquariumDataSetApiModelsIndexOutputModel
     */
    'latestVersion'?: number;
}
/**
 * アクアリウムデータセットバージョン作成の入力モデル
 * @export
 * @interface NssolPlatypusApiModelsAquariumDataSetApiModelsVersionCreateInputModel
 */
export interface NssolPlatypusApiModelsAquariumDataSetApiModelsVersionCreateInputModel {
    /**
     * データセットID
     * @type {number}
     * @memberof NssolPlatypusApiModelsAquariumDataSetApiModelsVersionCreateInputModel
     */
    'dataSetId': number;
}
/**
 * アクアリウムデータセットバージョンの詳細出力モデル
 * @export
 * @interface NssolPlatypusApiModelsAquariumDataSetApiModelsVersionDetailsOutputModel
 */
export interface NssolPlatypusApiModelsAquariumDataSetApiModelsVersionDetailsOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsAquariumDataSetApiModelsVersionDetailsOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsAquariumDataSetApiModelsVersionDetailsOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsAquariumDataSetApiModelsVersionDetailsOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsAquariumDataSetApiModelsVersionDetailsOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsAquariumDataSetApiModelsVersionDetailsOutputModel
     */
    'id'?: number;
    /**
     * バージョン番号
     * @type {number}
     * @memberof NssolPlatypusApiModelsAquariumDataSetApiModelsVersionDetailsOutputModel
     */
    'version'?: number;
    /**
     * アクアリウムデータセットID
     * @type {number}
     * @memberof NssolPlatypusApiModelsAquariumDataSetApiModelsVersionDetailsOutputModel
     */
    'aquariumDataSetId'?: number;
    /**
     * データセットID
     * @type {number}
     * @memberof NssolPlatypusApiModelsAquariumDataSetApiModelsVersionDetailsOutputModel
     */
    'dataSetId'?: number;
    /**
     * データエントリ
     * @type {{ [key: string]: Array<NssolPlatypusApiModelsDataApiModelsIndexOutputModel>; }}
     * @memberof NssolPlatypusApiModelsAquariumDataSetApiModelsVersionDetailsOutputModel
     */
    'entries'?: { [key: string]: Array<NssolPlatypusApiModelsDataApiModelsIndexOutputModel>; } | null;
    /**
     * IsFlat == trueの場合に参照されるデータエントリ
     * @type {Array<NssolPlatypusApiModelsDataApiModelsIndexOutputModel>}
     * @memberof NssolPlatypusApiModelsAquariumDataSetApiModelsVersionDetailsOutputModel
     */
    'flatEntries'?: Array<NssolPlatypusApiModelsDataApiModelsIndexOutputModel> | null;
    /**
     * メモ。中身となるKAMONOHASHIのデータセットのメモが入る
     * @type {string}
     * @memberof NssolPlatypusApiModelsAquariumDataSetApiModelsVersionDetailsOutputModel
     */
    'memo'?: string | null;
}
/**
 * アクアリウムデータセットバージョンの出力モデル
 * @export
 * @interface NssolPlatypusApiModelsAquariumDataSetApiModelsVersionIndexOutputModel
 */
export interface NssolPlatypusApiModelsAquariumDataSetApiModelsVersionIndexOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsAquariumDataSetApiModelsVersionIndexOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsAquariumDataSetApiModelsVersionIndexOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsAquariumDataSetApiModelsVersionIndexOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsAquariumDataSetApiModelsVersionIndexOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsAquariumDataSetApiModelsVersionIndexOutputModel
     */
    'id'?: number;
    /**
     * バージョン番号
     * @type {number}
     * @memberof NssolPlatypusApiModelsAquariumDataSetApiModelsVersionIndexOutputModel
     */
    'version'?: number;
    /**
     * アクアリウムデータセットID
     * @type {number}
     * @memberof NssolPlatypusApiModelsAquariumDataSetApiModelsVersionIndexOutputModel
     */
    'aquariumDataSetId'?: number;
    /**
     * データセットID
     * @type {number}
     * @memberof NssolPlatypusApiModelsAquariumDataSetApiModelsVersionIndexOutputModel
     */
    'dataSetId'?: number;
}
/**
 * ノードのリソース情報出力モデル
 * @export
 * @interface NssolPlatypusApiModelsClusterApiModelsNodeResourceOutputModel
 */
export interface NssolPlatypusApiModelsClusterApiModelsNodeResourceOutputModel {
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsClusterApiModelsNodeResourceOutputModel
     */
    'name'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsClusterApiModelsNodeResourceOutputModel
     */
    'memo'?: string | null;
    /**
     * パーティション
     * @type {string}
     * @memberof NssolPlatypusApiModelsClusterApiModelsNodeResourceOutputModel
     */
    'partition'?: string | null;
    /**
     * 
     * @type {NssolPlatypusInfrastructureNodeAccessLevel}
     * @memberof NssolPlatypusApiModelsClusterApiModelsNodeResourceOutputModel
     */
    'accessLevel'?: NssolPlatypusInfrastructureNodeAccessLevel;
    /**
     * 割り当て可能なCPU
     * @type {number}
     * @memberof NssolPlatypusApiModelsClusterApiModelsNodeResourceOutputModel
     */
    'allocatableCpu'?: number;
    /**
     * 割り当て可能なメモリ(単位：GB)
     * @type {number}
     * @memberof NssolPlatypusApiModelsClusterApiModelsNodeResourceOutputModel
     */
    'allocatableMemory'?: number;
    /**
     * 割り当て可能なGPU
     * @type {number}
     * @memberof NssolPlatypusApiModelsClusterApiModelsNodeResourceOutputModel
     */
    'allocatableGpu'?: number;
}
/**
 * クォータ設定情報入力モデル
 * @export
 * @interface NssolPlatypusApiModelsClusterApiModelsQuotaInputModel
 */
export interface NssolPlatypusApiModelsClusterApiModelsQuotaInputModel {
    /**
     * テナントID
     * @type {number}
     * @memberof NssolPlatypusApiModelsClusterApiModelsQuotaInputModel
     */
    'tenantId': number;
    /**
     * CPUコア数。未指定、あるいは0を指定した場合は無制限。
     * @type {number}
     * @memberof NssolPlatypusApiModelsClusterApiModelsQuotaInputModel
     */
    'cpu'?: number;
    /**
     * メモリ（GB）。未指定、あるいは0を指定した場合は無制限。
     * @type {number}
     * @memberof NssolPlatypusApiModelsClusterApiModelsQuotaInputModel
     */
    'memory'?: number;
    /**
     * GPU数。未指定、あるいは0を指定した場合は無制限。
     * @type {number}
     * @memberof NssolPlatypusApiModelsClusterApiModelsQuotaInputModel
     */
    'gpu'?: number;
}
/**
 * クォータ設定情報出力モデル
 * @export
 * @interface NssolPlatypusApiModelsClusterApiModelsQuotaOutputModel
 */
export interface NssolPlatypusApiModelsClusterApiModelsQuotaOutputModel {
    /**
     * テナントID
     * @type {number}
     * @memberof NssolPlatypusApiModelsClusterApiModelsQuotaOutputModel
     */
    'tenantId': number;
    /**
     * CPUコア数。未指定、あるいは0を指定した場合は無制限。
     * @type {number}
     * @memberof NssolPlatypusApiModelsClusterApiModelsQuotaOutputModel
     */
    'cpu'?: number;
    /**
     * メモリ（GB）。未指定、あるいは0を指定した場合は無制限。
     * @type {number}
     * @memberof NssolPlatypusApiModelsClusterApiModelsQuotaOutputModel
     */
    'memory'?: number;
    /**
     * GPU数。未指定、あるいは0を指定した場合は無制限。
     * @type {number}
     * @memberof NssolPlatypusApiModelsClusterApiModelsQuotaOutputModel
     */
    'gpu'?: number;
    /**
     * テナント表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsClusterApiModelsQuotaOutputModel
     */
    'tenantName'?: string | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsComponentsAddFileInputModel
 */
export interface NssolPlatypusApiModelsComponentsAddFileInputModel {
    /**
     * ファイル名
     * @type {string}
     * @memberof NssolPlatypusApiModelsComponentsAddFileInputModel
     */
    'fileName': string;
    /**
     * 保存パス
     * @type {string}
     * @memberof NssolPlatypusApiModelsComponentsAddFileInputModel
     */
    'storedPath': string;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsComponentsContainerImageInputModel
 */
export interface NssolPlatypusApiModelsComponentsContainerImageInputModel {
    /**
     * レジストリID。  未指定の場合はテナントのデフォルトが使用される。
     * @type {number}
     * @memberof NssolPlatypusApiModelsComponentsContainerImageInputModel
     */
    'registryId'?: number | null;
    /**
     * イメージ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsComponentsContainerImageInputModel
     */
    'image': string;
    /**
     * タグ（バージョン）名
     * @type {string}
     * @memberof NssolPlatypusApiModelsComponentsContainerImageInputModel
     */
    'tag': string;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsComponentsContainerImageOutputModel
 */
export interface NssolPlatypusApiModelsComponentsContainerImageOutputModel {
    /**
     * レジストリID。  未指定の場合はテナントのデフォルトが使用される。
     * @type {number}
     * @memberof NssolPlatypusApiModelsComponentsContainerImageOutputModel
     */
    'registryId'?: number | null;
    /**
     * イメージ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsComponentsContainerImageOutputModel
     */
    'image': string;
    /**
     * タグ（バージョン）名
     * @type {string}
     * @memberof NssolPlatypusApiModelsComponentsContainerImageOutputModel
     */
    'tag': string;
    /**
     * レジストリ名。
     * @type {string}
     * @memberof NssolPlatypusApiModelsComponentsContainerImageOutputModel
     */
    'registryName'?: string | null;
    /**
     * {リポジトリ名}/{イメージ名}:{タグ名}
     * @type {string}
     * @memberof NssolPlatypusApiModelsComponentsContainerImageOutputModel
     */
    'url'?: string | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsComponentsGitCommitInputModel
 */
export interface NssolPlatypusApiModelsComponentsGitCommitInputModel {
    /**
     * Git ID。  未指定の場合はテナントのデフォルトが使用される。
     * @type {number}
     * @memberof NssolPlatypusApiModelsComponentsGitCommitInputModel
     */
    'gitId'?: number | null;
    /**
     * リポジトリ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsComponentsGitCommitInputModel
     */
    'repository': string;
    /**
     * リポジトリのオーナー名
     * @type {string}
     * @memberof NssolPlatypusApiModelsComponentsGitCommitInputModel
     */
    'owner': string;
    /**
     * ブランチ名。指定しない場合はmasterになる。  Nssol.Platypus.ApiModels.Components.GitCommitInputModel.CommitIdを指定した場合は無視される。
     * @type {string}
     * @memberof NssolPlatypusApiModelsComponentsGitCommitInputModel
     */
    'branch'?: string | null;
    /**
     * コミットID。指定しない場合はNssol.Platypus.ApiModels.Components.GitCommitInputModel.BranchのHEADコミットになる。
     * @type {string}
     * @memberof NssolPlatypusApiModelsComponentsGitCommitInputModel
     */
    'commitId'?: string | null;
}
/**
 * Nssol.Platypus.ApiModels.Components.GitCommitInputModelからRequiredを消したもの。
 * @export
 * @interface NssolPlatypusApiModelsComponentsGitCommitNullableInputModel
 */
export interface NssolPlatypusApiModelsComponentsGitCommitNullableInputModel {
    /**
     * Git ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsComponentsGitCommitNullableInputModel
     */
    'gitId'?: number | null;
    /**
     * リポジトリ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsComponentsGitCommitNullableInputModel
     */
    'repository'?: string | null;
    /**
     * リポジトリのオーナー名
     * @type {string}
     * @memberof NssolPlatypusApiModelsComponentsGitCommitNullableInputModel
     */
    'owner'?: string | null;
    /**
     * ブランチ名。指定しない場合はmasterになる。  Nssol.Platypus.ApiModels.Components.GitCommitNullableInputModel.CommitIdを指定した場合は無視される。
     * @type {string}
     * @memberof NssolPlatypusApiModelsComponentsGitCommitNullableInputModel
     */
    'branch'?: string | null;
    /**
     * コミットID。指定しない場合はNssol.Platypus.ApiModels.Components.GitCommitNullableInputModel.BranchのHEADコミットになる。
     * @type {string}
     * @memberof NssolPlatypusApiModelsComponentsGitCommitNullableInputModel
     */
    'commitId'?: string | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsComponentsGitCommitOutputModel
 */
export interface NssolPlatypusApiModelsComponentsGitCommitOutputModel {
    /**
     * Git ID。  未指定の場合はテナントのデフォルトが使用される。
     * @type {number}
     * @memberof NssolPlatypusApiModelsComponentsGitCommitOutputModel
     */
    'gitId'?: number | null;
    /**
     * リポジトリ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsComponentsGitCommitOutputModel
     */
    'repository': string;
    /**
     * リポジトリのオーナー名
     * @type {string}
     * @memberof NssolPlatypusApiModelsComponentsGitCommitOutputModel
     */
    'owner': string;
    /**
     * ブランチ名。指定しない場合はmasterになる。  Nssol.Platypus.ApiModels.Components.GitCommitInputModel.CommitIdを指定した場合は無視される。
     * @type {string}
     * @memberof NssolPlatypusApiModelsComponentsGitCommitOutputModel
     */
    'branch'?: string | null;
    /**
     * コミットID。指定しない場合はNssol.Platypus.ApiModels.Components.GitCommitInputModel.BranchのHEADコミットになる。
     * @type {string}
     * @memberof NssolPlatypusApiModelsComponentsGitCommitOutputModel
     */
    'commitId'?: string | null;
    /**
     * GitサービスのWebUI URL
     * @type {string}
     * @memberof NssolPlatypusApiModelsComponentsGitCommitOutputModel
     */
    'url'?: string | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsDataApiModelsAddFilesInputModel
 */
export interface NssolPlatypusApiModelsDataApiModelsAddFilesInputModel {
    /**
     * ファイル名と保存パスのペアのListを受け取る
     * @type {Array<NssolPlatypusApiModelsComponentsAddFileInputModel>}
     * @memberof NssolPlatypusApiModelsDataApiModelsAddFilesInputModel
     */
    'files': Array<NssolPlatypusApiModelsComponentsAddFileInputModel>;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsDataApiModelsCreateInputModel
 */
export interface NssolPlatypusApiModelsDataApiModelsCreateInputModel {
    /**
     * データ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataApiModelsCreateInputModel
     */
    'name': string;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataApiModelsCreateInputModel
     */
    'memo'?: string | null;
    /**
     * タグ。
     * @type {Array<string>}
     * @memberof NssolPlatypusApiModelsDataApiModelsCreateInputModel
     */
    'tags'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsDataApiModelsDataFileOutputModel
 */
export interface NssolPlatypusApiModelsDataApiModelsDataFileOutputModel {
    /**
     * データID
     * @type {number}
     * @memberof NssolPlatypusApiModelsDataApiModelsDataFileOutputModel
     */
    'id'?: number;
    /**
     * データファイルID
     * @type {number}
     * @memberof NssolPlatypusApiModelsDataApiModelsDataFileOutputModel
     */
    'fileId'?: number;
    /**
     * ファイル種別キー
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataApiModelsDataFileOutputModel
     */
    'key'?: string | null;
    /**
     * ファイルURL
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataApiModelsDataFileOutputModel
     */
    'url'?: string | null;
    /**
     * ファイル名
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataApiModelsDataFileOutputModel
     */
    'fileName'?: string | null;
    /**
     * ファイルサイズ
     * @type {number}
     * @memberof NssolPlatypusApiModelsDataApiModelsDataFileOutputModel
     */
    'fileSize'?: number;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsDataApiModelsDataFilesOutputModel
 */
export interface NssolPlatypusApiModelsDataApiModelsDataFilesOutputModel {
    /**
     * データID
     * @type {number}
     * @memberof NssolPlatypusApiModelsDataApiModelsDataFilesOutputModel
     */
    'id'?: number;
    /**
     * 
     * @type {Array<NssolPlatypusApiModelsDataApiModelsDataFileOutputModel>}
     * @memberof NssolPlatypusApiModelsDataApiModelsDataFilesOutputModel
     */
    'files'?: Array<NssolPlatypusApiModelsDataApiModelsDataFileOutputModel> | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsDataApiModelsDetailsOutputModel
 */
export interface NssolPlatypusApiModelsDataApiModelsDetailsOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataApiModelsDetailsOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataApiModelsDetailsOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataApiModelsDetailsOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataApiModelsDetailsOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsDataApiModelsDetailsOutputModel
     */
    'id'?: number;
    /**
     * 表示用ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsDataApiModelsDetailsOutputModel
     */
    'displayId'?: number | null;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataApiModelsDetailsOutputModel
     */
    'name'?: string | null;
    /**
     * メモ。非構造データ用。
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataApiModelsDetailsOutputModel
     */
    'memo'?: string | null;
    /**
     * 未加工のデータか
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsDataApiModelsDetailsOutputModel
     */
    'isRaw'?: boolean;
    /**
     * 元データ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataApiModelsDetailsOutputModel
     */
    'parentDataName'?: string | null;
    /**
     * 元データID
     * @type {number}
     * @memberof NssolPlatypusApiModelsDataApiModelsDetailsOutputModel
     */
    'parentDataId'?: number | null;
    /**
     * タグ
     * @type {Array<string>}
     * @memberof NssolPlatypusApiModelsDataApiModelsDetailsOutputModel
     */
    'tags'?: Array<string> | null;
    /**
     * 登録者表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataApiModelsDetailsOutputModel
     */
    'displayNameCreatedBy'?: string | null;
    /**
     * データファイル名リスト
     * @type {Array<string>}
     * @memberof NssolPlatypusApiModelsDataApiModelsDetailsOutputModel
     */
    'fileNames'?: Array<string> | null;
    /**
     * 
     * @type {NssolPlatypusApiModelsDataApiModelsIndexOutputModel}
     * @memberof NssolPlatypusApiModelsDataApiModelsDetailsOutputModel
     */
    'parent'?: NssolPlatypusApiModelsDataApiModelsIndexOutputModel;
    /**
     * 派生先データ
     * @type {Array<NssolPlatypusApiModelsDataApiModelsPreprocessHistoryOutputModel>}
     * @memberof NssolPlatypusApiModelsDataApiModelsDetailsOutputModel
     */
    'children'?: Array<NssolPlatypusApiModelsDataApiModelsPreprocessHistoryOutputModel> | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsDataApiModelsEditInputModel
 */
export interface NssolPlatypusApiModelsDataApiModelsEditInputModel {
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataApiModelsEditInputModel
     */
    'name'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataApiModelsEditInputModel
     */
    'memo'?: string | null;
    /**
     * タグ。
     * @type {Array<string>}
     * @memberof NssolPlatypusApiModelsDataApiModelsEditInputModel
     */
    'tags'?: Array<string> | null;
}
/**
 * Index用モデル。  タグ情報を含んでいる。
 * @export
 * @interface NssolPlatypusApiModelsDataApiModelsIndexOutputModel
 */
export interface NssolPlatypusApiModelsDataApiModelsIndexOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataApiModelsIndexOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataApiModelsIndexOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataApiModelsIndexOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataApiModelsIndexOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsDataApiModelsIndexOutputModel
     */
    'id'?: number;
    /**
     * 表示用ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsDataApiModelsIndexOutputModel
     */
    'displayId'?: number | null;
    /**
     * 登録者表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataApiModelsIndexOutputModel
     */
    'displayNameCreatedBy'?: string | null;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataApiModelsIndexOutputModel
     */
    'name'?: string | null;
    /**
     * メモ。非構造データ用。
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataApiModelsIndexOutputModel
     */
    'memo'?: string | null;
    /**
     * 未加工のデータか
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsDataApiModelsIndexOutputModel
     */
    'isRaw'?: boolean;
    /**
     * 元データ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataApiModelsIndexOutputModel
     */
    'parentDataName'?: string | null;
    /**
     * 元データID
     * @type {number}
     * @memberof NssolPlatypusApiModelsDataApiModelsIndexOutputModel
     */
    'parentDataId'?: number | null;
    /**
     * タグ
     * @type {Array<string>}
     * @memberof NssolPlatypusApiModelsDataApiModelsIndexOutputModel
     */
    'tags'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsDataApiModelsPreprocessHistoryOutputModel
 */
export interface NssolPlatypusApiModelsDataApiModelsPreprocessHistoryOutputModel {
    /**
     * 前処理履歴ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsDataApiModelsPreprocessHistoryOutputModel
     */
    'id'?: number;
    /**
     * 入力データID
     * @type {number}
     * @memberof NssolPlatypusApiModelsDataApiModelsPreprocessHistoryOutputModel
     */
    'inputDataId'?: number;
    /**
     * 入力データ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataApiModelsPreprocessHistoryOutputModel
     */
    'inputDataName'?: string | null;
    /**
     * 前処理ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsDataApiModelsPreprocessHistoryOutputModel
     */
    'preprocessId'?: number | null;
    /**
     * 前処理名
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataApiModelsPreprocessHistoryOutputModel
     */
    'preprocessName'?: string | null;
}
/**
 * データセット作成の入力モデル
 * @export
 * @interface NssolPlatypusApiModelsDataSetApiModelsCreateInputModel
 */
export interface NssolPlatypusApiModelsDataSetApiModelsCreateInputModel {
    /**
     * データセット名
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsCreateInputModel
     */
    'name': string;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsCreateInputModel
     */
    'memo'?: string | null;
    /**
     * 展開時にデータ種別を無視する
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsCreateInputModel
     */
    'isFlat'?: boolean;
    /**
     * キーにデータ種別、値にデータIDの集合を取るディクショナリ
     * @type {{ [key: string]: Array<NssolPlatypusApiModelsDataSetApiModelsCreateInputModelEntry>; }}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsCreateInputModel
     */
    'entries': { [key: string]: Array<NssolPlatypusApiModelsDataSetApiModelsCreateInputModelEntry>; };
    /**
     * IsFlat == trueの場合に参照されるエントリ
     * @type {Array<NssolPlatypusApiModelsDataSetApiModelsCreateInputModelEntry>}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsCreateInputModel
     */
    'flatEntries'?: Array<NssolPlatypusApiModelsDataSetApiModelsCreateInputModelEntry> | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsDataSetApiModelsCreateInputModelEntry
 */
export interface NssolPlatypusApiModelsDataSetApiModelsCreateInputModelEntry {
    /**
     * データID
     * @type {number}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsCreateInputModelEntry
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsDataSetApiModelsDataFileOutputModel
 */
export interface NssolPlatypusApiModelsDataSetApiModelsDataFileOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsDataFileOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsDataFileOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsDataFileOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsDataFileOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsDataFileOutputModel
     */
    'id'?: number;
    /**
     * 表示用ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsDataFileOutputModel
     */
    'displayId'?: number | null;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsDataFileOutputModel
     */
    'name'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsDataFileOutputModel
     */
    'memo'?: string | null;
    /**
     * 展開時にデータ種別を無視する
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsDataFileOutputModel
     */
    'isFlat'?: boolean;
    /**
     * データセットのエントリ
     * @type {Array<NssolPlatypusApiModelsDataSetApiModelsDataFileOutputModelEntry>}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsDataFileOutputModel
     */
    'entries'?: Array<NssolPlatypusApiModelsDataSetApiModelsDataFileOutputModelEntry> | null;
    /**
     * IsFlat == trueの場合に参照されるエントリ
     * @type {Array<NssolPlatypusApiModelsDataApiModelsDataFileOutputModel>}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsDataFileOutputModel
     */
    'flatEntries'?: Array<NssolPlatypusApiModelsDataApiModelsDataFileOutputModel> | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsDataSetApiModelsDataFileOutputModelEntry
 */
export interface NssolPlatypusApiModelsDataSetApiModelsDataFileOutputModelEntry {
    /**
     * データ種別
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsDataFileOutputModelEntry
     */
    'type'?: string | null;
    /**
     * ファイル情報のリスト
     * @type {Array<NssolPlatypusApiModelsDataApiModelsDataFileOutputModel>}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsDataFileOutputModelEntry
     */
    'files'?: Array<NssolPlatypusApiModelsDataApiModelsDataFileOutputModel> | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsDataSetApiModelsDataTypeOutputModel
 */
export interface NssolPlatypusApiModelsDataSetApiModelsDataTypeOutputModel {
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsDataTypeOutputModel
     */
    'id'?: number;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsDataTypeOutputModel
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsDataSetApiModelsDetailsOutputModel
 */
export interface NssolPlatypusApiModelsDataSetApiModelsDetailsOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsDetailsOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsDetailsOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsDetailsOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsDetailsOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsDetailsOutputModel
     */
    'id'?: number;
    /**
     * 表示用ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsDetailsOutputModel
     */
    'displayId'?: number | null;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsDetailsOutputModel
     */
    'name'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsDetailsOutputModel
     */
    'memo'?: string | null;
    /**
     * 展開時にデータ種別を無視する
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsDetailsOutputModel
     */
    'isFlat'?: boolean;
    /**
     * 登録者表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsDetailsOutputModel
     */
    'displayNameCreatedBy'?: string | null;
    /**
     * データセットのエントリ。キーにデータ種別、値にデータ情報集合を持つ。
     * @type {{ [key: string]: Array<NssolPlatypusApiModelsDataApiModelsIndexOutputModel>; }}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsDetailsOutputModel
     */
    'entries'?: { [key: string]: Array<NssolPlatypusApiModelsDataApiModelsIndexOutputModel>; } | null;
    /**
     * IsFlat == trueの場合に参照されるエントリ
     * @type {Array<NssolPlatypusApiModelsDataApiModelsIndexOutputModel>}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsDetailsOutputModel
     */
    'flatEntries'?: Array<NssolPlatypusApiModelsDataApiModelsIndexOutputModel> | null;
    /**
     * 実行済みか
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsDetailsOutputModel
     */
    'isLocked'?: boolean;
}
/**
 * データセット編集の入力モデル
 * @export
 * @interface NssolPlatypusApiModelsDataSetApiModelsEditEntriesInputModel
 */
export interface NssolPlatypusApiModelsDataSetApiModelsEditEntriesInputModel {
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsEditEntriesInputModel
     */
    'name'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsEditEntriesInputModel
     */
    'memo'?: string | null;
    /**
     * キーにデータ種別、値にデータIDの集合を取るディクショナリ
     * @type {{ [key: string]: Array<NssolPlatypusApiModelsDataSetApiModelsCreateInputModelEntry>; }}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsEditEntriesInputModel
     */
    'entries'?: { [key: string]: Array<NssolPlatypusApiModelsDataSetApiModelsCreateInputModelEntry>; } | null;
    /**
     * IsFlat == trueの場合に参照されるエントリ
     * @type {Array<NssolPlatypusApiModelsDataSetApiModelsCreateInputModelEntry>}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsEditEntriesInputModel
     */
    'flatEntries'?: Array<NssolPlatypusApiModelsDataSetApiModelsCreateInputModelEntry> | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsDataSetApiModelsEditInputModel
 */
export interface NssolPlatypusApiModelsDataSetApiModelsEditInputModel {
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsEditInputModel
     */
    'name'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsEditInputModel
     */
    'memo'?: string | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsDataSetApiModelsIndexOutputModel
 */
export interface NssolPlatypusApiModelsDataSetApiModelsIndexOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsIndexOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsIndexOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsIndexOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsIndexOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsIndexOutputModel
     */
    'id'?: number;
    /**
     * 表示用ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsIndexOutputModel
     */
    'displayId'?: number | null;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsIndexOutputModel
     */
    'name'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsIndexOutputModel
     */
    'memo'?: string | null;
    /**
     * 展開時にデータ種別を無視する
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsIndexOutputModel
     */
    'isFlat'?: boolean;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsDataSetApiModelsPathPairOutputModel
 */
export interface NssolPlatypusApiModelsDataSetApiModelsPathPairOutputModel {
    /**
     * データセットのデータのパス 例: /training/123/test.bin
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsPathPairOutputModel
     */
    'dataPath'?: string | null;
    /**
     * NFS上のファイルのパス 例: 32f8b149-8bf2-42bf-9656-d512c4092449.bin
     * @type {string}
     * @memberof NssolPlatypusApiModelsDataSetApiModelsPathPairOutputModel
     */
    'storedPath'?: string | null;
}
/**
 * 実験開始の入力モデル
 * @export
 * @interface NssolPlatypusApiModelsExperimentApiModelsCreateInputModel
 */
export interface NssolPlatypusApiModelsExperimentApiModelsCreateInputModel {
    /**
     * 実験名
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsCreateInputModel
     */
    'name': string;
    /**
     * アクアリウムデータセットID
     * @type {number}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsCreateInputModel
     */
    'dataSetId'?: number;
    /**
     * アクアリウムデータセットバージョンID
     * @type {number}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsCreateInputModel
     */
    'dataSetVersionId'?: number;
    /**
     * テンプレートID
     * @type {number}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsCreateInputModel
     */
    'templateId'?: number;
    /**
     * テンプレートバージョンID
     * @type {number}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsCreateInputModel
     */
    'templateVersionId'?: number;
}
/**
 * 実験の詳細出力モデル
 * @export
 * @interface NssolPlatypusApiModelsExperimentApiModelsDetailsOutputModel
 */
export interface NssolPlatypusApiModelsExperimentApiModelsDetailsOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsDetailsOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsDetailsOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsDetailsOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsDetailsOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsDetailsOutputModel
     */
    'id'?: number;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsDetailsOutputModel
     */
    'name'?: string | null;
    /**
     * 開始日時
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsDetailsOutputModel
     */
    'startedAt'?: string | null;
    /**
     * 完了日時
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsDetailsOutputModel
     */
    'completedAt'?: string | null;
    /**
     * ステータス
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsDetailsOutputModel
     */
    'status'?: string | null;
    /**
     * 
     * @type {NssolPlatypusApiModelsAquariumDataSetApiModelsIndexOutputModel}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsDetailsOutputModel
     */
    'dataSet'?: NssolPlatypusApiModelsAquariumDataSetApiModelsIndexOutputModel;
    /**
     * 
     * @type {NssolPlatypusApiModelsTemplateApiModelsIndexOutputModel}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsDetailsOutputModel
     */
    'template'?: NssolPlatypusApiModelsTemplateApiModelsIndexOutputModel;
    /**
     * 
     * @type {NssolPlatypusApiModelsAquariumDataSetApiModelsVersionIndexOutputModel}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsDetailsOutputModel
     */
    'dataSetVersion'?: NssolPlatypusApiModelsAquariumDataSetApiModelsVersionIndexOutputModel;
    /**
     * 
     * @type {NssolPlatypusApiModelsTemplateApiModelsVersionIndexOutputModel}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsDetailsOutputModel
     */
    'templateVersion'?: NssolPlatypusApiModelsTemplateApiModelsVersionIndexOutputModel;
    /**
     * 
     * @type {NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsDetailsOutputModel
     */
    'preprocess'?: NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel;
    /**
     * 
     * @type {NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsDetailsOutputModel
     */
    'training'?: NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel;
}
/**
 * アクアリウム推論作成の入力モデル
 * @export
 * @interface NssolPlatypusApiModelsExperimentApiModelsEvaluationCreateInputModel
 */
export interface NssolPlatypusApiModelsExperimentApiModelsEvaluationCreateInputModel {
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsEvaluationCreateInputModel
     */
    'name': string;
    /**
     * アクアリウムデータセットID
     * @type {number}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsEvaluationCreateInputModel
     */
    'dataSetId'?: number;
    /**
     * アクアリウムデータセットバージョンID
     * @type {number}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsEvaluationCreateInputModel
     */
    'dataSetVersionId'?: number;
}
/**
 * アクアリウム推論の出力モデル
 * @export
 * @interface NssolPlatypusApiModelsExperimentApiModelsEvaluationIndexOutputModel
 */
export interface NssolPlatypusApiModelsExperimentApiModelsEvaluationIndexOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsEvaluationIndexOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsEvaluationIndexOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsEvaluationIndexOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsEvaluationIndexOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsEvaluationIndexOutputModel
     */
    'id'?: number;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsEvaluationIndexOutputModel
     */
    'name'?: string | null;
    /**
     * 開始日時
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsEvaluationIndexOutputModel
     */
    'startedAt'?: string | null;
    /**
     * 完了日時
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsEvaluationIndexOutputModel
     */
    'completedAt'?: string | null;
    /**
     * ステータス
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsEvaluationIndexOutputModel
     */
    'status'?: string | null;
    /**
     * 
     * @type {NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsEvaluationIndexOutputModel
     */
    'training'?: NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel;
    /**
     * 
     * @type {NssolPlatypusApiModelsAquariumDataSetApiModelsIndexOutputModel}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsEvaluationIndexOutputModel
     */
    'dataSet'?: NssolPlatypusApiModelsAquariumDataSetApiModelsIndexOutputModel;
    /**
     * 
     * @type {NssolPlatypusApiModelsAquariumDataSetApiModelsVersionIndexOutputModel}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsEvaluationIndexOutputModel
     */
    'dataSetVersion'?: NssolPlatypusApiModelsAquariumDataSetApiModelsVersionIndexOutputModel;
}
/**
 * アクアリウム推論のコスト最小出力モデル
 * @export
 * @interface NssolPlatypusApiModelsExperimentApiModelsEvaluationSimpleOutputModel
 */
export interface NssolPlatypusApiModelsExperimentApiModelsEvaluationSimpleOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsEvaluationSimpleOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsEvaluationSimpleOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsEvaluationSimpleOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsEvaluationSimpleOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsEvaluationSimpleOutputModel
     */
    'id'?: number;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsEvaluationSimpleOutputModel
     */
    'name'?: string | null;
}
/**
 * 実験の出力モデル
 * @export
 * @interface NssolPlatypusApiModelsExperimentApiModelsIndexOutputModel
 */
export interface NssolPlatypusApiModelsExperimentApiModelsIndexOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsIndexOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsIndexOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsIndexOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsIndexOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsIndexOutputModel
     */
    'id'?: number;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsIndexOutputModel
     */
    'name'?: string | null;
    /**
     * 開始日時
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsIndexOutputModel
     */
    'startedAt'?: string | null;
    /**
     * 完了日時
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsIndexOutputModel
     */
    'completedAt'?: string | null;
    /**
     * ステータス
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsIndexOutputModel
     */
    'status'?: string | null;
    /**
     * 
     * @type {NssolPlatypusApiModelsAquariumDataSetApiModelsIndexOutputModel}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsIndexOutputModel
     */
    'dataSet'?: NssolPlatypusApiModelsAquariumDataSetApiModelsIndexOutputModel;
    /**
     * 
     * @type {NssolPlatypusApiModelsTemplateApiModelsIndexOutputModel}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsIndexOutputModel
     */
    'template'?: NssolPlatypusApiModelsTemplateApiModelsIndexOutputModel;
}
/**
 * 実験のコスト最小出力モデル
 * @export
 * @interface NssolPlatypusApiModelsExperimentApiModelsSimpleOutputModel
 */
export interface NssolPlatypusApiModelsExperimentApiModelsSimpleOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsSimpleOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsSimpleOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsSimpleOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsSimpleOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsSimpleOutputModel
     */
    'id'?: number;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsExperimentApiModelsSimpleOutputModel
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsGitApiModelsCreateInputModel
 */
export interface NssolPlatypusApiModelsGitApiModelsCreateInputModel {
    /**
     * 識別名
     * @type {string}
     * @memberof NssolPlatypusApiModelsGitApiModelsCreateInputModel
     */
    'name': string;
    /**
     * 
     * @type {NssolPlatypusInfrastructureTypesGitServiceType}
     * @memberof NssolPlatypusApiModelsGitApiModelsCreateInputModel
     */
    'serviceType': NssolPlatypusInfrastructureTypesGitServiceType;
    /**
     * Git API URL
     * @type {string}
     * @memberof NssolPlatypusApiModelsGitApiModelsCreateInputModel
     */
    'apiUrl': string;
    /**
     * GitリポジトリURL
     * @type {string}
     * @memberof NssolPlatypusApiModelsGitApiModelsCreateInputModel
     */
    'repositoryUrl': string;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsGitApiModelsDetailsOutputModel
 */
export interface NssolPlatypusApiModelsGitApiModelsDetailsOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsGitApiModelsDetailsOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsGitApiModelsDetailsOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsGitApiModelsDetailsOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsGitApiModelsDetailsOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * Git ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsGitApiModelsDetailsOutputModel
     */
    'id'?: number;
    /**
     * 識別名
     * @type {string}
     * @memberof NssolPlatypusApiModelsGitApiModelsDetailsOutputModel
     */
    'name'?: string | null;
    /**
     * 
     * @type {NssolPlatypusInfrastructureTypesGitServiceType}
     * @memberof NssolPlatypusApiModelsGitApiModelsDetailsOutputModel
     */
    'serviceType'?: NssolPlatypusInfrastructureTypesGitServiceType;
    /**
     * Gitコマンドでアクセスする際のURL。
     * @type {string}
     * @memberof NssolPlatypusApiModelsGitApiModelsDetailsOutputModel
     */
    'repositoryUrl'?: string | null;
    /**
     * API URL of the git repository.
     * @type {string}
     * @memberof NssolPlatypusApiModelsGitApiModelsDetailsOutputModel
     */
    'apiUrl'?: string | null;
    /**
     * Gitサービス種別名
     * @type {string}
     * @memberof NssolPlatypusApiModelsGitApiModelsDetailsOutputModel
     */
    'serviceTypeName'?: string | null;
    /**
     * 編集不可
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsGitApiModelsDetailsOutputModel
     */
    'isNotEditable'?: boolean;
}
/**
 * テナント情報のうち、Indexで表示する最低情報だけを保持する
 * @export
 * @interface NssolPlatypusApiModelsGitApiModelsIndexOutputModel
 */
export interface NssolPlatypusApiModelsGitApiModelsIndexOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsGitApiModelsIndexOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsGitApiModelsIndexOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsGitApiModelsIndexOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsGitApiModelsIndexOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * Git ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsGitApiModelsIndexOutputModel
     */
    'id'?: number;
    /**
     * 識別名
     * @type {string}
     * @memberof NssolPlatypusApiModelsGitApiModelsIndexOutputModel
     */
    'name'?: string | null;
    /**
     * 
     * @type {NssolPlatypusInfrastructureTypesGitServiceType}
     * @memberof NssolPlatypusApiModelsGitApiModelsIndexOutputModel
     */
    'serviceType'?: NssolPlatypusInfrastructureTypesGitServiceType;
    /**
     * Gitコマンドでアクセスする際のURL。
     * @type {string}
     * @memberof NssolPlatypusApiModelsGitApiModelsIndexOutputModel
     */
    'repositoryUrl'?: string | null;
    /**
     * API URL of the git repository.
     * @type {string}
     * @memberof NssolPlatypusApiModelsGitApiModelsIndexOutputModel
     */
    'apiUrl'?: string | null;
    /**
     * Gitサービス種別名
     * @type {string}
     * @memberof NssolPlatypusApiModelsGitApiModelsIndexOutputModel
     */
    'serviceTypeName'?: string | null;
}
/**
 * 新規推論実行モデル
 * @export
 * @interface NssolPlatypusApiModelsInferenceApiModelsCreateInputModel
 */
export interface NssolPlatypusApiModelsInferenceApiModelsCreateInputModel {
    /**
     * 識別名
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsCreateInputModel
     */
    'name': string;
    /**
     * 
     * @type {NssolPlatypusApiModelsComponentsContainerImageInputModel}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsCreateInputModel
     */
    'containerImage': NssolPlatypusApiModelsComponentsContainerImageInputModel;
    /**
     * データセットID
     * @type {number}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsCreateInputModel
     */
    'dataSetId': number;
    /**
     * 親学習履歴ID
     * @type {Array<number>}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsCreateInputModel
     */
    'parentIds'?: Array<number> | null;
    /**
     * 親推論履歴ID
     * @type {Array<number>}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsCreateInputModel
     */
    'inferenceIds'?: Array<number> | null;
    /**
     * 
     * @type {NssolPlatypusApiModelsComponentsGitCommitInputModel}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsCreateInputModel
     */
    'gitModel': NssolPlatypusApiModelsComponentsGitCommitInputModel;
    /**
     * ジョブ実行コマンド
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsCreateInputModel
     */
    'entryPoint': string;
    /**
     * 追加環境変数
     * @type {{ [key: string]: string; }}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsCreateInputModel
     */
    'options'?: { [key: string]: string; } | null;
    /**
     * CPUコア数
     * @type {number}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsCreateInputModel
     */
    'cpu': number;
    /**
     * メモリ数(GB)
     * @type {number}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsCreateInputModel
     */
    'memory': number;
    /**
     * GPU数
     * @type {number}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsCreateInputModel
     */
    'gpu': number;
    /**
     * パーティション
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsCreateInputModel
     */
    'partition'?: string | null;
    /**
     * 開放ポート番号
     * @type {Array<number>}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsCreateInputModel
     */
    'ports'?: Array<number> | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsCreateInputModel
     */
    'memo'?: string | null;
    /**
     * タグ
     * @type {Array<string>}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsCreateInputModel
     */
    'tags'?: Array<string> | null;
    /**
     * zip圧縮するか否か。  true：zip圧縮する　false：zip圧縮しない
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsCreateInputModel
     */
    'zip'?: boolean;
    /**
     * データセットをローカルコピーするか否か。  true：ローカルコピーする　false：ローカルコピーしない(シンボリックリンクを作成する)
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsCreateInputModel
     */
    'localDataSet'?: boolean;
}
/**
 * 推論履歴の添付ファイル出力モデル
 * @export
 * @interface NssolPlatypusApiModelsInferenceApiModelsFileOutputModel
 */
export interface NssolPlatypusApiModelsInferenceApiModelsFileOutputModel {
    /**
     * 推論履歴ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsFileOutputModel
     */
    'id'?: number;
    /**
     * 添付ファイルID
     * @type {number}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsFileOutputModel
     */
    'fileId'?: number;
    /**
     * ファイル種別キー
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsFileOutputModel
     */
    'key'?: string | null;
    /**
     * ファイルURL
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsFileOutputModel
     */
    'url'?: string | null;
    /**
     * ファイル名
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsFileOutputModel
     */
    'fileName'?: string | null;
    /**
     * ファイルサイズ
     * @type {number}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsFileOutputModel
     */
    'fileSize'?: number;
}
/**
 * 推論履歴の詳細情報モデル
 * @export
 * @interface NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
 */
export interface NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'id'?: number;
    /**
     * 表示用ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'displayId'?: number | null;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'name'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'memo'?: string | null;
    /**
     * ステータス
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'status'?: string | null;
    /**
     * お気に入り
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'favorite'?: boolean;
    /**
     * 表示用
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'fullName'?: string | null;
    /**
     * 
     * @type {NssolPlatypusApiModelsDataSetApiModelsIndexOutputModel}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'dataSet'?: NssolPlatypusApiModelsDataSetApiModelsIndexOutputModel;
    /**
     * ジョブ実行コマンド
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'entryPoint'?: string | null;
    /**
     * 親学習ジョブ名（表示用）
     * @type {Array<string>}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'parentFullNameList'?: Array<string> | null;
    /**
     * 親推論ジョブ名（表示用）
     * @type {Array<string>}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'parentInferenceFullNameList'?: Array<string> | null;
    /**
     * 出力値
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'outputValue'?: string | null;
    /**
     * コンテナ名になる一意識別文字列
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'key'?: string | null;
    /**
     * 
     * @type {NssolPlatypusApiModelsComponentsGitCommitOutputModel}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'gitModel'?: NssolPlatypusApiModelsComponentsGitCommitOutputModel;
    /**
     * オプション。  ViewModelではDictionaryを使わないという規約のため、KVPのリストで返す。
     * @type {Array<SystemCollectionsGenericKeyValuePair2>}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'options'?: Array<SystemCollectionsGenericKeyValuePair2> | null;
    /**
     * 
     * @type {NssolPlatypusApiModelsComponentsContainerImageOutputModel}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'containerImage'?: NssolPlatypusApiModelsComponentsContainerImageOutputModel;
    /**
     * 親学習履歴情報。
     * @type {Array<NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel>}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'parents'?: Array<NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel> | null;
    /**
     * 親推論履歴
     * @type {Array<NssolPlatypusApiModelsInferenceApiModelsInferenceIndexOutputModel>}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'parentInferences'?: Array<NssolPlatypusApiModelsInferenceApiModelsInferenceIndexOutputModel> | null;
    /**
     * 完了日時
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'completedAt'?: string | null;
    /**
     * 開始日時
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'startedAt'?: string | null;
    /**
     * 登録者表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'displayNameCreatedBy'?: string | null;
    /**
     * コンテナが実行されたノード名
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'node'?: string | null;
    /**
     * ログ要約
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'logSummary'?: string | null;
    /**
     * CPUコア数
     * @type {number}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'cpu'?: number;
    /**
     * メモリ容量（GB）
     * @type {number}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'memory'?: number;
    /**
     * GPU数
     * @type {number}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'gpu'?: number;
    /**
     * パーティション
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'partition'?: string | null;
    /**
     * ステータスの種類。  None: 存在しない。  Running: ジョブが正常に実行されている。  Error: ジョブが異常な状態で実行されている。  Closed: ジョブ実行が正常に完了し、実行結果が保存された。  Failed: ジョブ実行が異常終了した。
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'statusType'?: string | null;
    /**
     * コンテナの状態に対する注釈。何か異常が発生している際は注釈が表示される。
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'conditionNote'?: string | null;
    /**
     * zip圧縮するか否か。  true：zip圧縮する　false：zip圧縮しない
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'zip'?: boolean;
    /**
     * データセットをローカルコピーするか否か。  true：ローカルコピーする　false：ローカルコピーしない(シンボリックリンクを作成する)
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel
     */
    'localDataSet'?: boolean;
}
/**
 * 推論履歴のうち、Indexで表示する最低情報だけを保持する
 * @export
 * @interface NssolPlatypusApiModelsInferenceApiModelsInferenceIndexOutputModel
 */
export interface NssolPlatypusApiModelsInferenceApiModelsInferenceIndexOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceIndexOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceIndexOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceIndexOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceIndexOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceIndexOutputModel
     */
    'id'?: number;
    /**
     * 表示用ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceIndexOutputModel
     */
    'displayId'?: number | null;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceIndexOutputModel
     */
    'name'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceIndexOutputModel
     */
    'memo'?: string | null;
    /**
     * ステータス
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceIndexOutputModel
     */
    'status'?: string | null;
    /**
     * お気に入り
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceIndexOutputModel
     */
    'favorite'?: boolean;
    /**
     * 表示用
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceIndexOutputModel
     */
    'fullName'?: string | null;
    /**
     * 
     * @type {NssolPlatypusApiModelsDataSetApiModelsIndexOutputModel}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceIndexOutputModel
     */
    'dataSet'?: NssolPlatypusApiModelsDataSetApiModelsIndexOutputModel;
    /**
     * ジョブ実行コマンド
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceIndexOutputModel
     */
    'entryPoint'?: string | null;
    /**
     * 親学習ジョブ名（表示用）
     * @type {Array<string>}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceIndexOutputModel
     */
    'parentFullNameList'?: Array<string> | null;
    /**
     * 親推論ジョブ名（表示用）
     * @type {Array<string>}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceIndexOutputModel
     */
    'parentInferenceFullNameList'?: Array<string> | null;
    /**
     * 出力値
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceIndexOutputModel
     */
    'outputValue'?: string | null;
}
/**
 * 推論履歴のうち、コスト最小で取得できる情報だけを保持する
 * @export
 * @interface NssolPlatypusApiModelsInferenceApiModelsInferenceSimpleOutputModel
 */
export interface NssolPlatypusApiModelsInferenceApiModelsInferenceSimpleOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceSimpleOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceSimpleOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceSimpleOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceSimpleOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceSimpleOutputModel
     */
    'id'?: number;
    /**
     * 表示用ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceSimpleOutputModel
     */
    'displayId'?: number | null;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceSimpleOutputModel
     */
    'name'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceSimpleOutputModel
     */
    'memo'?: string | null;
    /**
     * ステータス
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceSimpleOutputModel
     */
    'status'?: string | null;
    /**
     * お気に入り
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceSimpleOutputModel
     */
    'favorite'?: boolean;
    /**
     * 表示用
     * @type {string}
     * @memberof NssolPlatypusApiModelsInferenceApiModelsInferenceSimpleOutputModel
     */
    'fullName'?: string | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsMenuApiModelsMenuForAdminOutputModel
 */
export interface NssolPlatypusApiModelsMenuApiModelsMenuForAdminOutputModel {
    /**
     * 
     * @type {NssolPlatypusInfrastructureMenuCode}
     * @memberof NssolPlatypusApiModelsMenuApiModelsMenuForAdminOutputModel
     */
    'id'?: NssolPlatypusInfrastructureMenuCode;
    /**
     * メニュー名
     * @type {string}
     * @memberof NssolPlatypusApiModelsMenuApiModelsMenuForAdminOutputModel
     */
    'name'?: string | null;
    /**
     * 説明
     * @type {string}
     * @memberof NssolPlatypusApiModelsMenuApiModelsMenuForAdminOutputModel
     */
    'description'?: string | null;
    /**
     * 
     * @type {NssolPlatypusInfrastructureTypesMenuType}
     * @memberof NssolPlatypusApiModelsMenuApiModelsMenuForAdminOutputModel
     */
    'menuType'?: NssolPlatypusInfrastructureTypesMenuType;
    /**
     * アクセス可能なロール情報
     * @type {Array<NssolPlatypusApiModelsMenuApiModelsMenuForAdminOutputModelRoleModel>}
     * @memberof NssolPlatypusApiModelsMenuApiModelsMenuForAdminOutputModel
     */
    'roles'?: Array<NssolPlatypusApiModelsMenuApiModelsMenuForAdminOutputModelRoleModel> | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsMenuApiModelsMenuForAdminOutputModelRoleModel
 */
export interface NssolPlatypusApiModelsMenuApiModelsMenuForAdminOutputModelRoleModel {
    /**
     * ロールID
     * @type {number}
     * @memberof NssolPlatypusApiModelsMenuApiModelsMenuForAdminOutputModelRoleModel
     */
    'id'?: number;
    /**
     * ロール表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsMenuApiModelsMenuForAdminOutputModelRoleModel
     */
    'name'?: string | null;
    /**
     * システムロールか
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsMenuApiModelsMenuForAdminOutputModelRoleModel
     */
    'isSystemRole'?: boolean;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsMenuApiModelsMenuForTenantOutputModel
 */
export interface NssolPlatypusApiModelsMenuApiModelsMenuForTenantOutputModel {
    /**
     * 
     * @type {NssolPlatypusInfrastructureMenuCode}
     * @memberof NssolPlatypusApiModelsMenuApiModelsMenuForTenantOutputModel
     */
    'id'?: NssolPlatypusInfrastructureMenuCode;
    /**
     * メニュー名
     * @type {string}
     * @memberof NssolPlatypusApiModelsMenuApiModelsMenuForTenantOutputModel
     */
    'name'?: string | null;
    /**
     * 
     * @type {NssolPlatypusInfrastructureTypesMenuType}
     * @memberof NssolPlatypusApiModelsMenuApiModelsMenuForTenantOutputModel
     */
    'menuType'?: NssolPlatypusInfrastructureTypesMenuType;
    /**
     * 説明
     * @type {string}
     * @memberof NssolPlatypusApiModelsMenuApiModelsMenuForTenantOutputModel
     */
    'description'?: string | null;
    /**
     * アクセス可能なロール情報
     * @type {Array<NssolPlatypusApiModelsMenuApiModelsMenuForTenantOutputModelRoleModel>}
     * @memberof NssolPlatypusApiModelsMenuApiModelsMenuForTenantOutputModel
     */
    'roles'?: Array<NssolPlatypusApiModelsMenuApiModelsMenuForTenantOutputModelRoleModel> | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsMenuApiModelsMenuForTenantOutputModelRoleModel
 */
export interface NssolPlatypusApiModelsMenuApiModelsMenuForTenantOutputModelRoleModel {
    /**
     * ロールID
     * @type {number}
     * @memberof NssolPlatypusApiModelsMenuApiModelsMenuForTenantOutputModelRoleModel
     */
    'id'?: number;
    /**
     * ロール表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsMenuApiModelsMenuForTenantOutputModelRoleModel
     */
    'name'?: string | null;
    /**
     * 編集可能か
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsMenuApiModelsMenuForTenantOutputModelRoleModel
     */
    'editable'?: boolean;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsNodeApiModelsCreateInputModel
 */
export interface NssolPlatypusApiModelsNodeApiModelsCreateInputModel {
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsNodeApiModelsCreateInputModel
     */
    'name': string;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsNodeApiModelsCreateInputModel
     */
    'memo'?: string | null;
    /**
     * パーティション
     * @type {string}
     * @memberof NssolPlatypusApiModelsNodeApiModelsCreateInputModel
     */
    'partition'?: string | null;
    /**
     * 
     * @type {NssolPlatypusInfrastructureNodeAccessLevel}
     * @memberof NssolPlatypusApiModelsNodeApiModelsCreateInputModel
     */
    'accessLevel': NssolPlatypusInfrastructureNodeAccessLevel;
    /**
     * このノードを使用できるテナントのID。  Nssol.Platypus.ApiModels.NodeApiModels.CreateInputModel.AccessLevelがNssol.Platypus.Infrastructure.NodeAccessLevel.Privateの時のみ指定可能。  それ以外の場合は無視される。
     * @type {Array<number>}
     * @memberof NssolPlatypusApiModelsNodeApiModelsCreateInputModel
     */
    'assignedTenantIds'?: Array<number> | null;
    /**
     * TensorBoardコンテナの実行可否
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsNodeApiModelsCreateInputModel
     */
    'tensorBoardEnabled'?: boolean;
    /**
     * Notebookコンテナの実行可否
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsNodeApiModelsCreateInputModel
     */
    'notebookEnabled'?: boolean;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsNodeApiModelsDetailsOutputModel
 */
export interface NssolPlatypusApiModelsNodeApiModelsDetailsOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsNodeApiModelsDetailsOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsNodeApiModelsDetailsOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsNodeApiModelsDetailsOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsNodeApiModelsDetailsOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsNodeApiModelsDetailsOutputModel
     */
    'id'?: number;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsNodeApiModelsDetailsOutputModel
     */
    'name'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsNodeApiModelsDetailsOutputModel
     */
    'memo'?: string | null;
    /**
     * パーティション
     * @type {string}
     * @memberof NssolPlatypusApiModelsNodeApiModelsDetailsOutputModel
     */
    'partition'?: string | null;
    /**
     * 
     * @type {NssolPlatypusInfrastructureNodeAccessLevel}
     * @memberof NssolPlatypusApiModelsNodeApiModelsDetailsOutputModel
     */
    'accessLevel'?: NssolPlatypusInfrastructureNodeAccessLevel;
    /**
     * アクセスレベルの表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsNodeApiModelsDetailsOutputModel
     */
    'accessLevelStr'?: string | null;
    /**
     * TensorBoardコンテナの実行可否
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsNodeApiModelsDetailsOutputModel
     */
    'tensorBoardEnabled'?: boolean;
    /**
     * Notebookコンテナの実行可否
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsNodeApiModelsDetailsOutputModel
     */
    'notebookEnabled'?: boolean;
    /**
     * Nssol.Platypus.ApiModels.NodeApiModels.IndexOutputModel.AccessLevelがNssol.Platypus.Infrastructure.NodeAccessLevel.Privateの時、このノードを使用できるテナントの一覧。
     * @type {Array<NssolPlatypusApiModelsNodeApiModelsDetailsOutputModelAssignedTenant>}
     * @memberof NssolPlatypusApiModelsNodeApiModelsDetailsOutputModel
     */
    'assignedTenants'?: Array<NssolPlatypusApiModelsNodeApiModelsDetailsOutputModelAssignedTenant> | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsNodeApiModelsDetailsOutputModelAssignedTenant
 */
export interface NssolPlatypusApiModelsNodeApiModelsDetailsOutputModelAssignedTenant {
    /**
     * テナントID
     * @type {number}
     * @memberof NssolPlatypusApiModelsNodeApiModelsDetailsOutputModelAssignedTenant
     */
    'id'?: number;
    /**
     * テナント名
     * @type {string}
     * @memberof NssolPlatypusApiModelsNodeApiModelsDetailsOutputModelAssignedTenant
     */
    'name'?: string | null;
    /**
     * テナント表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsNodeApiModelsDetailsOutputModelAssignedTenant
     */
    'displayName'?: string | null;
}
/**
 * ノード情報のうち、Indexで表示する最低情報だけを保持する
 * @export
 * @interface NssolPlatypusApiModelsNodeApiModelsIndexOutputModel
 */
export interface NssolPlatypusApiModelsNodeApiModelsIndexOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsNodeApiModelsIndexOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsNodeApiModelsIndexOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsNodeApiModelsIndexOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsNodeApiModelsIndexOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsNodeApiModelsIndexOutputModel
     */
    'id'?: number;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsNodeApiModelsIndexOutputModel
     */
    'name'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsNodeApiModelsIndexOutputModel
     */
    'memo'?: string | null;
    /**
     * パーティション
     * @type {string}
     * @memberof NssolPlatypusApiModelsNodeApiModelsIndexOutputModel
     */
    'partition'?: string | null;
    /**
     * 
     * @type {NssolPlatypusInfrastructureNodeAccessLevel}
     * @memberof NssolPlatypusApiModelsNodeApiModelsIndexOutputModel
     */
    'accessLevel'?: NssolPlatypusInfrastructureNodeAccessLevel;
    /**
     * アクセスレベルの表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsNodeApiModelsIndexOutputModel
     */
    'accessLevelStr'?: string | null;
    /**
     * TensorBoardコンテナの実行可否
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsNodeApiModelsIndexOutputModel
     */
    'tensorBoardEnabled'?: boolean;
    /**
     * Notebookコンテナの実行可否
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsNodeApiModelsIndexOutputModel
     */
    'notebookEnabled'?: boolean;
}
/**
 * ノートブック新規実行モデル
 * @export
 * @interface NssolPlatypusApiModelsNotebookApiModelsCreateInputModel
 */
export interface NssolPlatypusApiModelsNotebookApiModelsCreateInputModel {
    /**
     * ノートブック名
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsCreateInputModel
     */
    'name': string;
    /**
     * 
     * @type {NssolPlatypusApiModelsComponentsContainerImageInputModel}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsCreateInputModel
     */
    'containerImage'?: NssolPlatypusApiModelsComponentsContainerImageInputModel;
    /**
     * データセットID
     * @type {number}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsCreateInputModel
     */
    'dataSetId'?: number | null;
    /**
     * jupyterLabバージョン情報
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsCreateInputModel
     */
    'jupyterLabVersion'?: string | null;
    /**
     * 親学習履歴ID
     * @type {Array<number>}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsCreateInputModel
     */
    'parentIds'?: Array<number> | null;
    /**
     * 親推論履歴ID
     * @type {Array<number>}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsCreateInputModel
     */
    'inferenceIds'?: Array<number> | null;
    /**
     * 
     * @type {NssolPlatypusApiModelsComponentsGitCommitInputModel}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsCreateInputModel
     */
    'gitModel'?: NssolPlatypusApiModelsComponentsGitCommitInputModel;
    /**
     * 追加環境変数
     * @type {{ [key: string]: string; }}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsCreateInputModel
     */
    'options'?: { [key: string]: string; } | null;
    /**
     * CPUコア数
     * @type {number}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsCreateInputModel
     */
    'cpu': number;
    /**
     * メモリ数(GB)
     * @type {number}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsCreateInputModel
     */
    'memory': number;
    /**
     * GPU数
     * @type {number}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsCreateInputModel
     */
    'gpu': number;
    /**
     * パーティション
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsCreateInputModel
     */
    'partition'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsCreateInputModel
     */
    'memo'?: string | null;
    /**
     * コンテナの生存期間(秒)
     * @type {number}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsCreateInputModel
     */
    'expiresIn': number;
    /**
     * データセットをローカルコピーするか否か。  true：ローカルコピーする　false：ローカルコピーしない(シンボリックリンクを作成する)
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsCreateInputModel
     */
    'localDataSet'?: boolean;
    /**
     * エントリポイント。  ノートブック起動時に実行されるスクリプト。
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsCreateInputModel
     */
    'entryPoint'?: string | null;
}
/**
 * ノートブック履歴の詳細情報モデル
 * @export
 * @interface NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
 */
export interface NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'id'?: number | null;
    /**
     * 表示用ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'displayId'?: number | null;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'name'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'memo'?: string | null;
    /**
     * ステータス
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'status'?: string | null;
    /**
     * お気に入り
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'favorite'?: boolean | null;
    /**
     * 表示用
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'fullName'?: string | null;
    /**
     * 登録者表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'displayNameCreatedBy'?: string | null;
    /**
     * コンテナ名になる一意識別文字列
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'key'?: string | null;
    /**
     * 
     * @type {NssolPlatypusApiModelsDataSetApiModelsIndexOutputModel}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'dataSet'?: NssolPlatypusApiModelsDataSetApiModelsIndexOutputModel;
    /**
     * 親学習履歴
     * @type {Array<NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel>}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'parents'?: Array<NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel> | null;
    /**
     * 親推論履歴
     * @type {Array<NssolPlatypusApiModelsInferenceApiModelsInferenceIndexOutputModel>}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'inferences'?: Array<NssolPlatypusApiModelsInferenceApiModelsInferenceIndexOutputModel> | null;
    /**
     * 
     * @type {NssolPlatypusApiModelsComponentsGitCommitOutputModel}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'gitModel'?: NssolPlatypusApiModelsComponentsGitCommitOutputModel;
    /**
     * オプション。  ViewModelではDictionaryを使わないという規約のため、KVPのリストで返す。
     * @type {Array<SystemCollectionsGenericKeyValuePair2>}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'options'?: Array<SystemCollectionsGenericKeyValuePair2> | null;
    /**
     * 
     * @type {NssolPlatypusApiModelsComponentsContainerImageOutputModel}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'containerImage'?: NssolPlatypusApiModelsComponentsContainerImageOutputModel;
    /**
     * 完了日時
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'completedAt'?: string | null;
    /**
     * 開始日時
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'startedAt'?: string | null;
    /**
     * コンテナが実行されたノード名
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'node'?: string | null;
    /**
     * CPUコア数
     * @type {number}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'cpu'?: number | null;
    /**
     * メモリ容量（GB）
     * @type {number}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'memory'?: number | null;
    /**
     * GPU数
     * @type {number}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'gpu'?: number | null;
    /**
     * パーティション
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'partition'?: string | null;
    /**
     * JupyterLabのバージョン
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'jupyterLabVersion'?: string | null;
    /**
     * ステータスの種類。  None: 存在しない。  Running: ジョブが正常に実行されている。  Error: ジョブが異常な状態で実行されている。  Closed: ジョブ実行が正常に完了し、実行結果が保存された。  Failed: ジョブ実行が異常終了した。
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'statusType'?: string | null;
    /**
     * ノードポート番号
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'notebookNodePort'?: string | null;
    /**
     * トークン
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'notebookToken'?: string | null;
    /**
     * コンテナの状態に対する注釈。何か異常が発生している際は注釈が表示される。
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'conditionNote'?: string | null;
    /**
     * 待機時間  status
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'waitingTime'?: string | null;
    /**
     * 実行時間
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'executionTime'?: string | null;
    /**
     * コンテナの生存期間(秒)
     * @type {number}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'expiresIn'?: number | null;
    /**
     * データセットをローカルコピーするか否か。  true：ローカルコピーする　false：ローカルコピーしない(シンボリックリンクを作成する)
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'localDataSet'?: boolean;
    /**
     * エントリポイント。  ノートブック起動時に実行されるスクリプト。
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel
     */
    'entryPoint'?: string | null;
}
/**
 * ノートブック履歴の編集モデル
 * @export
 * @interface NssolPlatypusApiModelsNotebookApiModelsEditInputModel
 */
export interface NssolPlatypusApiModelsNotebookApiModelsEditInputModel {
    /**
     * ノートブック名
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsEditInputModel
     */
    'name'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsEditInputModel
     */
    'memo'?: string | null;
    /**
     * お気に入り
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsEditInputModel
     */
    'favorite'?: boolean | null;
}
/**
 * ノートブックアクセス用の出力モデル
 * @export
 * @interface NssolPlatypusApiModelsNotebookApiModelsEndPointOutputModel
 */
export interface NssolPlatypusApiModelsNotebookApiModelsEndPointOutputModel {
    /**
     * Notebookのノードポート番号
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsEndPointOutputModel
     */
    'nodePort'?: string | null;
    /**
     * Notebookのアクセストークン
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsEndPointOutputModel
     */
    'token'?: string | null;
}
/**
 * ノートブック履歴のうち、Indexで表示する最低情報だけを保持する
 * @export
 * @interface NssolPlatypusApiModelsNotebookApiModelsIndexOutputModel
 */
export interface NssolPlatypusApiModelsNotebookApiModelsIndexOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsIndexOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsIndexOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsIndexOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsIndexOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsIndexOutputModel
     */
    'id'?: number | null;
    /**
     * 表示用ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsIndexOutputModel
     */
    'displayId'?: number | null;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsIndexOutputModel
     */
    'name'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsIndexOutputModel
     */
    'memo'?: string | null;
    /**
     * ステータス
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsIndexOutputModel
     */
    'status'?: string | null;
    /**
     * お気に入り
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsIndexOutputModel
     */
    'favorite'?: boolean | null;
    /**
     * 表示用
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsIndexOutputModel
     */
    'fullName'?: string | null;
}
/**
 * ノートブック再起動モデル
 * @export
 * @interface NssolPlatypusApiModelsNotebookApiModelsRerunInputModel
 */
export interface NssolPlatypusApiModelsNotebookApiModelsRerunInputModel {
    /**
     * データセットID
     * @type {number}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsRerunInputModel
     */
    'dataSetId'?: number | null;
    /**
     * 親学習履歴ID
     * @type {Array<number>}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsRerunInputModel
     */
    'parentIds'?: Array<number> | null;
    /**
     * 親推論履歴ID
     * @type {Array<number>}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsRerunInputModel
     */
    'inferenceIds'?: Array<number> | null;
    /**
     * 
     * @type {NssolPlatypusApiModelsComponentsContainerImageInputModel}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsRerunInputModel
     */
    'containerImage'?: NssolPlatypusApiModelsComponentsContainerImageInputModel;
    /**
     * 
     * @type {NssolPlatypusApiModelsComponentsGitCommitInputModel}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsRerunInputModel
     */
    'gitModel'?: NssolPlatypusApiModelsComponentsGitCommitInputModel;
    /**
     * 
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsRerunInputModel
     */
    'jupyterLabVersion'?: string | null;
    /**
     * CPUコア数
     * @type {number}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsRerunInputModel
     */
    'cpu': number;
    /**
     * メモリ数(GB)
     * @type {number}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsRerunInputModel
     */
    'memory': number;
    /**
     * GPU数
     * @type {number}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsRerunInputModel
     */
    'gpu': number;
    /**
     * コンテナの生存期間(秒)
     * @type {number}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsRerunInputModel
     */
    'expiresIn': number;
    /**
     * データセットをローカルコピーするか否か。  true：ローカルコピーする　false：ローカルコピーしない(シンボリックリンクを作成する)
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsRerunInputModel
     */
    'localDataSet'?: boolean;
    /**
     * エントリポイント。  ノートブック起動時に実行されるスクリプト。
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsRerunInputModel
     */
    'entryPoint'?: string | null;
}
/**
 * ノートブック履歴のうち、コスト最小で取得できる情報だけを保持する
 * @export
 * @interface NssolPlatypusApiModelsNotebookApiModelsSimpleOutputModel
 */
export interface NssolPlatypusApiModelsNotebookApiModelsSimpleOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsSimpleOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsSimpleOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsSimpleOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsSimpleOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsSimpleOutputModel
     */
    'id'?: number | null;
    /**
     * 表示用ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsSimpleOutputModel
     */
    'displayId'?: number | null;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsSimpleOutputModel
     */
    'name'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsSimpleOutputModel
     */
    'memo'?: string | null;
    /**
     * ステータス
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsSimpleOutputModel
     */
    'status'?: string | null;
    /**
     * お気に入り
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsSimpleOutputModel
     */
    'favorite'?: boolean | null;
    /**
     * 表示用
     * @type {string}
     * @memberof NssolPlatypusApiModelsNotebookApiModelsSimpleOutputModel
     */
    'fullName'?: string | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsPreprocessingApiModelsAddOutputDataInputModel
 */
export interface NssolPlatypusApiModelsPreprocessingApiModelsAddOutputDataInputModel {
    /**
     * 前処理結果のデータ名。  省略した場合は「{元データ名}_{前処理名}」になる。
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsAddOutputDataInputModel
     */
    'name'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsAddOutputDataInputModel
     */
    'memo'?: string | null;
    /**
     * タグ。  省略した場合は「前処理名」一つが付与される。
     * @type {Array<string>}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsAddOutputDataInputModel
     */
    'tags'?: Array<string> | null;
    /**
     * 前処理結果に登録するファイル群
     * @type {Array<NssolPlatypusApiModelsComponentsAddFileInputModel>}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsAddOutputDataInputModel
     */
    'files'?: Array<NssolPlatypusApiModelsComponentsAddFileInputModel> | null;
}
/**
 * 前処理作成の入力モデル
 * @export
 * @interface NssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel
 */
export interface NssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel {
    /**
     * 識別名
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel
     */
    'name': string;
    /**
     * エントリポイント
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel
     */
    'entryPoint'?: string | null;
    /**
     * 
     * @type {NssolPlatypusApiModelsComponentsContainerImageInputModel}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel
     */
    'containerImage'?: NssolPlatypusApiModelsComponentsContainerImageInputModel;
    /**
     * 
     * @type {NssolPlatypusApiModelsComponentsGitCommitNullableInputModel}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel
     */
    'gitModel'?: NssolPlatypusApiModelsComponentsGitCommitNullableInputModel;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel
     */
    'memo'?: string | null;
    /**
     * CPUコア数のデフォルト値
     * @type {number}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel
     */
    'cpu'?: number;
    /**
     * メモリ容量（GB）のデフォルト値
     * @type {number}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel
     */
    'memory'?: number;
    /**
     * GPU数のデフォルト値
     * @type {number}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel
     */
    'gpu'?: number;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsPreprocessingApiModelsDetailsOutputModel
 */
export interface NssolPlatypusApiModelsPreprocessingApiModelsDetailsOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsDetailsOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsDetailsOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsDetailsOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsDetailsOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * 前処理ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsDetailsOutputModel
     */
    'id'?: number;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsDetailsOutputModel
     */
    'name'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsDetailsOutputModel
     */
    'memo'?: string | null;
    /**
     * CPUコア数のデフォルト値
     * @type {number}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsDetailsOutputModel
     */
    'cpu'?: number;
    /**
     * メモリ容量（GB）のデフォルト値
     * @type {number}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsDetailsOutputModel
     */
    'memory'?: number;
    /**
     * GPU数のデフォルト値
     * @type {number}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsDetailsOutputModel
     */
    'gpu'?: number;
    /**
     * 
     * @type {NssolPlatypusApiModelsComponentsGitCommitOutputModel}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsDetailsOutputModel
     */
    'gitModel'?: NssolPlatypusApiModelsComponentsGitCommitOutputModel;
    /**
     * 
     * @type {NssolPlatypusApiModelsComponentsContainerImageOutputModel}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsDetailsOutputModel
     */
    'containerImage'?: NssolPlatypusApiModelsComponentsContainerImageOutputModel;
    /**
     * エントリポイント。
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsDetailsOutputModel
     */
    'entryPoint'?: string | null;
    /**
     * 実行済みか
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsDetailsOutputModel
     */
    'isLocked'?: boolean;
}
/**
 * 前処理編集の入力モデル
 * @export
 * @interface NssolPlatypusApiModelsPreprocessingApiModelsEditInputModel
 */
export interface NssolPlatypusApiModelsPreprocessingApiModelsEditInputModel {
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsEditInputModel
     */
    'name'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsEditInputModel
     */
    'memo'?: string | null;
    /**
     * CPUコア数のデフォルト値
     * @type {number}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsEditInputModel
     */
    'cpu'?: number | null;
    /**
     * メモリ容量（GB）のデフォルト値
     * @type {number}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsEditInputModel
     */
    'memory'?: number | null;
    /**
     * GPU数のデフォルト値
     * @type {number}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsEditInputModel
     */
    'gpu'?: number | null;
}
/**
 * 前処理履歴情報のうち、Indexで表示する最低情報だけを保持する。
 * @export
 * @interface NssolPlatypusApiModelsPreprocessingApiModelsHistoriesOutputModel
 */
export interface NssolPlatypusApiModelsPreprocessingApiModelsHistoriesOutputModel {
    /**
     * コンテナ名になる一意識別文字列
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsHistoriesOutputModel
     */
    'key'?: string | null;
    /**
     * ステータス
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsHistoriesOutputModel
     */
    'status'?: string | null;
    /**
     * ステータスの種類。  None: 存在しない。  Running: ジョブが正常に実行されている。  Error: ジョブが異常な状態で実行されている。  Closed: ジョブ実行が正常に完了し、実行結果が保存された。  Failed: ジョブ実行が異常終了した。
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsHistoriesOutputModel
     */
    'statusType'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsHistoriesOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 元データID
     * @type {number}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsHistoriesOutputModel
     */
    'dataId'?: number;
    /**
     * 元データ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsHistoriesOutputModel
     */
    'dataName'?: string | null;
    /**
     * 前処理ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsHistoriesOutputModel
     */
    'preprocessId'?: number | null;
    /**
     * 前処理名
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsHistoriesOutputModel
     */
    'preprocessName'?: string | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsPreprocessingApiModelsHistoryDetailsOutputModel
 */
export interface NssolPlatypusApiModelsPreprocessingApiModelsHistoryDetailsOutputModel {
    /**
     * コンテナ名になる一意識別文字列
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsHistoryDetailsOutputModel
     */
    'key'?: string | null;
    /**
     * ステータス
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsHistoryDetailsOutputModel
     */
    'status'?: string | null;
    /**
     * ステータスの種類。  None: 存在しない。  Running: ジョブが正常に実行されている。  Error: ジョブが異常な状態で実行されている。  Closed: ジョブ実行が正常に完了し、実行結果が保存された。  Failed: ジョブ実行が異常終了した。
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsHistoryDetailsOutputModel
     */
    'statusType'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsHistoryDetailsOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 元データID
     * @type {number}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsHistoryDetailsOutputModel
     */
    'dataId'?: number;
    /**
     * 元データ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsHistoryDetailsOutputModel
     */
    'dataName'?: string | null;
    /**
     * 前処理ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsHistoryDetailsOutputModel
     */
    'preprocessId'?: number | null;
    /**
     * 前処理名
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsHistoryDetailsOutputModel
     */
    'preprocessName'?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsHistoryDetailsOutputModel
     */
    'outputDataIds'?: Array<number> | null;
}
/**
 * 前処理情報のうち、Indexで表示する最低情報だけを保持する
 * @export
 * @interface NssolPlatypusApiModelsPreprocessingApiModelsIndexOutputModel
 */
export interface NssolPlatypusApiModelsPreprocessingApiModelsIndexOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsIndexOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsIndexOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsIndexOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsIndexOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * 前処理ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsIndexOutputModel
     */
    'id'?: number;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsIndexOutputModel
     */
    'name'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsIndexOutputModel
     */
    'memo'?: string | null;
    /**
     * CPUコア数のデフォルト値
     * @type {number}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsIndexOutputModel
     */
    'cpu'?: number;
    /**
     * メモリ容量（GB）のデフォルト値
     * @type {number}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsIndexOutputModel
     */
    'memory'?: number;
    /**
     * GPU数のデフォルト値
     * @type {number}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsIndexOutputModel
     */
    'gpu'?: number;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsPreprocessingApiModelsPreprocessAttachedFileOutputModel
 */
export interface NssolPlatypusApiModelsPreprocessingApiModelsPreprocessAttachedFileOutputModel {
    /**
     * 前処理履歴ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsPreprocessAttachedFileOutputModel
     */
    'id'?: number;
    /**
     * 添付ファイルID
     * @type {number}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsPreprocessAttachedFileOutputModel
     */
    'fileId'?: number;
    /**
     * ファイルURL
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsPreprocessAttachedFileOutputModel
     */
    'url'?: string | null;
    /**
     * ファイル名
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsPreprocessAttachedFileOutputModel
     */
    'fileName'?: string | null;
    /**
     * 削除可能か
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsPreprocessAttachedFileOutputModel
     */
    'isLocked'?: boolean;
}
/**
 * 前処理履歴の実行入力モデル
 * @export
 * @interface NssolPlatypusApiModelsPreprocessingApiModelsRunPreprocessHistoryInputModel
 */
export interface NssolPlatypusApiModelsPreprocessingApiModelsRunPreprocessHistoryInputModel {
    /**
     * 元データID
     * @type {number}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsRunPreprocessHistoryInputModel
     */
    'dataId': number;
    /**
     * 追加環境変数
     * @type {{ [key: string]: string; }}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsRunPreprocessHistoryInputModel
     */
    'options'?: { [key: string]: string; } | null;
    /**
     * CPUコア数
     * @type {number}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsRunPreprocessHistoryInputModel
     */
    'cpu': number;
    /**
     * メモリ数(GB)
     * @type {number}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsRunPreprocessHistoryInputModel
     */
    'memory': number;
    /**
     * GPU数
     * @type {number}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsRunPreprocessHistoryInputModel
     */
    'gpu': number;
    /**
     * パーティション
     * @type {string}
     * @memberof NssolPlatypusApiModelsPreprocessingApiModelsRunPreprocessHistoryInputModel
     */
    'partition'?: string | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsRegistryApiModelsCreateInputModel
 */
export interface NssolPlatypusApiModelsRegistryApiModelsCreateInputModel {
    /**
     * Registry識別名
     * @type {string}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsCreateInputModel
     */
    'name': string;
    /**
     * Registryホストサーバ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsCreateInputModel
     */
    'host': string;
    /**
     * Registryホストサーバポート
     * @type {number}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsCreateInputModel
     */
    'portNo': number;
    /**
     * 
     * @type {NssolPlatypusInfrastructureTypesRegistryServiceType}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsCreateInputModel
     */
    'serviceType': NssolPlatypusInfrastructureTypesRegistryServiceType;
    /**
     * Registryのプロジェクト名。  Nssol.Platypus.ApiModels.RegistryApiModels.CreateInputModel.ServiceTypeがNssol.Platypus.Infrastructure.Types.RegistryServiceType.GitLabの場合に必要。
     * @type {string}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsCreateInputModel
     */
    'projectName'?: string | null;
    /**
     * Registry API URL
     * @type {string}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsCreateInputModel
     */
    'apiUrl': string;
    /**
     * Registry Url
     * @type {string}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsCreateInputModel
     */
    'registryUrl': string;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsRegistryApiModelsDetailsOutputModel
 */
export interface NssolPlatypusApiModelsRegistryApiModelsDetailsOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsDetailsOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsDetailsOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsDetailsOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsDetailsOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * Regisry ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsDetailsOutputModel
     */
    'id'?: number;
    /**
     * Regisry識別名
     * @type {string}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsDetailsOutputModel
     */
    'name'?: string | null;
    /**
     * レジストリパス。
     * @type {string}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsDetailsOutputModel
     */
    'registryPath'?: string | null;
    /**
     * レジストリアクセスユーザ
     * @type {string}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsDetailsOutputModel
     */
    'projectName'?: string | null;
    /**
     * 
     * @type {NssolPlatypusInfrastructureTypesRegistryServiceType}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsDetailsOutputModel
     */
    'serviceType'?: NssolPlatypusInfrastructureTypesRegistryServiceType;
    /**
     * Registryホストサーバ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsDetailsOutputModel
     */
    'host'?: string | null;
    /**
     * Registryホストサーバポート
     * @type {number}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsDetailsOutputModel
     */
    'portNo'?: number;
    /**
     * Registry API URL
     * @type {string}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsDetailsOutputModel
     */
    'apiUrl'?: string | null;
    /**
     * Registry Url
     * @type {string}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsDetailsOutputModel
     */
    'registryUrl'?: string | null;
    /**
     * 編集不可
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsDetailsOutputModel
     */
    'isNotEditable'?: boolean;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsRegistryApiModelsIndexOutputModel
 */
export interface NssolPlatypusApiModelsRegistryApiModelsIndexOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsIndexOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsIndexOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsIndexOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsIndexOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * Regisry ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsIndexOutputModel
     */
    'id'?: number;
    /**
     * Regisry識別名
     * @type {string}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsIndexOutputModel
     */
    'name'?: string | null;
    /**
     * レジストリパス。
     * @type {string}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsIndexOutputModel
     */
    'registryPath'?: string | null;
    /**
     * レジストリアクセスユーザ
     * @type {string}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsIndexOutputModel
     */
    'projectName'?: string | null;
    /**
     * 
     * @type {NssolPlatypusInfrastructureTypesRegistryServiceType}
     * @memberof NssolPlatypusApiModelsRegistryApiModelsIndexOutputModel
     */
    'serviceType'?: NssolPlatypusInfrastructureTypesRegistryServiceType;
}
/**
 * テナントごとのコンテナ詳細の出力モデル
 * @export
 * @interface NssolPlatypusApiModelsResourceApiModelsContainerDetailsForTenantOutputModel
 */
export interface NssolPlatypusApiModelsResourceApiModelsContainerDetailsForTenantOutputModel {
    /**
     * コンテナ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsContainerDetailsForTenantOutputModel
     */
    'name'?: string | null;
    /**
     * 実行者
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsContainerDetailsForTenantOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 実行者表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsContainerDetailsForTenantOutputModel
     */
    'displayNameCreatedBy'?: string | null;
    /**
     * 
     * @type {NssolPlatypusInfrastructureTypesContainerType}
     * @memberof NssolPlatypusApiModelsResourceApiModelsContainerDetailsForTenantOutputModel
     */
    'containerType'?: NssolPlatypusInfrastructureTypesContainerType;
    /**
     * コンテナの状態に対する注釈。何か異常が発生している際は注釈が表示される。
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsContainerDetailsForTenantOutputModel
     */
    'conditionNote'?: string | null;
    /**
     * CPUコア数
     * @type {number}
     * @memberof NssolPlatypusApiModelsResourceApiModelsContainerDetailsForTenantOutputModel
     */
    'cpu'?: number;
    /**
     * メモリ容量（GB）
     * @type {number}
     * @memberof NssolPlatypusApiModelsResourceApiModelsContainerDetailsForTenantOutputModel
     */
    'memory'?: number;
    /**
     * GPU数
     * @type {number}
     * @memberof NssolPlatypusApiModelsResourceApiModelsContainerDetailsForTenantOutputModel
     */
    'gpu'?: number;
    /**
     * ステータス種別
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsContainerDetailsForTenantOutputModel
     */
    'statusType'?: string | null;
    /**
     * ステータス
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsContainerDetailsForTenantOutputModel
     */
    'status'?: string | null;
    /**
     * ノード名
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsContainerDetailsForTenantOutputModel
     */
    'nodeName'?: string | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsResourceApiModelsContainerDetailsOutputModel
 */
export interface NssolPlatypusApiModelsResourceApiModelsContainerDetailsOutputModel {
    /**
     * コンテナ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsContainerDetailsOutputModel
     */
    'name'?: string | null;
    /**
     * 実行者
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsContainerDetailsOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 
     * @type {NssolPlatypusInfrastructureTypesContainerType}
     * @memberof NssolPlatypusApiModelsResourceApiModelsContainerDetailsOutputModel
     */
    'containerType'?: NssolPlatypusInfrastructureTypesContainerType;
    /**
     * コンテナの状態に対する注釈。何か異常が発生している際は注釈が表示される。
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsContainerDetailsOutputModel
     */
    'conditionNote'?: string | null;
    /**
     * CPUコア数
     * @type {number}
     * @memberof NssolPlatypusApiModelsResourceApiModelsContainerDetailsOutputModel
     */
    'cpu'?: number;
    /**
     * メモリ容量（GB）
     * @type {number}
     * @memberof NssolPlatypusApiModelsResourceApiModelsContainerDetailsOutputModel
     */
    'memory'?: number;
    /**
     * GPU数
     * @type {number}
     * @memberof NssolPlatypusApiModelsResourceApiModelsContainerDetailsOutputModel
     */
    'gpu'?: number;
    /**
     * ステータス種別
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsContainerDetailsOutputModel
     */
    'statusType'?: string | null;
    /**
     * ステータス
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsContainerDetailsOutputModel
     */
    'status'?: string | null;
    /**
     * ノード名
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsContainerDetailsOutputModel
     */
    'nodeName'?: string | null;
    /**
     * テナントID
     * @type {number}
     * @memberof NssolPlatypusApiModelsResourceApiModelsContainerDetailsOutputModel
     */
    'tenantId'?: number;
    /**
     * テナント名
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsContainerDetailsOutputModel
     */
    'tenantName'?: string | null;
    /**
     * 表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsContainerDetailsOutputModel
     */
    'displayName'?: string | null;
    /**
     * 登録者表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsContainerDetailsOutputModel
     */
    'displayNameCreatedBy'?: string | null;
}
/**
 * 履歴削除の入力モデル
 * @export
 * @interface NssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel
 */
export interface NssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel {
    /**
     * 削除される範囲の終了日
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel
     */
    'endDate'?: string | null;
}
/**
 * 履歴メタデータの出力モデル
 * @export
 * @interface NssolPlatypusApiModelsResourceApiModelsHistoryMetadataOutputModel
 */
export interface NssolPlatypusApiModelsResourceApiModelsHistoryMetadataOutputModel {
    /**
     * 件数
     * @type {number}
     * @memberof NssolPlatypusApiModelsResourceApiModelsHistoryMetadataOutputModel
     */
    'count'?: number;
    /**
     * 開始日
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsHistoryMetadataOutputModel
     */
    'startDate'?: string | null;
    /**
     * 終了日
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsHistoryMetadataOutputModel
     */
    'endDate'?: string | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsResourceApiModelsNodeResourceOutputModel
 */
export interface NssolPlatypusApiModelsResourceApiModelsNodeResourceOutputModel {
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsNodeResourceOutputModel
     */
    'name'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsNodeResourceOutputModel
     */
    'memo'?: string | null;
    /**
     * パーティション
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsNodeResourceOutputModel
     */
    'partition'?: string | null;
    /**
     * 
     * @type {NssolPlatypusInfrastructureNodeAccessLevel}
     * @memberof NssolPlatypusApiModelsResourceApiModelsNodeResourceOutputModel
     */
    'accessLevel'?: NssolPlatypusInfrastructureNodeAccessLevel;
    /**
     * TensorBoardの実行可否設定
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsResourceApiModelsNodeResourceOutputModel
     */
    'tensorBoardEnabled'?: boolean;
    /**
     * 割り当て可能なCpu
     * @type {number}
     * @memberof NssolPlatypusApiModelsResourceApiModelsNodeResourceOutputModel
     */
    'allocatableCpu'?: number;
    /**
     * 割り当て可能なメモリ(単位：GB)
     * @type {number}
     * @memberof NssolPlatypusApiModelsResourceApiModelsNodeResourceOutputModel
     */
    'allocatableMemory'?: number;
    /**
     * 割り当て可能なGPU
     * @type {number}
     * @memberof NssolPlatypusApiModelsResourceApiModelsNodeResourceOutputModel
     */
    'allocatableGpu'?: number;
    /**
     * 割り当て済みCpu
     * @type {number}
     * @memberof NssolPlatypusApiModelsResourceApiModelsNodeResourceOutputModel
     */
    'assignedCpu'?: number;
    /**
     * 割り当て済みメモリ(単位：GB)
     * @type {number}
     * @memberof NssolPlatypusApiModelsResourceApiModelsNodeResourceOutputModel
     */
    'assignedMemory'?: number;
    /**
     * 割り当て済みGPU
     * @type {number}
     * @memberof NssolPlatypusApiModelsResourceApiModelsNodeResourceOutputModel
     */
    'assignedGpu'?: number;
    /**
     * Cpu情報取得
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsNodeResourceOutputModel
     */
    'cpuInfo'?: string | null;
    /**
     * メモリ情報取得
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsNodeResourceOutputModel
     */
    'memoryInfo'?: string | null;
    /**
     * Gpu情報取得
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsNodeResourceOutputModel
     */
    'gpuInfo'?: string | null;
    /**
     * コンテナリソースのリスト
     * @type {Array<NssolPlatypusApiModelsResourceApiModelsContainerDetailsOutputModel>}
     * @memberof NssolPlatypusApiModelsResourceApiModelsNodeResourceOutputModel
     */
    'containerResourceList'?: Array<NssolPlatypusApiModelsResourceApiModelsContainerDetailsOutputModel> | null;
}
/**
 * テナント単位のリソース情報出力モデル
 * @export
 * @interface NssolPlatypusApiModelsResourceApiModelsTenantResourceOutputModel
 */
export interface NssolPlatypusApiModelsResourceApiModelsTenantResourceOutputModel {
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsResourceApiModelsTenantResourceOutputModel
     */
    'id'?: number;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsTenantResourceOutputModel
     */
    'name'?: string | null;
    /**
     * テナント表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsTenantResourceOutputModel
     */
    'displayName'?: string | null;
    /**
     * 割り当て可能なCpu
     * @type {number}
     * @memberof NssolPlatypusApiModelsResourceApiModelsTenantResourceOutputModel
     */
    'allocatableCpu'?: number;
    /**
     * 割り当て可能なメモリ(単位：GB)
     * @type {number}
     * @memberof NssolPlatypusApiModelsResourceApiModelsTenantResourceOutputModel
     */
    'allocatableMemory'?: number;
    /**
     * 割り当て可能なGPU
     * @type {number}
     * @memberof NssolPlatypusApiModelsResourceApiModelsTenantResourceOutputModel
     */
    'allocatableGpu'?: number;
    /**
     * 割り当て済みCpu
     * @type {number}
     * @memberof NssolPlatypusApiModelsResourceApiModelsTenantResourceOutputModel
     */
    'assignedCpu'?: number;
    /**
     * 割り当て済みメモリ(単位：GB)
     * @type {number}
     * @memberof NssolPlatypusApiModelsResourceApiModelsTenantResourceOutputModel
     */
    'assignedMemory'?: number;
    /**
     * 割り当て済みGPU
     * @type {number}
     * @memberof NssolPlatypusApiModelsResourceApiModelsTenantResourceOutputModel
     */
    'assignedGpu'?: number;
    /**
     * Cpu情報取得
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsTenantResourceOutputModel
     */
    'cpuInfo'?: string | null;
    /**
     * メモリ情報取得
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsTenantResourceOutputModel
     */
    'memoryInfo'?: string | null;
    /**
     * Gpu情報取得
     * @type {string}
     * @memberof NssolPlatypusApiModelsResourceApiModelsTenantResourceOutputModel
     */
    'gpuInfo'?: string | null;
    /**
     * コンテナリソースのリスト
     * @type {Array<NssolPlatypusApiModelsResourceApiModelsContainerDetailsOutputModel>}
     * @memberof NssolPlatypusApiModelsResourceApiModelsTenantResourceOutputModel
     */
    'containerResourceList'?: Array<NssolPlatypusApiModelsResourceApiModelsContainerDetailsOutputModel> | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsRoleApiModelsCreateForTenantInputModel
 */
export interface NssolPlatypusApiModelsRoleApiModelsCreateForTenantInputModel {
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsRoleApiModelsCreateForTenantInputModel
     */
    'name': string;
    /**
     * 表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsRoleApiModelsCreateForTenantInputModel
     */
    'displayName': string;
    /**
     * 並び順。小さいほど前に表示される。一意性は不要。
     * @type {number}
     * @memberof NssolPlatypusApiModelsRoleApiModelsCreateForTenantInputModel
     */
    'sortOrder': number;
}
/**
 * テナント用ロールでも設定可能な項目はNssol.Platypus.ApiModels.RoleApiModels.CreateForTenantInputModelで管理。  Adminのみが設定可能な項目（テナント用ロールでは自動設定される項目）のみ、このクラスで管理。
 * @export
 * @interface NssolPlatypusApiModelsRoleApiModelsCreateInputModel
 */
export interface NssolPlatypusApiModelsRoleApiModelsCreateInputModel {
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsRoleApiModelsCreateInputModel
     */
    'name': string;
    /**
     * 表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsRoleApiModelsCreateInputModel
     */
    'displayName': string;
    /**
     * 並び順。小さいほど前に表示される。一意性は不要。
     * @type {number}
     * @memberof NssolPlatypusApiModelsRoleApiModelsCreateInputModel
     */
    'sortOrder': number;
    /**
     * 管理者用ロールか
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsRoleApiModelsCreateInputModel
     */
    'isSystemRole'?: boolean;
    /**
     * 紐づけられているテナントID。
     * @type {number}
     * @memberof NssolPlatypusApiModelsRoleApiModelsCreateInputModel
     */
    'tenantId'?: number | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsRoleApiModelsDetailsOutputModel
 */
export interface NssolPlatypusApiModelsRoleApiModelsDetailsOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsRoleApiModelsDetailsOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsRoleApiModelsDetailsOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsRoleApiModelsDetailsOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsRoleApiModelsDetailsOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsRoleApiModelsDetailsOutputModel
     */
    'id'?: number;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsRoleApiModelsDetailsOutputModel
     */
    'name'?: string | null;
    /**
     * 表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsRoleApiModelsDetailsOutputModel
     */
    'displayName'?: string | null;
    /**
     * 管理者用ロールか
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsRoleApiModelsDetailsOutputModel
     */
    'isSystemRole'?: boolean;
    /**
     * 紐づけられているテナントID。
     * @type {number}
     * @memberof NssolPlatypusApiModelsRoleApiModelsDetailsOutputModel
     */
    'tenantId'?: number | null;
    /**
     * 並び順
     * @type {number}
     * @memberof NssolPlatypusApiModelsRoleApiModelsDetailsOutputModel
     */
    'sortOrder'?: number;
    /**
     * 紐づけられているテナント名
     * @type {string}
     * @memberof NssolPlatypusApiModelsRoleApiModelsDetailsOutputModel
     */
    'tenantName'?: string | null;
    /**
     * 編集不可
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsRoleApiModelsDetailsOutputModel
     */
    'isNotEditable'?: boolean;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsRoleApiModelsEditForTenantInputModel
 */
export interface NssolPlatypusApiModelsRoleApiModelsEditForTenantInputModel {
    /**
     * ロール名
     * @type {string}
     * @memberof NssolPlatypusApiModelsRoleApiModelsEditForTenantInputModel
     */
    'name': string;
    /**
     * 表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsRoleApiModelsEditForTenantInputModel
     */
    'displayName': string;
    /**
     * 並び順。小さいほど前に表示される。一意性は不要。
     * @type {number}
     * @memberof NssolPlatypusApiModelsRoleApiModelsEditForTenantInputModel
     */
    'sortOrder': number;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsRoleApiModelsEditInputModel
 */
export interface NssolPlatypusApiModelsRoleApiModelsEditInputModel {
    /**
     * ロール名
     * @type {string}
     * @memberof NssolPlatypusApiModelsRoleApiModelsEditInputModel
     */
    'name': string;
    /**
     * 表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsRoleApiModelsEditInputModel
     */
    'displayName': string;
    /**
     * 並び順。小さいほど前に表示される。一意性は不要。
     * @type {number}
     * @memberof NssolPlatypusApiModelsRoleApiModelsEditInputModel
     */
    'sortOrder': number;
    /**
     * 管理者用ロールか
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsRoleApiModelsEditInputModel
     */
    'isSystemRole'?: boolean;
    /**
     * 紐づけられているテナントID。
     * @type {number}
     * @memberof NssolPlatypusApiModelsRoleApiModelsEditInputModel
     */
    'tenantId'?: number | null;
}
/**
 * ノード情報のうち、Indexで表示する最低情報だけを保持する
 * @export
 * @interface NssolPlatypusApiModelsRoleApiModelsIndexOutputModel
 */
export interface NssolPlatypusApiModelsRoleApiModelsIndexOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsRoleApiModelsIndexOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsRoleApiModelsIndexOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsRoleApiModelsIndexOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsRoleApiModelsIndexOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsRoleApiModelsIndexOutputModel
     */
    'id'?: number;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsRoleApiModelsIndexOutputModel
     */
    'name'?: string | null;
    /**
     * 表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsRoleApiModelsIndexOutputModel
     */
    'displayName'?: string | null;
    /**
     * 管理者用ロールか
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsRoleApiModelsIndexOutputModel
     */
    'isSystemRole'?: boolean;
    /**
     * 紐づけられているテナントID。
     * @type {number}
     * @memberof NssolPlatypusApiModelsRoleApiModelsIndexOutputModel
     */
    'tenantId'?: number | null;
    /**
     * 並び順
     * @type {number}
     * @memberof NssolPlatypusApiModelsRoleApiModelsIndexOutputModel
     */
    'sortOrder'?: number;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsStorageApiModelsCreateInputModel
 */
export interface NssolPlatypusApiModelsStorageApiModelsCreateInputModel {
    /**
     * 識別名
     * @type {string}
     * @memberof NssolPlatypusApiModelsStorageApiModelsCreateInputModel
     */
    'name': string;
    /**
     * オブジェクトストレージのサーバ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsStorageApiModelsCreateInputModel
     */
    'serverUrl': string;
    /**
     * オブジェクトストレージのアクセスキー
     * @type {string}
     * @memberof NssolPlatypusApiModelsStorageApiModelsCreateInputModel
     */
    'accessKey': string;
    /**
     * オブジェクトストレージのシークレットキー
     * @type {string}
     * @memberof NssolPlatypusApiModelsStorageApiModelsCreateInputModel
     */
    'secretKey': string;
    /**
     * NFSサーバホスト名。
     * @type {string}
     * @memberof NssolPlatypusApiModelsStorageApiModelsCreateInputModel
     */
    'nfsServer': string;
    /**
     * NFSサーバ本体の共有ディレクトリパス  実際にマウントする際はこの配下のテナント名ディレクトリをマウントする
     * @type {string}
     * @memberof NssolPlatypusApiModelsStorageApiModelsCreateInputModel
     */
    'nfsRoot': string;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsStorageApiModelsDetailsOutputModel
 */
export interface NssolPlatypusApiModelsStorageApiModelsDetailsOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsStorageApiModelsDetailsOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsStorageApiModelsDetailsOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsStorageApiModelsDetailsOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsStorageApiModelsDetailsOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * Git ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsStorageApiModelsDetailsOutputModel
     */
    'id'?: number;
    /**
     * 識別名
     * @type {string}
     * @memberof NssolPlatypusApiModelsStorageApiModelsDetailsOutputModel
     */
    'name'?: string | null;
    /**
     * オブジェクトストレージのサーバURL
     * @type {string}
     * @memberof NssolPlatypusApiModelsStorageApiModelsDetailsOutputModel
     */
    'serverUrl'?: string | null;
    /**
     * NFSサーバホスト名。
     * @type {string}
     * @memberof NssolPlatypusApiModelsStorageApiModelsDetailsOutputModel
     */
    'nfsServer'?: string | null;
    /**
     * NFSサーバ本体の共有ディレクトリパス  実際にマウントする際はこの配下のテナント名ディレクトリをマウントする
     * @type {string}
     * @memberof NssolPlatypusApiModelsStorageApiModelsDetailsOutputModel
     */
    'nfsRoot'?: string | null;
    /**
     * オブジェクトストレージのアクセスキー
     * @type {string}
     * @memberof NssolPlatypusApiModelsStorageApiModelsDetailsOutputModel
     */
    'accessKey'?: string | null;
    /**
     * オブジェクトストレージのシークレットキー
     * @type {string}
     * @memberof NssolPlatypusApiModelsStorageApiModelsDetailsOutputModel
     */
    'secretKey'?: string | null;
}
/**
 * テナント情報のうち、Indexで表示する最低情報だけを保持する
 * @export
 * @interface NssolPlatypusApiModelsStorageApiModelsIndexOutputModel
 */
export interface NssolPlatypusApiModelsStorageApiModelsIndexOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsStorageApiModelsIndexOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsStorageApiModelsIndexOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsStorageApiModelsIndexOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsStorageApiModelsIndexOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * Git ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsStorageApiModelsIndexOutputModel
     */
    'id'?: number;
    /**
     * 識別名
     * @type {string}
     * @memberof NssolPlatypusApiModelsStorageApiModelsIndexOutputModel
     */
    'name'?: string | null;
    /**
     * オブジェクトストレージのサーバURL
     * @type {string}
     * @memberof NssolPlatypusApiModelsStorageApiModelsIndexOutputModel
     */
    'serverUrl'?: string | null;
    /**
     * NFSサーバホスト名。
     * @type {string}
     * @memberof NssolPlatypusApiModelsStorageApiModelsIndexOutputModel
     */
    'nfsServer'?: string | null;
    /**
     * NFSサーバ本体の共有ディレクトリパス  実際にマウントする際はこの配下のテナント名ディレクトリをマウントする
     * @type {string}
     * @memberof NssolPlatypusApiModelsStorageApiModelsIndexOutputModel
     */
    'nfsRoot'?: string | null;
}
/**
 * コンテナ情報の入力モデル
 * @export
 * @interface NssolPlatypusApiModelsTemplateApiModelsContainerImageInputModel
 */
export interface NssolPlatypusApiModelsTemplateApiModelsContainerImageInputModel {
    /**
     * レジストリID。  未指定の場合はテナントのデフォルトが使用される。
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsContainerImageInputModel
     */
    'registryId'?: number | null;
    /**
     * イメージ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsContainerImageInputModel
     */
    'image': string;
    /**
     * タグ（バージョン）名
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsContainerImageInputModel
     */
    'tag': string;
    /**
     * レジストリトークン
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsContainerImageInputModel
     */
    'token'?: string | null;
}
/**
 * コンテナ情報の出力モデル
 * @export
 * @interface NssolPlatypusApiModelsTemplateApiModelsContainerImageOutputModel
 */
export interface NssolPlatypusApiModelsTemplateApiModelsContainerImageOutputModel {
    /**
     * レジストリID。  未指定の場合はテナントのデフォルトが使用される。
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsContainerImageOutputModel
     */
    'registryId'?: number | null;
    /**
     * イメージ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsContainerImageOutputModel
     */
    'image': string;
    /**
     * タグ（バージョン）名
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsContainerImageOutputModel
     */
    'tag': string;
    /**
     * レジストリ名。
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsContainerImageOutputModel
     */
    'registryName'?: string | null;
    /**
     * {リポジトリ名}/{イメージ名}:{タグ名}
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsContainerImageOutputModel
     */
    'url'?: string | null;
    /**
     * レジストリトークン
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsContainerImageOutputModel
     */
    'token'?: string | null;
}
/**
 * テンプレート作成の入力モデル
 * @export
 * @interface NssolPlatypusApiModelsTemplateApiModelsCreateInputModel
 */
export interface NssolPlatypusApiModelsTemplateApiModelsCreateInputModel {
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsCreateInputModel
     */
    'name': string;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsCreateInputModel
     */
    'memo'?: string | null;
    /**
     * 
     * @type {NssolPlatypusInfrastructureTemplateAccessLevel}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsCreateInputModel
     */
    'accessLevel'?: NssolPlatypusInfrastructureTemplateAccessLevel;
}
/**
 * テンプレート編集の入力モデル
 * @export
 * @interface NssolPlatypusApiModelsTemplateApiModelsEditInputModel
 */
export interface NssolPlatypusApiModelsTemplateApiModelsEditInputModel {
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsEditInputModel
     */
    'name'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsEditInputModel
     */
    'memo'?: string | null;
    /**
     * 
     * @type {NssolPlatypusInfrastructureTemplateAccessLevel}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsEditInputModel
     */
    'accessLevel'?: NssolPlatypusInfrastructureTemplateAccessLevel;
}
/**
 * Git情報の入力モデル
 * @export
 * @interface NssolPlatypusApiModelsTemplateApiModelsGitCommitNullableInputModel
 */
export interface NssolPlatypusApiModelsTemplateApiModelsGitCommitNullableInputModel {
    /**
     * Git ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsGitCommitNullableInputModel
     */
    'gitId'?: number | null;
    /**
     * リポジトリ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsGitCommitNullableInputModel
     */
    'repository'?: string | null;
    /**
     * リポジトリのオーナー名
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsGitCommitNullableInputModel
     */
    'owner'?: string | null;
    /**
     * ブランチ名。指定しない場合はmasterになる。  Nssol.Platypus.ApiModels.Components.GitCommitNullableInputModel.CommitIdを指定した場合は無視される。
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsGitCommitNullableInputModel
     */
    'branch'?: string | null;
    /**
     * コミットID。指定しない場合はNssol.Platypus.ApiModels.Components.GitCommitNullableInputModel.BranchのHEADコミットになる。
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsGitCommitNullableInputModel
     */
    'commitId'?: string | null;
    /**
     * Gitトークン
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsGitCommitNullableInputModel
     */
    'token'?: string | null;
}
/**
 * Git情報の出力モデル
 * @export
 * @interface NssolPlatypusApiModelsTemplateApiModelsGitCommitOutputModel
 */
export interface NssolPlatypusApiModelsTemplateApiModelsGitCommitOutputModel {
    /**
     * Git ID。  未指定の場合はテナントのデフォルトが使用される。
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsGitCommitOutputModel
     */
    'gitId'?: number | null;
    /**
     * リポジトリ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsGitCommitOutputModel
     */
    'repository': string;
    /**
     * リポジトリのオーナー名
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsGitCommitOutputModel
     */
    'owner': string;
    /**
     * ブランチ名。指定しない場合はmasterになる。  Nssol.Platypus.ApiModels.Components.GitCommitInputModel.CommitIdを指定した場合は無視される。
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsGitCommitOutputModel
     */
    'branch'?: string | null;
    /**
     * コミットID。指定しない場合はNssol.Platypus.ApiModels.Components.GitCommitInputModel.BranchのHEADコミットになる。
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsGitCommitOutputModel
     */
    'commitId'?: string | null;
    /**
     * GitサービスのWebUI URL
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsGitCommitOutputModel
     */
    'url'?: string | null;
    /**
     * Gitトークン
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsGitCommitOutputModel
     */
    'token'?: string | null;
}
/**
 * テンプレートの出力モデル
 * @export
 * @interface NssolPlatypusApiModelsTemplateApiModelsIndexOutputModel
 */
export interface NssolPlatypusApiModelsTemplateApiModelsIndexOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsIndexOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsIndexOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsIndexOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsIndexOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsIndexOutputModel
     */
    'id'?: number;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsIndexOutputModel
     */
    'name'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsIndexOutputModel
     */
    'memo'?: string | null;
    /**
     * 最新バージョン番号
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsIndexOutputModel
     */
    'latestVersion'?: number;
    /**
     * 
     * @type {NssolPlatypusInfrastructureTemplateAccessLevel}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsIndexOutputModel
     */
    'accessLevel'?: NssolPlatypusInfrastructureTemplateAccessLevel;
    /**
     * テンプレート作成者ユーザID
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsIndexOutputModel
     */
    'createrUserId'?: number;
    /**
     * テンプレート作成者テナントID
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsIndexOutputModel
     */
    'createrTenantId'?: number;
}
/**
 * テンプレートバージョン作成の入力モデル
 * @export
 * @interface NssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel
 */
export interface NssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel {
    /**
     * エントリポイント
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel
     */
    'preprocessEntryPoint'?: string | null;
    /**
     * 
     * @type {NssolPlatypusApiModelsTemplateApiModelsContainerImageInputModel}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel
     */
    'preprocessContainerImage'?: NssolPlatypusApiModelsTemplateApiModelsContainerImageInputModel;
    /**
     * 
     * @type {NssolPlatypusApiModelsTemplateApiModelsGitCommitNullableInputModel}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel
     */
    'preprocessGitModel'?: NssolPlatypusApiModelsTemplateApiModelsGitCommitNullableInputModel;
    /**
     * CPUコア数
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel
     */
    'preprocessCpu'?: number;
    /**
     * メモリ容量（GB）
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel
     */
    'preprocessMemory'?: number;
    /**
     * GPU数
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel
     */
    'preprocessGpu'?: number;
    /**
     * エントリポイント
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel
     */
    'trainingEntryPoint': string;
    /**
     * 
     * @type {NssolPlatypusApiModelsTemplateApiModelsContainerImageInputModel}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel
     */
    'trainingContainerImage': NssolPlatypusApiModelsTemplateApiModelsContainerImageInputModel;
    /**
     * 
     * @type {NssolPlatypusApiModelsTemplateApiModelsGitCommitNullableInputModel}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel
     */
    'trainingGitModel': NssolPlatypusApiModelsTemplateApiModelsGitCommitNullableInputModel;
    /**
     * CPUコア数
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel
     */
    'trainingCpu': number;
    /**
     * メモリ容量
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel
     */
    'trainingMemory': number;
    /**
     * GPU数
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel
     */
    'trainingGpu': number;
    /**
     * エントリポイント
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel
     */
    'evaluationEntryPoint'?: string | null;
    /**
     * 
     * @type {NssolPlatypusApiModelsTemplateApiModelsContainerImageInputModel}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel
     */
    'evaluationContainerImage'?: NssolPlatypusApiModelsTemplateApiModelsContainerImageInputModel;
    /**
     * 
     * @type {NssolPlatypusApiModelsTemplateApiModelsGitCommitNullableInputModel}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel
     */
    'evaluationGitModel'?: NssolPlatypusApiModelsTemplateApiModelsGitCommitNullableInputModel;
    /**
     * CPUコア数
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel
     */
    'evaluationCpu'?: number;
    /**
     * メモリ容量
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel
     */
    'evaluationMemory'?: number;
    /**
     * GPU数
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel
     */
    'evaluationGpu'?: number;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsTemplateApiModelsVersionDetailsOutputModel
 */
export interface NssolPlatypusApiModelsTemplateApiModelsVersionDetailsOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionDetailsOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionDetailsOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionDetailsOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionDetailsOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionDetailsOutputModel
     */
    'id'?: number;
    /**
     * バージョン番号
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionDetailsOutputModel
     */
    'version'?: number;
    /**
     * テンプレートID
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionDetailsOutputModel
     */
    'templateId'?: number;
    /**
     * エントリポイント
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionDetailsOutputModel
     */
    'preprocessEntryPoint'?: string | null;
    /**
     * 
     * @type {NssolPlatypusApiModelsTemplateApiModelsGitCommitOutputModel}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionDetailsOutputModel
     */
    'preprocessGitModel'?: NssolPlatypusApiModelsTemplateApiModelsGitCommitOutputModel;
    /**
     * 
     * @type {NssolPlatypusApiModelsTemplateApiModelsContainerImageOutputModel}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionDetailsOutputModel
     */
    'preprocessContainerImage'?: NssolPlatypusApiModelsTemplateApiModelsContainerImageOutputModel;
    /**
     * CPUコア数
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionDetailsOutputModel
     */
    'preprocessCpu'?: number | null;
    /**
     * メモリ容量（GB）
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionDetailsOutputModel
     */
    'preprocessMemory'?: number | null;
    /**
     * GPU数
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionDetailsOutputModel
     */
    'preprocessGpu'?: number | null;
    /**
     * エントリポイント
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionDetailsOutputModel
     */
    'trainingEntryPoint'?: string | null;
    /**
     * 
     * @type {NssolPlatypusApiModelsTemplateApiModelsGitCommitOutputModel}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionDetailsOutputModel
     */
    'trainingGitModel'?: NssolPlatypusApiModelsTemplateApiModelsGitCommitOutputModel;
    /**
     * 
     * @type {NssolPlatypusApiModelsTemplateApiModelsContainerImageOutputModel}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionDetailsOutputModel
     */
    'trainingContainerImage'?: NssolPlatypusApiModelsTemplateApiModelsContainerImageOutputModel;
    /**
     * CPUコア数
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionDetailsOutputModel
     */
    'trainingCpu'?: number;
    /**
     * メモリ容量（GB）
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionDetailsOutputModel
     */
    'trainingMemory'?: number;
    /**
     * GPU数
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionDetailsOutputModel
     */
    'trainingGpu'?: number;
    /**
     * エントリポイント
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionDetailsOutputModel
     */
    'evaluationEntryPoint'?: string | null;
    /**
     * 
     * @type {NssolPlatypusApiModelsTemplateApiModelsGitCommitOutputModel}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionDetailsOutputModel
     */
    'evaluationGitModel'?: NssolPlatypusApiModelsTemplateApiModelsGitCommitOutputModel;
    /**
     * 
     * @type {NssolPlatypusApiModelsTemplateApiModelsContainerImageOutputModel}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionDetailsOutputModel
     */
    'evaluationContainerImage'?: NssolPlatypusApiModelsTemplateApiModelsContainerImageOutputModel;
    /**
     * CPUコア数
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionDetailsOutputModel
     */
    'evaluationCpu'?: number;
    /**
     * メモリ容量（GB）
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionDetailsOutputModel
     */
    'evaluationMemory'?: number;
    /**
     * GPU数
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionDetailsOutputModel
     */
    'evaluationGpu'?: number;
}
/**
 * テンプレートバージョンの出力モデル
 * @export
 * @interface NssolPlatypusApiModelsTemplateApiModelsVersionIndexOutputModel
 */
export interface NssolPlatypusApiModelsTemplateApiModelsVersionIndexOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionIndexOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionIndexOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionIndexOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionIndexOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionIndexOutputModel
     */
    'id'?: number;
    /**
     * バージョン番号
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionIndexOutputModel
     */
    'version'?: number;
    /**
     * テンプレートID
     * @type {number}
     * @memberof NssolPlatypusApiModelsTemplateApiModelsVersionIndexOutputModel
     */
    'templateId'?: number;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsTenantApiModelsCreateInputModel
 */
export interface NssolPlatypusApiModelsTenantApiModelsCreateInputModel {
    /**
     * テナント表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsTenantApiModelsCreateInputModel
     */
    'displayName': string;
    /**
     * Git ID。
     * @type {number}
     * @memberof NssolPlatypusApiModelsTenantApiModelsCreateInputModel
     */
    'defaultGitId'?: number | null;
    /**
     * Git IDs
     * @type {Array<number>}
     * @memberof NssolPlatypusApiModelsTenantApiModelsCreateInputModel
     */
    'gitIds': Array<number>;
    /**
     * Registry ID。
     * @type {number}
     * @memberof NssolPlatypusApiModelsTenantApiModelsCreateInputModel
     */
    'defaultRegistryId'?: number | null;
    /**
     * Registry IDs
     * @type {Array<number>}
     * @memberof NssolPlatypusApiModelsTenantApiModelsCreateInputModel
     */
    'registryIds': Array<number>;
    /**
     * Storage ID。
     * @type {number}
     * @memberof NssolPlatypusApiModelsTenantApiModelsCreateInputModel
     */
    'storageId': number;
    /**
     * ノートブック無期限利用可否フラグ
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsTenantApiModelsCreateInputModel
     */
    'availableInfiniteTimeNotebook'?: boolean;
    /**
     * UserGroup IDs。
     * @type {Array<number>}
     * @memberof NssolPlatypusApiModelsTenantApiModelsCreateInputModel
     */
    'userGroupIds'?: Array<number> | null;
    /**
     * テナント名
     * @type {string}
     * @memberof NssolPlatypusApiModelsTenantApiModelsCreateInputModel
     */
    'tenantName': string;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsTenantApiModelsDeleteOutputModel
 */
export interface NssolPlatypusApiModelsTenantApiModelsDeleteOutputModel {
    /**
     * データ削除用コンテナに関するWarnメッセージ (Warnがなければ null で返却)
     * @type {string}
     * @memberof NssolPlatypusApiModelsTenantApiModelsDeleteOutputModel
     */
    'containerWarnMsg'?: string | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsTenantApiModelsDetailsOutputModel
 */
export interface NssolPlatypusApiModelsTenantApiModelsDetailsOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsTenantApiModelsDetailsOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsTenantApiModelsDetailsOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsTenantApiModelsDetailsOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsTenantApiModelsDetailsOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsTenantApiModelsDetailsOutputModel
     */
    'id'?: number;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsTenantApiModelsDetailsOutputModel
     */
    'name'?: string | null;
    /**
     * テナント表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsTenantApiModelsDetailsOutputModel
     */
    'displayName'?: string | null;
    /**
     * ストレージパス。  サーバ名/バケット
     * @type {string}
     * @memberof NssolPlatypusApiModelsTenantApiModelsDetailsOutputModel
     */
    'storagePath'?: string | null;
    /**
     * Default Git ID。
     * @type {number}
     * @memberof NssolPlatypusApiModelsTenantApiModelsDetailsOutputModel
     */
    'defaultGitId'?: number | null;
    /**
     * Git IDs。
     * @type {Array<number>}
     * @memberof NssolPlatypusApiModelsTenantApiModelsDetailsOutputModel
     */
    'gitIds'?: Array<number> | null;
    /**
     * Default Registry ID。
     * @type {number}
     * @memberof NssolPlatypusApiModelsTenantApiModelsDetailsOutputModel
     */
    'defaultRegistryId'?: number | null;
    /**
     * Registry IDs。
     * @type {Array<number>}
     * @memberof NssolPlatypusApiModelsTenantApiModelsDetailsOutputModel
     */
    'registryIds'?: Array<number> | null;
    /**
     * Storage ID。
     * @type {number}
     * @memberof NssolPlatypusApiModelsTenantApiModelsDetailsOutputModel
     */
    'storageId'?: number | null;
    /**
     * ノートブック無期限利用可否フラグ
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsTenantApiModelsDetailsOutputModel
     */
    'availableInfiniteTimeNotebook'?: boolean;
    /**
     * UserGroup IDs。
     * @type {Array<number>}
     * @memberof NssolPlatypusApiModelsTenantApiModelsDetailsOutputModel
     */
    'userGroupIds'?: Array<number> | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsTenantApiModelsEditInputModel
 */
export interface NssolPlatypusApiModelsTenantApiModelsEditInputModel {
    /**
     * テナント表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsTenantApiModelsEditInputModel
     */
    'displayName': string;
    /**
     * Git ID。
     * @type {number}
     * @memberof NssolPlatypusApiModelsTenantApiModelsEditInputModel
     */
    'defaultGitId'?: number | null;
    /**
     * Git IDs
     * @type {Array<number>}
     * @memberof NssolPlatypusApiModelsTenantApiModelsEditInputModel
     */
    'gitIds': Array<number>;
    /**
     * Registry ID。
     * @type {number}
     * @memberof NssolPlatypusApiModelsTenantApiModelsEditInputModel
     */
    'defaultRegistryId'?: number | null;
    /**
     * Registry IDs
     * @type {Array<number>}
     * @memberof NssolPlatypusApiModelsTenantApiModelsEditInputModel
     */
    'registryIds': Array<number>;
    /**
     * Storage ID。
     * @type {number}
     * @memberof NssolPlatypusApiModelsTenantApiModelsEditInputModel
     */
    'storageId': number;
    /**
     * ノートブック無期限利用可否フラグ
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsTenantApiModelsEditInputModel
     */
    'availableInfiniteTimeNotebook'?: boolean;
    /**
     * UserGroup IDs。
     * @type {Array<number>}
     * @memberof NssolPlatypusApiModelsTenantApiModelsEditInputModel
     */
    'userGroupIds'?: Array<number> | null;
}
/**
 * テナント情報のうち、Indexで表示する最低情報だけを保持する
 * @export
 * @interface NssolPlatypusApiModelsTenantApiModelsIndexOutputModel
 */
export interface NssolPlatypusApiModelsTenantApiModelsIndexOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsTenantApiModelsIndexOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsTenantApiModelsIndexOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsTenantApiModelsIndexOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsTenantApiModelsIndexOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsTenantApiModelsIndexOutputModel
     */
    'id'?: number;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsTenantApiModelsIndexOutputModel
     */
    'name'?: string | null;
    /**
     * テナント表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsTenantApiModelsIndexOutputModel
     */
    'displayName'?: string | null;
    /**
     * ストレージパス。  サーバ名/バケット
     * @type {string}
     * @memberof NssolPlatypusApiModelsTenantApiModelsIndexOutputModel
     */
    'storagePath'?: string | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsTrainingApiModelsAttachedFileOutputModel
 */
export interface NssolPlatypusApiModelsTrainingApiModelsAttachedFileOutputModel {
    /**
     * 学習履歴ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsAttachedFileOutputModel
     */
    'id'?: number;
    /**
     * 添付ファイルID
     * @type {number}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsAttachedFileOutputModel
     */
    'fileId'?: number;
    /**
     * ファイルURL
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsAttachedFileOutputModel
     */
    'url'?: string | null;
    /**
     * ファイル名
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsAttachedFileOutputModel
     */
    'fileName'?: string | null;
    /**
     * 削除可能か
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsAttachedFileOutputModel
     */
    'isLocked'?: boolean;
}
/**
 * 新規学習実行モデル
 * @export
 * @interface NssolPlatypusApiModelsTrainingApiModelsCreateInputModel
 */
export interface NssolPlatypusApiModelsTrainingApiModelsCreateInputModel {
    /**
     * 識別名
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsCreateInputModel
     */
    'name': string;
    /**
     * 
     * @type {NssolPlatypusApiModelsComponentsContainerImageInputModel}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsCreateInputModel
     */
    'containerImage': NssolPlatypusApiModelsComponentsContainerImageInputModel;
    /**
     * データセットID
     * @type {number}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsCreateInputModel
     */
    'dataSetId': number;
    /**
     * 親学習履歴ID
     * @type {Array<number>}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsCreateInputModel
     */
    'parentIds'?: Array<number> | null;
    /**
     * 
     * @type {NssolPlatypusApiModelsComponentsGitCommitInputModel}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsCreateInputModel
     */
    'gitModel': NssolPlatypusApiModelsComponentsGitCommitInputModel;
    /**
     * ジョブ実行コマンド
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsCreateInputModel
     */
    'entryPoint': string;
    /**
     * 追加環境変数
     * @type {{ [key: string]: string; }}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsCreateInputModel
     */
    'options'?: { [key: string]: string; } | null;
    /**
     * CPUコア数
     * @type {number}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsCreateInputModel
     */
    'cpu': number;
    /**
     * メモリ数(GB)
     * @type {number}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsCreateInputModel
     */
    'memory': number;
    /**
     * GPU数
     * @type {number}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsCreateInputModel
     */
    'gpu': number;
    /**
     * パーティション
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsCreateInputModel
     */
    'partition'?: string | null;
    /**
     * 開放ポート番号
     * @type {Array<number>}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsCreateInputModel
     */
    'ports'?: Array<number> | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsCreateInputModel
     */
    'memo'?: string | null;
    /**
     * タグ
     * @type {Array<string>}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsCreateInputModel
     */
    'tags'?: Array<string> | null;
    /**
     * zip圧縮するか否か。  true：zip圧縮する　false：zip圧縮しない
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsCreateInputModel
     */
    'zip'?: boolean;
    /**
     * データセットをローカルコピーするか否か。  true：ローカルコピーする　false：ローカルコピーしない(シンボリックリンクを作成する)
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsCreateInputModel
     */
    'localDataSet'?: boolean;
}
/**
 * 学習履歴の詳細情報モデル
 * @export
 * @interface NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
 */
export interface NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'id'?: number;
    /**
     * 表示用ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'displayId'?: number | null;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'name'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'memo'?: string | null;
    /**
     * ステータス
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'status'?: string | null;
    /**
     * お気に入り
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'favorite'?: boolean;
    /**
     * 表示用
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'fullName'?: string | null;
    /**
     * 
     * @type {NssolPlatypusApiModelsDataSetApiModelsIndexOutputModel}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'dataSet'?: NssolPlatypusApiModelsDataSetApiModelsIndexOutputModel;
    /**
     * ジョブ実行コマンド
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'entryPoint'?: string | null;
    /**
     * 親学習名（表示用）
     * @type {Array<string>}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'parentFullNameList'?: Array<string> | null;
    /**
     * タグ
     * @type {Array<string>}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'tags'?: Array<string> | null;
    /**
     * コンテナ名になる一意識別文字列
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'key'?: string | null;
    /**
     * 
     * @type {NssolPlatypusApiModelsComponentsGitCommitOutputModel}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'gitModel'?: NssolPlatypusApiModelsComponentsGitCommitOutputModel;
    /**
     * オプション。  ViewModelではDictionaryを使わないという規約のため、KVPのリストで返す。
     * @type {Array<SystemCollectionsGenericKeyValuePair2>}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'options'?: Array<SystemCollectionsGenericKeyValuePair2> | null;
    /**
     * 
     * @type {NssolPlatypusApiModelsComponentsContainerImageOutputModel}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'containerImage'?: NssolPlatypusApiModelsComponentsContainerImageOutputModel;
    /**
     * 親学習履歴情報。
     * @type {Array<NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel>}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'parents'?: Array<NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel> | null;
    /**
     * 完了日時
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'completedAt'?: string | null;
    /**
     * 登録者表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'displayNameCreatedBy'?: string | null;
    /**
     * 開始日時
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'startedAt'?: string | null;
    /**
     * コンテナが実行されたノード名
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'node'?: string | null;
    /**
     * ログ要約
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'logSummary'?: string | null;
    /**
     * CPUコア数
     * @type {number}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'cpu'?: number;
    /**
     * メモリ容量（GB）
     * @type {number}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'memory'?: number;
    /**
     * GPU数
     * @type {number}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'gpu'?: number;
    /**
     * パーティション
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'partition'?: string | null;
    /**
     * 開放ポート番号
     * @type {Array<number>}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'ports'?: Array<number> | null;
    /**
     * TargetPortとNodePortのペア
     * @type {Array<SystemCollectionsGenericKeyValuePair2>}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'nodePorts'?: Array<SystemCollectionsGenericKeyValuePair2> | null;
    /**
     * ステータスの種類。  None: 存在しない。  Running: ジョブが正常に実行されている。  Error: ジョブが異常な状態で実行されている。  Closed: ジョブ実行が正常に完了し、実行結果が保存された。  Failed: ジョブ実行が異常終了した。
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'statusType'?: string | null;
    /**
     * コンテナの状態に対する注釈。何か異常が発生している際は注釈が表示される。
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'conditionNote'?: string | null;
    /**
     * 待機時間  status
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'waitingTime'?: string | null;
    /**
     * 実行時間
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'executionTime'?: string | null;
    /**
     * zip圧縮するか否か。  true：zip圧縮する　false：zip圧縮しない
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'zip'?: boolean;
    /**
     * データセットをローカルコピーするか否か。  true：ローカルコピーする　false：ローカルコピーしない(シンボリックリンクを作成する)
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel
     */
    'localDataSet'?: boolean;
}
/**
 * 学習履歴編集モデル
 * @export
 * @interface NssolPlatypusApiModelsTrainingApiModelsEditInputModel
 */
export interface NssolPlatypusApiModelsTrainingApiModelsEditInputModel {
    /**
     * 識別名
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsEditInputModel
     */
    'name'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsEditInputModel
     */
    'memo'?: string | null;
    /**
     * お気に入り
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsEditInputModel
     */
    'favorite'?: boolean | null;
    /**
     * タグ
     * @type {Array<string>}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsEditInputModel
     */
    'tags'?: Array<string> | null;
}
/**
 * 学習履歴の添付ファイル出力モデル
 * @export
 * @interface NssolPlatypusApiModelsTrainingApiModelsFileOutputModel
 */
export interface NssolPlatypusApiModelsTrainingApiModelsFileOutputModel {
    /**
     * 学習履歴ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsFileOutputModel
     */
    'id'?: number;
    /**
     * 添付ファイルID
     * @type {number}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsFileOutputModel
     */
    'fileId'?: number;
    /**
     * ファイル種別キー
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsFileOutputModel
     */
    'key'?: string | null;
    /**
     * ファイルURL
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsFileOutputModel
     */
    'url'?: string | null;
    /**
     * ファイル名
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsFileOutputModel
     */
    'fileName'?: string | null;
    /**
     * ファイルサイズ
     * @type {number}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsFileOutputModel
     */
    'fileSize'?: number;
}
/**
 * 学習履歴のうち、Indexで表示する最低情報だけを保持する
 * @export
 * @interface NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel
 */
export interface NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel
     */
    'id'?: number;
    /**
     * 表示用ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel
     */
    'displayId'?: number | null;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel
     */
    'name'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel
     */
    'memo'?: string | null;
    /**
     * ステータス
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel
     */
    'status'?: string | null;
    /**
     * お気に入り
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel
     */
    'favorite'?: boolean;
    /**
     * 表示用
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel
     */
    'fullName'?: string | null;
    /**
     * 
     * @type {NssolPlatypusApiModelsDataSetApiModelsIndexOutputModel}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel
     */
    'dataSet'?: NssolPlatypusApiModelsDataSetApiModelsIndexOutputModel;
    /**
     * ジョブ実行コマンド
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel
     */
    'entryPoint'?: string | null;
    /**
     * 親学習名（表示用）
     * @type {Array<string>}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel
     */
    'parentFullNameList'?: Array<string> | null;
    /**
     * タグ
     * @type {Array<string>}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel
     */
    'tags'?: Array<string> | null;
}
/**
 * 詳細検索の入力モデル。
 * @export
 * @interface NssolPlatypusApiModelsTrainingApiModelsSearchDetailInputModel
 */
export interface NssolPlatypusApiModelsTrainingApiModelsSearchDetailInputModel {
    /**
     * IDの検索条件。  この数値以上のIDが検索される。
     * @type {number}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSearchDetailInputModel
     */
    'idLower'?: number | null;
    /**
     * IDの検索条件。  この数値以下のIDが検索される。
     * @type {number}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSearchDetailInputModel
     */
    'idUpper'?: number | null;
    /**
     * 名前  複数のワードが含まれる場合は\",\"区切り
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSearchDetailInputModel
     */
    'name'?: string | null;
    /**
     * 名前がor検索かand検索か
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSearchDetailInputModel
     */
    'nameOr'?: boolean | null;
    /**
     * 親学習名  複数のワードが含まれる場合は\",\"区切り
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSearchDetailInputModel
     */
    'parentName'?: string | null;
    /**
     * 親学習名がor検索かand検索か
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSearchDetailInputModel
     */
    'parentNameOr'?: boolean | null;
    /**
     * 実行時刻の検索の期間の開始の条件。日付の形式。  \"2018/01/01\" → 2018/01/01 00:00:00 以降が検索される。
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSearchDetailInputModel
     */
    'startedAtLower'?: string | null;
    /**
     * 実行時刻の検索の期間の終了の条件。日付の形式。  \"2018/01/01\" → 2018/01/01 23:59:59 以前が検索される。
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSearchDetailInputModel
     */
    'startedAtUpper'?: string | null;
    /**
     * 実行者  複数のワードが含まれる場合は\",\"区切り
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSearchDetailInputModel
     */
    'startedBy'?: string | null;
    /**
     * 実行者の検索がor検索かand検索か
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSearchDetailInputModel
     */
    'startedByOr'?: boolean | null;
    /**
     * データセット名  複数のワードが含まれる場合は\",\"区切り
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSearchDetailInputModel
     */
    'dataSet'?: string | null;
    /**
     * データセット名がor検索かand検索か
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSearchDetailInputModel
     */
    'dataSetOr'?: boolean | null;
    /**
     * メモ  複数のワードが含まれる場合は\",\"区切り
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSearchDetailInputModel
     */
    'memo'?: string | null;
    /**
     * メモがor検索かand検索か
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSearchDetailInputModel
     */
    'memoOr'?: boolean | null;
    /**
     * ステータス  複数のワードが含まれる場合は\",\"区切り
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSearchDetailInputModel
     */
    'status'?: string | null;
    /**
     * ステータスがor検索かand検索か
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSearchDetailInputModel
     */
    'statusOr'?: boolean | null;
    /**
     * 実行コマンド  複数のワードが含まれる場合は\",\"区切り
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSearchDetailInputModel
     */
    'entryPoint'?: string | null;
    /**
     * 実行コマンドがor検索かand検索か
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSearchDetailInputModel
     */
    'entryPointOr'?: boolean | null;
    /**
     * タグ  複数のワードが含まれる場合は\",\"区切り
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSearchDetailInputModel
     */
    'tags'?: string | null;
    /**
     * タグがor検索かand検索か
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSearchDetailInputModel
     */
    'tagsOr'?: boolean | null;
}
/**
 * 検索履歴入力モデル
 * @export
 * @interface NssolPlatypusApiModelsTrainingApiModelsSearchHistoryInputModel
 */
export interface NssolPlatypusApiModelsTrainingApiModelsSearchHistoryInputModel {
    /**
     * 検索履歴の名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSearchHistoryInputModel
     */
    'name': string;
    /**
     * 
     * @type {NssolPlatypusApiModelsTrainingApiModelsSearchDetailInputModel}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSearchHistoryInputModel
     */
    'searchDetailInputModel'?: NssolPlatypusApiModelsTrainingApiModelsSearchDetailInputModel;
}
/**
 * 検索履歴出力モデル
 * @export
 * @interface NssolPlatypusApiModelsTrainingApiModelsSearchHistoryOutputModel
 */
export interface NssolPlatypusApiModelsTrainingApiModelsSearchHistoryOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSearchHistoryOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSearchHistoryOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSearchHistoryOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSearchHistoryOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * 履歴の登録名
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSearchHistoryOutputModel
     */
    'name'?: string | null;
    /**
     * 履歴のid
     * @type {number}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSearchHistoryOutputModel
     */
    'id'?: number;
    /**
     * 
     * @type {NssolPlatypusApiModelsTrainingApiModelsSearchDetailInputModel}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSearchHistoryOutputModel
     */
    'searchDetail'?: NssolPlatypusApiModelsTrainingApiModelsSearchDetailInputModel;
}
/**
 * 学習履歴のうち、コスト最小で取得できる情報だけを保持する
 * @export
 * @interface NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel
 */
export interface NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel
     */
    'id'?: number;
    /**
     * 表示用ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel
     */
    'displayId'?: number | null;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel
     */
    'name'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel
     */
    'memo'?: string | null;
    /**
     * ステータス
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel
     */
    'status'?: string | null;
    /**
     * お気に入り
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel
     */
    'favorite'?: boolean;
    /**
     * 表示用
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel
     */
    'fullName'?: string | null;
}
/**
 * 付与または削除するタグ入力モデル
 * @export
 * @interface NssolPlatypusApiModelsTrainingApiModelsTagsInputModel
 */
export interface NssolPlatypusApiModelsTrainingApiModelsTagsInputModel {
    /**
     * タグを付与、または、削除したい対象の学習履歴のId
     * @type {Array<number>}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsTagsInputModel
     */
    'id': Array<number>;
    /**
     * 付与、または、削除したいタグ
     * @type {Array<string>}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsTagsInputModel
     */
    'tags': Array<string>;
}
/**
 * TensorBoard起動モデル
 * @export
 * @interface NssolPlatypusApiModelsTrainingApiModelsTensorBoardInputModel
 */
export interface NssolPlatypusApiModelsTrainingApiModelsTensorBoardInputModel {
    /**
     * コンテナの生存期間(秒)
     * @type {number}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsTensorBoardInputModel
     */
    'expiresIn'?: number | null;
    /**
     * 追加でマウントする学習履歴IDリスト
     * @type {Array<number>}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsTensorBoardInputModel
     */
    'selectedHistoryIds'?: Array<number> | null;
}
/**
 * TensorBoard情報出力モデル
 * @export
 * @interface NssolPlatypusApiModelsTrainingApiModelsTensorBoardOutputModel
 */
export interface NssolPlatypusApiModelsTrainingApiModelsTensorBoardOutputModel {
    /**
     * コンテナ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsTensorBoardOutputModel
     */
    'name'?: string | null;
    /**
     * ステータス
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsTensorBoardOutputModel
     */
    'status'?: string | null;
    /**
     * ステータス詳細
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsTensorBoardOutputModel
     */
    'statusType'?: string | null;
    /**
     * ノードポート番号
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsTensorBoardOutputModel
     */
    'nodePort'?: string | null;
    /**
     * コンテナの残存時間(%d d %h h %m m)
     * @type {string}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsTensorBoardOutputModel
     */
    'remainingTime'?: string | null;
    /**
     * マウントした学習履歴ID
     * @type {Array<number>}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsTensorBoardOutputModel
     */
    'mountedTrainingHistoryIds'?: Array<number> | null;
}
/**
 * 学習検索項目補完出力モデル
 * @export
 * @interface NssolPlatypusApiModelsTrainingApiModelsTrainingSearchFillOutputModel
 */
export interface NssolPlatypusApiModelsTrainingApiModelsTrainingSearchFillOutputModel {
    /**
     * 実行者名の一覧
     * @type {Array<string>}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsTrainingSearchFillOutputModel
     */
    'createdBy'?: Array<string> | null;
    /**
     * ステータスの一覧
     * @type {Array<string>}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsTrainingSearchFillOutputModel
     */
    'status'?: Array<string> | null;
    /**
     * タグの一覧
     * @type {Array<string>}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsTrainingSearchFillOutputModel
     */
    'tags'?: Array<string> | null;
    /**
     * データセットの補完
     * @type {Array<string>}
     * @memberof NssolPlatypusApiModelsTrainingApiModelsTrainingSearchFillOutputModel
     */
    'datasets'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsUserApiModelsCreateInputModel
 */
export interface NssolPlatypusApiModelsUserApiModelsCreateInputModel {
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserApiModelsCreateInputModel
     */
    'name': string;
    /**
     * 表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserApiModelsCreateInputModel
     */
    'displayName'?: string | null;
    /**
     * パスワード
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserApiModelsCreateInputModel
     */
    'password': string;
    /**
     * 最初に付与するシステムロールID
     * @type {Array<number>}
     * @memberof NssolPlatypusApiModelsUserApiModelsCreateInputModel
     */
    'systemRoles'?: Array<number> | null;
    /**
     * 最初に所属させるテナント
     * @type {Array<NssolPlatypusApiModelsUserApiModelsCreateInputModelTenantInfoModel>}
     * @memberof NssolPlatypusApiModelsUserApiModelsCreateInputModel
     */
    'tenants': Array<NssolPlatypusApiModelsUserApiModelsCreateInputModelTenantInfoModel>;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsUserApiModelsCreateInputModelTenantInfoModel
 */
export interface NssolPlatypusApiModelsUserApiModelsCreateInputModelTenantInfoModel {
    /**
     * 
     * @type {number}
     * @memberof NssolPlatypusApiModelsUserApiModelsCreateInputModelTenantInfoModel
     */
    'id': number;
    /**
     * 
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsUserApiModelsCreateInputModelTenantInfoModel
     */
    'default'?: boolean;
    /**
     * 
     * @type {Array<number>}
     * @memberof NssolPlatypusApiModelsUserApiModelsCreateInputModelTenantInfoModel
     */
    'roles'?: Array<number> | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsUserApiModelsEditInputModel
 */
export interface NssolPlatypusApiModelsUserApiModelsEditInputModel {
    /**
     * 最初に付与するシステムロールID
     * @type {Array<number>}
     * @memberof NssolPlatypusApiModelsUserApiModelsEditInputModel
     */
    'systemRoles'?: Array<number> | null;
    /**
     * 最初に所属させるテナント
     * @type {Array<NssolPlatypusApiModelsUserApiModelsEditInputModelTenantInfoModel>}
     * @memberof NssolPlatypusApiModelsUserApiModelsEditInputModel
     */
    'tenants': Array<NssolPlatypusApiModelsUserApiModelsEditInputModelTenantInfoModel>;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsUserApiModelsEditInputModelTenantInfoModel
 */
export interface NssolPlatypusApiModelsUserApiModelsEditInputModelTenantInfoModel {
    /**
     * 
     * @type {number}
     * @memberof NssolPlatypusApiModelsUserApiModelsEditInputModelTenantInfoModel
     */
    'id': number;
    /**
     * 
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsUserApiModelsEditInputModelTenantInfoModel
     */
    'default'?: boolean;
    /**
     * 
     * @type {Array<number>}
     * @memberof NssolPlatypusApiModelsUserApiModelsEditInputModelTenantInfoModel
     */
    'roles'?: Array<number> | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsUserApiModelsIndexForAdminOutputModel
 */
export interface NssolPlatypusApiModelsUserApiModelsIndexForAdminOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserApiModelsIndexForAdminOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserApiModelsIndexForAdminOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserApiModelsIndexForAdminOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserApiModelsIndexForAdminOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsUserApiModelsIndexForAdminOutputModel
     */
    'id'?: number;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserApiModelsIndexForAdminOutputModel
     */
    'name'?: string | null;
    /**
     * 表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserApiModelsIndexForAdminOutputModel
     */
    'displayName'?: string | null;
    /**
     * 
     * @type {NssolPlatypusInfrastructureTypesAuthServiceType}
     * @memberof NssolPlatypusApiModelsUserApiModelsIndexForAdminOutputModel
     */
    'serviceType'?: NssolPlatypusInfrastructureTypesAuthServiceType;
    /**
     * 属しているシステムロール
     * @type {Array<NssolPlatypusInfrastructureInfosRoleInfo>}
     * @memberof NssolPlatypusApiModelsUserApiModelsIndexForAdminOutputModel
     */
    'systemRoles'?: Array<NssolPlatypusInfrastructureInfosRoleInfo> | null;
    /**
     * 属しているテナント
     * @type {Array<NssolPlatypusInfrastructureInfosTenantInfo>}
     * @memberof NssolPlatypusApiModelsUserApiModelsIndexForAdminOutputModel
     */
    'tenants'?: Array<NssolPlatypusInfrastructureInfosTenantInfo> | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusApiModelsUserApiModelsIndexForTenantOutputModel
 */
export interface NssolPlatypusApiModelsUserApiModelsIndexForTenantOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserApiModelsIndexForTenantOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserApiModelsIndexForTenantOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserApiModelsIndexForTenantOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserApiModelsIndexForTenantOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusApiModelsUserApiModelsIndexForTenantOutputModel
     */
    'id'?: number;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserApiModelsIndexForTenantOutputModel
     */
    'name'?: string | null;
    /**
     * 表示名
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserApiModelsIndexForTenantOutputModel
     */
    'displayName'?: string | null;
    /**
     * 
     * @type {NssolPlatypusInfrastructureTypesAuthServiceType}
     * @memberof NssolPlatypusApiModelsUserApiModelsIndexForTenantOutputModel
     */
    'serviceType'?: NssolPlatypusInfrastructureTypesAuthServiceType;
    /**
     * 属しているテナントロール
     * @type {Array<NssolPlatypusInfrastructureInfosRoleInfo>}
     * @memberof NssolPlatypusApiModelsUserApiModelsIndexForTenantOutputModel
     */
    'roles'?: Array<NssolPlatypusInfrastructureInfosRoleInfo> | null;
}
/**
 * LDAP認証情報入力モデル
 * @export
 * @interface NssolPlatypusApiModelsUserApiModelsLdapAuthenticationInputModel
 */
export interface NssolPlatypusApiModelsUserApiModelsLdapAuthenticationInputModel {
    /**
     * LDAP接続用ユーザ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserApiModelsLdapAuthenticationInputModel
     */
    'userName'?: string | null;
    /**
     * LDAP接続用パスワード
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserApiModelsLdapAuthenticationInputModel
     */
    'password'?: string | null;
}
/**
 * ユーザグループ作成入力モデル
 * @export
 * @interface NssolPlatypusApiModelsUserGroupApiModelsCreateInputModel
 */
export interface NssolPlatypusApiModelsUserGroupApiModelsCreateInputModel {
    /**
     * ユーザグループ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserGroupApiModelsCreateInputModel
     */
    'name': string;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserGroupApiModelsCreateInputModel
     */
    'memo'?: string | null;
    /**
     * 対象ユーザグループがグループか、OUか。
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsUserGroupApiModelsCreateInputModel
     */
    'isGroup': boolean;
    /**
     * 対象ユーザグループのDN情報
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserGroupApiModelsCreateInputModel
     */
    'dn': string;
    /**
     * 対象ユーザグループのDN情報の直接的（直下）が対象か、間接的も許可するか。
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsUserGroupApiModelsCreateInputModel
     */
    'isDirect': boolean;
    /**
     * テナント参加時に付与するロールIDリスト
     * @type {Array<number>}
     * @memberof NssolPlatypusApiModelsUserGroupApiModelsCreateInputModel
     */
    'roleIds': Array<number>;
}
/**
 * ユーザグループ詳細出力モデル
 * @export
 * @interface NssolPlatypusApiModelsUserGroupApiModelsDetailsOutputModel
 */
export interface NssolPlatypusApiModelsUserGroupApiModelsDetailsOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserGroupApiModelsDetailsOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserGroupApiModelsDetailsOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserGroupApiModelsDetailsOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserGroupApiModelsDetailsOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ユーザグループID
     * @type {number}
     * @memberof NssolPlatypusApiModelsUserGroupApiModelsDetailsOutputModel
     */
    'id'?: number;
    /**
     * ユーザグループ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserGroupApiModelsDetailsOutputModel
     */
    'name'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserGroupApiModelsDetailsOutputModel
     */
    'memo'?: string | null;
    /**
     * 対象ユーザグループがグループか、OUか。
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsUserGroupApiModelsDetailsOutputModel
     */
    'isGroup'?: boolean;
    /**
     * 対象ユーザグループのDN情報
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserGroupApiModelsDetailsOutputModel
     */
    'dn'?: string | null;
    /**
     * 対象ユーザグループのDN情報の直接的（直下）が対象か、間接的も許可するか。
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsUserGroupApiModelsDetailsOutputModel
     */
    'isDirect'?: boolean;
    /**
     * テナント参加時に付与するロール情報
     * @type {Array<NssolPlatypusInfrastructureInfosRoleInfo>}
     * @memberof NssolPlatypusApiModelsUserGroupApiModelsDetailsOutputModel
     */
    'roles'?: Array<NssolPlatypusInfrastructureInfosRoleInfo> | null;
}
/**
 * ユーザグループ一覧出力モデル
 * @export
 * @interface NssolPlatypusApiModelsUserGroupApiModelsIndexOutputModel
 */
export interface NssolPlatypusApiModelsUserGroupApiModelsIndexOutputModel {
    /**
     * 登録者
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserGroupApiModelsIndexOutputModel
     */
    'createdBy'?: string | null;
    /**
     * 登録日
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserGroupApiModelsIndexOutputModel
     */
    'createdAt'?: string | null;
    /**
     * 更新者
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserGroupApiModelsIndexOutputModel
     */
    'modifiedBy'?: string | null;
    /**
     * 更新日
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserGroupApiModelsIndexOutputModel
     */
    'modifiedAt'?: string | null;
    /**
     * ユーザグループID
     * @type {number}
     * @memberof NssolPlatypusApiModelsUserGroupApiModelsIndexOutputModel
     */
    'id'?: number;
    /**
     * ユーザグループ名
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserGroupApiModelsIndexOutputModel
     */
    'name'?: string | null;
    /**
     * メモ
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserGroupApiModelsIndexOutputModel
     */
    'memo'?: string | null;
    /**
     * 対象ユーザグループがグループか、OUか。
     * @type {boolean}
     * @memberof NssolPlatypusApiModelsUserGroupApiModelsIndexOutputModel
     */
    'isGroup'?: boolean;
    /**
     * 対象ユーザグループのDN情報
     * @type {string}
     * @memberof NssolPlatypusApiModelsUserGroupApiModelsIndexOutputModel
     */
    'dn'?: string | null;
}
/**
 * バージョン情報出力モデル
 * @export
 * @interface NssolPlatypusApiModelsVersionApiModelsVersionOutputModel
 */
export interface NssolPlatypusApiModelsVersionApiModelsVersionOutputModel {
    /**
     * バージョン番号
     * @type {string}
     * @memberof NssolPlatypusApiModelsVersionApiModelsVersionOutputModel
     */
    'version'?: string | null;
    /**
     * メッセージ
     * @type {Array<string>}
     * @memberof NssolPlatypusApiModelsVersionApiModelsVersionOutputModel
     */
    'messages'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusInfrastructureInfosContainerEventInfo
 */
export interface NssolPlatypusInfrastructureInfosContainerEventInfo {
    /**
     * テナントID
     * @type {number}
     * @memberof NssolPlatypusInfrastructureInfosContainerEventInfo
     */
    'tenantId'?: number;
    /**
     * テナント名
     * @type {string}
     * @memberof NssolPlatypusInfrastructureInfosContainerEventInfo
     */
    'tenantName'?: string | null;
    /**
     * コンテナ名
     * @type {string}
     * @memberof NssolPlatypusInfrastructureInfosContainerEventInfo
     */
    'containerName'?: string | null;
    /**
     * メッセージ
     * @type {string}
     * @memberof NssolPlatypusInfrastructureInfosContainerEventInfo
     */
    'message'?: string | null;
    /**
     * 理由
     * @type {string}
     * @memberof NssolPlatypusInfrastructureInfosContainerEventInfo
     */
    'details'?: string | null;
    /**
     * エラーか否か
     * @type {boolean}
     * @memberof NssolPlatypusInfrastructureInfosContainerEventInfo
     */
    'isError'?: boolean;
    /**
     * 初回登録日時
     * @type {string}
     * @memberof NssolPlatypusInfrastructureInfosContainerEventInfo
     */
    'firstTimestamp'?: string | null;
    /**
     * 最終更新日時
     * @type {string}
     * @memberof NssolPlatypusInfrastructureInfosContainerEventInfo
     */
    'lastTimestamp'?: string | null;
}
/**
 * Enumをintとstringの二つの表現で表すためのクラス
 * @export
 * @interface NssolPlatypusInfrastructureInfosEnumInfo
 */
export interface NssolPlatypusInfrastructureInfosEnumInfo {
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusInfrastructureInfosEnumInfo
     */
    'id'?: number;
    /**
     * 名前
     * @type {string}
     * @memberof NssolPlatypusInfrastructureInfosEnumInfo
     */
    'name'?: string | null;
}
/**
 * ロール情報
 * @export
 * @interface NssolPlatypusInfrastructureInfosRoleInfo
 */
export interface NssolPlatypusInfrastructureInfosRoleInfo {
    /**
     * ID
     * @type {number}
     * @memberof NssolPlatypusInfrastructureInfosRoleInfo
     */
    'id'?: number;
    /**
     * ロール名
     * @type {string}
     * @memberof NssolPlatypusInfrastructureInfosRoleInfo
     */
    'name'?: string | null;
    /**
     * ロール表示名
     * @type {string}
     * @memberof NssolPlatypusInfrastructureInfosRoleInfo
     */
    'displayName'?: string | null;
    /**
     * カスタムロールか
     * @type {boolean}
     * @memberof NssolPlatypusInfrastructureInfosRoleInfo
     */
    'isCustomed'?: boolean;
    /**
     * 並び順。小さいほど前に来る。
     * @type {number}
     * @memberof NssolPlatypusInfrastructureInfosRoleInfo
     */
    'sortOrder'?: number;
    /**
     * KQI上での紐づけであればtrue
     * @type {boolean}
     * @memberof NssolPlatypusInfrastructureInfosRoleInfo
     */
    'isOrigin'?: boolean;
    /**
     * ユーザグループIDリスト
     * @type {Array<number>}
     * @memberof NssolPlatypusInfrastructureInfosRoleInfo
     */
    'userGroupTanantMapIdLists'?: Array<number> | null;
}
/**
 * オブジェクトストレージで管理されるオブジェクトファイルのモデル。  minioで使用
 * @export
 * @interface NssolPlatypusInfrastructureInfosStorageFileInfo
 */
export interface NssolPlatypusInfrastructureInfosStorageFileInfo {
    /**
     * オブジェクトストレージ上でのファイルパス
     * @type {string}
     * @memberof NssolPlatypusInfrastructureInfosStorageFileInfo
     */
    'key'?: string | null;
    /**
     * ファイル名
     * @type {string}
     * @memberof NssolPlatypusInfrastructureInfosStorageFileInfo
     */
    'fileName'?: string | null;
    /**
     * 更新日時
     * @type {string}
     * @memberof NssolPlatypusInfrastructureInfosStorageFileInfo
     */
    'lastModified'?: string;
    /**
     * サイズ
     * @type {number}
     * @memberof NssolPlatypusInfrastructureInfosStorageFileInfo
     */
    'size'?: number;
    /**
     * ダウンロードURL
     * @type {string}
     * @memberof NssolPlatypusInfrastructureInfosStorageFileInfo
     */
    'url'?: string | null;
}
/**
 * テナント情報
 * @export
 * @interface NssolPlatypusInfrastructureInfosTenantInfo
 */
export interface NssolPlatypusInfrastructureInfosTenantInfo {
    /**
     * テナントID
     * @type {number}
     * @memberof NssolPlatypusInfrastructureInfosTenantInfo
     */
    'id'?: number | null;
    /**
     * テナント名
     * @type {string}
     * @memberof NssolPlatypusInfrastructureInfosTenantInfo
     */
    'name'?: string | null;
    /**
     * デフォルト
     * @type {boolean}
     * @memberof NssolPlatypusInfrastructureInfosTenantInfo
     */
    'default'?: boolean;
    /**
     * テナント表示名
     * @type {string}
     * @memberof NssolPlatypusInfrastructureInfosTenantInfo
     */
    'displayName'?: string | null;
    /**
     * テナントの全ロール名
     * @type {Array<NssolPlatypusInfrastructureInfosRoleInfo>}
     * @memberof NssolPlatypusInfrastructureInfosTenantInfo
     */
    'roles'?: Array<NssolPlatypusInfrastructureInfosRoleInfo> | null;
    /**
     * 元々KQI上で紐づけあったか。
     * @type {boolean}
     * @memberof NssolPlatypusInfrastructureInfosTenantInfo
     */
    'isOrigin'?: boolean;
}
/**
 * メニューコードの一覧
 * @export
 * @enum {string}
 */

export const NssolPlatypusInfrastructureMenuCode = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8,
    NUMBER_9: 9,
    NUMBER_10: 10,
    NUMBER_11: 11,
    NUMBER_12: 12,
    NUMBER_13: 13,
    NUMBER_14: 14,
    NUMBER_15: 15,
    NUMBER_16: 16,
    NUMBER_17: 17,
    NUMBER_18: 18,
    NUMBER_19: 19,
    NUMBER_20: 20,
    NUMBER_21: 21,
    NUMBER_22: 22,
    NUMBER_23: 23,
    NUMBER_24: 24,
    NUMBER_25: 25,
    NUMBER_26: 26,
    NUMBER_27: 27,
    NUMBER_28: 28,
    NUMBER_29: 29,
    NUMBER_30: 30
} as const;

export type NssolPlatypusInfrastructureMenuCode = typeof NssolPlatypusInfrastructureMenuCode[keyof typeof NssolPlatypusInfrastructureMenuCode];


/**
 * ノードのアクセスレベル。
 * @export
 * @enum {string}
 */

export const NssolPlatypusInfrastructureNodeAccessLevel = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type NssolPlatypusInfrastructureNodeAccessLevel = typeof NssolPlatypusInfrastructureNodeAccessLevel[keyof typeof NssolPlatypusInfrastructureNodeAccessLevel];


/**
 * オブジェクトストレージのディレクトリのモデル。  minioで使用
 * @export
 * @interface NssolPlatypusInfrastructureStorageDirInfo
 */
export interface NssolPlatypusInfrastructureStorageDirInfo {
    /**
     * オブジェクトストレージ上でのディレクトリパス
     * @type {string}
     * @memberof NssolPlatypusInfrastructureStorageDirInfo
     */
    'dirPath'?: string | null;
    /**
     * ディレクトリ名
     * @type {string}
     * @memberof NssolPlatypusInfrastructureStorageDirInfo
     */
    'dirName'?: string | null;
}
/**
 * オブジェクトストレージにディレクトリ直下を問い合わせた結果をまとめたもの
 * @export
 * @interface NssolPlatypusInfrastructureStorageListResultInfo
 */
export interface NssolPlatypusInfrastructureStorageListResultInfo {
    /**
     * searchDirPath 配下のディレクトリ
     * @type {Array<NssolPlatypusInfrastructureStorageDirInfo>}
     * @memberof NssolPlatypusInfrastructureStorageListResultInfo
     */
    'dirs'?: Array<NssolPlatypusInfrastructureStorageDirInfo> | null;
    /**
     * searchDirPath 配下のファイル
     * @type {Array<NssolPlatypusInfrastructureInfosStorageFileInfo>}
     * @memberof NssolPlatypusInfrastructureStorageListResultInfo
     */
    'files'?: Array<NssolPlatypusInfrastructureInfosStorageFileInfo> | null;
    /**
     * ディレクトリ直下に1000件の結果があった場合true
     * @type {boolean}
     * @memberof NssolPlatypusInfrastructureStorageListResultInfo
     */
    'exceeded'?: boolean;
}
/**
 * テンプレートのアクセスレベル。
 * @export
 * @enum {string}
 */

export const NssolPlatypusInfrastructureTemplateAccessLevel = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type NssolPlatypusInfrastructureTemplateAccessLevel = typeof NssolPlatypusInfrastructureTemplateAccessLevel[keyof typeof NssolPlatypusInfrastructureTemplateAccessLevel];


/**
 * 
 * @export
 * @enum {string}
 */

export const NssolPlatypusInfrastructureTypesAuthServiceType = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type NssolPlatypusInfrastructureTypesAuthServiceType = typeof NssolPlatypusInfrastructureTypesAuthServiceType[keyof typeof NssolPlatypusInfrastructureTypesAuthServiceType];


/**
 * コンテナ種別
 * @export
 * @enum {string}
 */

export const NssolPlatypusInfrastructureTypesContainerType = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6
} as const;

export type NssolPlatypusInfrastructureTypesContainerType = typeof NssolPlatypusInfrastructureTypesContainerType[keyof typeof NssolPlatypusInfrastructureTypesContainerType];


/**
 * Git種別
 * @export
 * @enum {string}
 */

export const NssolPlatypusInfrastructureTypesGitServiceType = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type NssolPlatypusInfrastructureTypesGitServiceType = typeof NssolPlatypusInfrastructureTypesGitServiceType[keyof typeof NssolPlatypusInfrastructureTypesGitServiceType];


/**
 * メニュー種別
 * @export
 * @enum {string}
 */

export const NssolPlatypusInfrastructureTypesMenuType = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type NssolPlatypusInfrastructureTypesMenuType = typeof NssolPlatypusInfrastructureTypesMenuType[keyof typeof NssolPlatypusInfrastructureTypesMenuType];


/**
 * 
 * @export
 * @enum {string}
 */

export const NssolPlatypusInfrastructureTypesRegistryServiceType = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type NssolPlatypusInfrastructureTypesRegistryServiceType = typeof NssolPlatypusInfrastructureTypesRegistryServiceType[keyof typeof NssolPlatypusInfrastructureTypesRegistryServiceType];


/**
 * アップロード完了処理モデル
 * @export
 * @interface NssolPlatypusLogicModelsStorageLogicModelsCompleteMultiplePartUploadInputModel
 */
export interface NssolPlatypusLogicModelsStorageLogicModelsCompleteMultiplePartUploadInputModel {
    /**
     * 分割アップロード完了時の\'PartNumber+ETag\'
     * @type {Array<string>}
     * @memberof NssolPlatypusLogicModelsStorageLogicModelsCompleteMultiplePartUploadInputModel
     */
    'partETags': Array<string>;
    /**
     * 分割アップロードID
     * @type {string}
     * @memberof NssolPlatypusLogicModelsStorageLogicModelsCompleteMultiplePartUploadInputModel
     */
    'uploadId': string;
    /**
     * キー
     * @type {string}
     * @memberof NssolPlatypusLogicModelsStorageLogicModelsCompleteMultiplePartUploadInputModel
     */
    'key': string;
}
/**
 * 分割アップロード情報
 * @export
 * @interface NssolPlatypusLogicModelsStorageLogicModelsMultiPartUploadModel
 */
export interface NssolPlatypusLogicModelsStorageLogicModelsMultiPartUploadModel {
    /**
     * 分割URL
     * @type {Array<string>}
     * @memberof NssolPlatypusLogicModelsStorageLogicModelsMultiPartUploadModel
     */
    'uris'?: Array<string> | null;
    /**
     * 分割合計数
     * @type {number}
     * @memberof NssolPlatypusLogicModelsStorageLogicModelsMultiPartUploadModel
     */
    'partsSum'?: number;
    /**
     * アップロードID
     * @type {string}
     * @memberof NssolPlatypusLogicModelsStorageLogicModelsMultiPartUploadModel
     */
    'uploadId'?: string | null;
    /**
     * キー
     * @type {string}
     * @memberof NssolPlatypusLogicModelsStorageLogicModelsMultiPartUploadModel
     */
    'key'?: string | null;
    /**
     * ファイル名
     * @type {string}
     * @memberof NssolPlatypusLogicModelsStorageLogicModelsMultiPartUploadModel
     */
    'fileName'?: string | null;
    /**
     * 保存先パス
     * @type {string}
     * @memberof NssolPlatypusLogicModelsStorageLogicModelsMultiPartUploadModel
     */
    'storedPath'?: string | null;
}
/**
 * 
 * @export
 * @interface NssolPlatypusServiceModelsGitBranchModel
 */
export interface NssolPlatypusServiceModelsGitBranchModel {
    /**
     * 
     * @type {string}
     * @memberof NssolPlatypusServiceModelsGitBranchModel
     */
    'branchName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NssolPlatypusServiceModelsGitBranchModel
     */
    'commitId'?: string | null;
}
/**
 * コミット情報
 * @export
 * @interface NssolPlatypusServiceModelsGitCommitModel
 */
export interface NssolPlatypusServiceModelsGitCommitModel {
    /**
     * コミットID
     * @type {string}
     * @memberof NssolPlatypusServiceModelsGitCommitModel
     */
    'commitId'?: string | null;
    /**
     * コミッター名
     * @type {string}
     * @memberof NssolPlatypusServiceModelsGitCommitModel
     */
    'committerName'?: string | null;
    /**
     * コミット日時
     * @type {string}
     * @memberof NssolPlatypusServiceModelsGitCommitModel
     */
    'commitAt'?: string | null;
    /**
     * コミットコメント
     * @type {string}
     * @memberof NssolPlatypusServiceModelsGitCommitModel
     */
    'comment'?: string | null;
    /**
     * 文字列表現。
     * @type {string}
     * @memberof NssolPlatypusServiceModelsGitCommitModel
     */
    'display'?: string | null;
}
/**
 * リポジトリを表すクラス
 * @export
 * @interface NssolPlatypusServiceModelsGitRepositoryModel
 */
export interface NssolPlatypusServiceModelsGitRepositoryModel {
    /**
     * リポジトリのオーナー。
     * @type {string}
     * @memberof NssolPlatypusServiceModelsGitRepositoryModel
     */
    'owner'?: string | null;
    /**
     * リポジトリ名
     * @type {string}
     * @memberof NssolPlatypusServiceModelsGitRepositoryModel
     */
    'name'?: string | null;
    /**
     * リポジトリの表示名
     * @type {string}
     * @memberof NssolPlatypusServiceModelsGitRepositoryModel
     */
    'fullName'?: string | null;
}
/**
 * 
 * @export
 * @interface SystemCollectionsGenericKeyValuePair2
 */
export interface SystemCollectionsGenericKeyValuePair2 {
    /**
     * 
     * @type {string}
     * @memberof SystemCollectionsGenericKeyValuePair2
     */
    'key'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SystemCollectionsGenericKeyValuePair2
     */
    'value'?: string | null;
}
/**
 * 
 * @export
 * @interface SystemIOStream
 */
export interface SystemIOStream {
    /**
     * 
     * @type {boolean}
     * @memberof SystemIOStream
     */
    'canRead'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SystemIOStream
     */
    'canSeek'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SystemIOStream
     */
    'canTimeout'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SystemIOStream
     */
    'canWrite'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SystemIOStream
     */
    'length'?: number;
    /**
     * 
     * @type {number}
     * @memberof SystemIOStream
     */
    'position'?: number;
    /**
     * 
     * @type {number}
     * @memberof SystemIOStream
     */
    'readTimeout'?: number;
    /**
     * 
     * @type {number}
     * @memberof SystemIOStream
     */
    'writeTimeout'?: number;
}

/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary アクセス可能なAquariumのメニュー一覧をリスト形式で取得する。
         * @param {string} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountAquariumMenusListGet: async (lang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/account/aquarium/menus/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary アクセス可能なAquariumのメニュー一覧をツリー形式で取得する。
         * @param {string} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountAquariumMenusTreeGet: async (lang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/account/aquarium/menus/tree`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ログインユーザの表示名を変更する
         * @param {NssolPlatypusApiModelsAccountApiModelsDisplayNameInputModel} [nssolPlatypusApiModelsAccountApiModelsDisplayNameInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountDisplayNamePut: async (nssolPlatypusApiModelsAccountApiModelsDisplayNameInputModel?: NssolPlatypusApiModelsAccountApiModelsDisplayNameInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/account/displayName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsAccountApiModelsDisplayNameInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ログインユーザのアカウント情報を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 選択中のテナントにおけるGit情報を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountGitsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/account/gits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 選択中のテナントにおけるGitのトークン情報を更新する。
         * @param {NssolPlatypusApiModelsAccountApiModelsGitCredentialInputModel} [nssolPlatypusApiModelsAccountApiModelsGitCredentialInputModel] 更新内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountGitsPut: async (nssolPlatypusApiModelsAccountApiModelsGitCredentialInputModel?: NssolPlatypusApiModelsAccountApiModelsGitCredentialInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/account/gits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsAccountApiModelsGitCredentialInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ログインする
         * @param {NssolPlatypusApiModelsAccountApiModelsLoginInputModel} [nssolPlatypusApiModelsAccountApiModelsLoginInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountLoginPost: async (nssolPlatypusApiModelsAccountApiModelsLoginInputModel?: NssolPlatypusApiModelsAccountApiModelsLoginInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/account/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsAccountApiModelsLoginInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary アクセス可能なKQIのメニュー一覧をリスト形式で取得する。
         * @param {string} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountMenusListGet: async (lang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/account/menus/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary アクセス可能なKQIのメニュー一覧をツリー形式で取得する。
         * @param {string} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountMenusTreeGet: async (lang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/account/menus/tree`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ログインユーザのパスワードを変更する
         * @param {NssolPlatypusApiModelsAccountApiModelsPasswordInputModel} [nssolPlatypusApiModelsAccountApiModelsPasswordInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountPasswordPut: async (nssolPlatypusApiModelsAccountApiModelsPasswordInputModel?: NssolPlatypusApiModelsAccountApiModelsPasswordInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/account/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsAccountApiModelsPasswordInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ログインユーザのアカウント情報を変更する
         * @param {string} defaultTenant デフォルトテナント
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountPut: async (defaultTenant: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'defaultTenant' is not null or undefined
            assertParamExists('apiV2AccountPut', 'defaultTenant', defaultTenant)
            const localVarPath = `/api/v2/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (defaultTenant !== undefined) {
                localVarQueryParameter['DefaultTenant'] = defaultTenant;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 選択中のテナントにおけるレジストリ情報を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountRegistriesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/account/registries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 選択中のテナントにおけるレジストリのトークン情報を更新する。
         * @param {NssolPlatypusApiModelsAccountApiModelsRegistryCredentialInputModel} [nssolPlatypusApiModelsAccountApiModelsRegistryCredentialInputModel] 更新内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountRegistriesPut: async (nssolPlatypusApiModelsAccountApiModelsRegistryCredentialInputModel?: NssolPlatypusApiModelsAccountApiModelsRegistryCredentialInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/account/registries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsAccountApiModelsRegistryCredentialInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 現在の認証情報を使用し、新規にアクセストークンを取得する
         * @param {number} tenantId テナントID
         * @param {NssolPlatypusApiModelsAccountApiModelsSwitchTenantInputModel} [nssolPlatypusApiModelsAccountApiModelsSwitchTenantInputModel] テナント切替用入力モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountTenantsTenantIdTokenPost: async (tenantId: number, nssolPlatypusApiModelsAccountApiModelsSwitchTenantInputModel?: NssolPlatypusApiModelsAccountApiModelsSwitchTenantInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('apiV2AccountTenantsTenantIdTokenPost', 'tenantId', tenantId)
            const localVarPath = `/api/v2/account/tenants/{tenantId}/token`
                .replace(`{${"tenantId"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsAccountApiModelsSwitchTenantInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary WebHook情報を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountWebhookSlackGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/account/webhook/slack`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary WebHook情報を更新する
         * @param {NssolPlatypusApiModelsAccountApiModelsWebhookModel} [nssolPlatypusApiModelsAccountApiModelsWebhookModel] Webhook情報モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountWebhookSlackPut: async (nssolPlatypusApiModelsAccountApiModelsWebhookModel?: NssolPlatypusApiModelsAccountApiModelsWebhookModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/account/webhook/slack`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsAccountApiModelsWebhookModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary テスト通知を送信する
         * @param {NssolPlatypusApiModelsAccountApiModelsWebhookModel} [nssolPlatypusApiModelsAccountApiModelsWebhookModel] Webhook情報モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountWebhookSlackTestPost: async (nssolPlatypusApiModelsAccountApiModelsWebhookModel?: NssolPlatypusApiModelsAccountApiModelsWebhookModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/account/webhook/slack/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsAccountApiModelsWebhookModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary アクセス可能なAquariumのメニュー一覧をリスト形式で取得する。
         * @param {string} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AccountAquariumMenusListGet(lang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsAccountApiModelsMenuListOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AccountAquariumMenusListGet(lang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary アクセス可能なAquariumのメニュー一覧をツリー形式で取得する。
         * @param {string} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AccountAquariumMenusTreeGet(lang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsAccountApiModelsMenuTreeOutputModelMenuGroup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AccountAquariumMenusTreeGet(lang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ログインユーザの表示名を変更する
         * @param {NssolPlatypusApiModelsAccountApiModelsDisplayNameInputModel} [nssolPlatypusApiModelsAccountApiModelsDisplayNameInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AccountDisplayNamePut(nssolPlatypusApiModelsAccountApiModelsDisplayNameInputModel?: NssolPlatypusApiModelsAccountApiModelsDisplayNameInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AccountDisplayNamePut(nssolPlatypusApiModelsAccountApiModelsDisplayNameInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ログインユーザのアカウント情報を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AccountGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsAccountApiModelsAccountOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AccountGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 選択中のテナントにおけるGit情報を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AccountGitsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsAccountApiModelsGitInfoOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AccountGitsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 選択中のテナントにおけるGitのトークン情報を更新する。
         * @param {NssolPlatypusApiModelsAccountApiModelsGitCredentialInputModel} [nssolPlatypusApiModelsAccountApiModelsGitCredentialInputModel] 更新内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AccountGitsPut(nssolPlatypusApiModelsAccountApiModelsGitCredentialInputModel?: NssolPlatypusApiModelsAccountApiModelsGitCredentialInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsAccountApiModelsGitCredentialOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AccountGitsPut(nssolPlatypusApiModelsAccountApiModelsGitCredentialInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ログインする
         * @param {NssolPlatypusApiModelsAccountApiModelsLoginInputModel} [nssolPlatypusApiModelsAccountApiModelsLoginInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AccountLoginPost(nssolPlatypusApiModelsAccountApiModelsLoginInputModel?: NssolPlatypusApiModelsAccountApiModelsLoginInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsAccountApiModelsLoginOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AccountLoginPost(nssolPlatypusApiModelsAccountApiModelsLoginInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary アクセス可能なKQIのメニュー一覧をリスト形式で取得する。
         * @param {string} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AccountMenusListGet(lang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsAccountApiModelsMenuListOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AccountMenusListGet(lang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary アクセス可能なKQIのメニュー一覧をツリー形式で取得する。
         * @param {string} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AccountMenusTreeGet(lang?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsAccountApiModelsMenuTreeOutputModelMenuGroup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AccountMenusTreeGet(lang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ログインユーザのパスワードを変更する
         * @param {NssolPlatypusApiModelsAccountApiModelsPasswordInputModel} [nssolPlatypusApiModelsAccountApiModelsPasswordInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AccountPasswordPut(nssolPlatypusApiModelsAccountApiModelsPasswordInputModel?: NssolPlatypusApiModelsAccountApiModelsPasswordInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AccountPasswordPut(nssolPlatypusApiModelsAccountApiModelsPasswordInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ログインユーザのアカウント情報を変更する
         * @param {string} defaultTenant デフォルトテナント
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AccountPut(defaultTenant: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsAccountApiModelsAccountOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AccountPut(defaultTenant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 選択中のテナントにおけるレジストリ情報を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AccountRegistriesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsAccountApiModelsRegistryInfoOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AccountRegistriesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 選択中のテナントにおけるレジストリのトークン情報を更新する。
         * @param {NssolPlatypusApiModelsAccountApiModelsRegistryCredentialInputModel} [nssolPlatypusApiModelsAccountApiModelsRegistryCredentialInputModel] 更新内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AccountRegistriesPut(nssolPlatypusApiModelsAccountApiModelsRegistryCredentialInputModel?: NssolPlatypusApiModelsAccountApiModelsRegistryCredentialInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsAccountApiModelsRegistryCredentialOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AccountRegistriesPut(nssolPlatypusApiModelsAccountApiModelsRegistryCredentialInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 現在の認証情報を使用し、新規にアクセストークンを取得する
         * @param {number} tenantId テナントID
         * @param {NssolPlatypusApiModelsAccountApiModelsSwitchTenantInputModel} [nssolPlatypusApiModelsAccountApiModelsSwitchTenantInputModel] テナント切替用入力モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AccountTenantsTenantIdTokenPost(tenantId: number, nssolPlatypusApiModelsAccountApiModelsSwitchTenantInputModel?: NssolPlatypusApiModelsAccountApiModelsSwitchTenantInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsAccountApiModelsLoginOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AccountTenantsTenantIdTokenPost(tenantId, nssolPlatypusApiModelsAccountApiModelsSwitchTenantInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary WebHook情報を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AccountWebhookSlackGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsAccountApiModelsWebhookModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AccountWebhookSlackGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary WebHook情報を更新する
         * @param {NssolPlatypusApiModelsAccountApiModelsWebhookModel} [nssolPlatypusApiModelsAccountApiModelsWebhookModel] Webhook情報モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AccountWebhookSlackPut(nssolPlatypusApiModelsAccountApiModelsWebhookModel?: NssolPlatypusApiModelsAccountApiModelsWebhookModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AccountWebhookSlackPut(nssolPlatypusApiModelsAccountApiModelsWebhookModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary テスト通知を送信する
         * @param {NssolPlatypusApiModelsAccountApiModelsWebhookModel} [nssolPlatypusApiModelsAccountApiModelsWebhookModel] Webhook情報モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AccountWebhookSlackTestPost(nssolPlatypusApiModelsAccountApiModelsWebhookModel?: NssolPlatypusApiModelsAccountApiModelsWebhookModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AccountWebhookSlackTestPost(nssolPlatypusApiModelsAccountApiModelsWebhookModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * 
         * @summary アクセス可能なAquariumのメニュー一覧をリスト形式で取得する。
         * @param {string} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountAquariumMenusListGet(lang?: string, options?: any): AxiosPromise<Array<NssolPlatypusApiModelsAccountApiModelsMenuListOutputModel>> {
            return localVarFp.apiV2AccountAquariumMenusListGet(lang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary アクセス可能なAquariumのメニュー一覧をツリー形式で取得する。
         * @param {string} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountAquariumMenusTreeGet(lang?: string, options?: any): AxiosPromise<Array<NssolPlatypusApiModelsAccountApiModelsMenuTreeOutputModelMenuGroup>> {
            return localVarFp.apiV2AccountAquariumMenusTreeGet(lang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ログインユーザの表示名を変更する
         * @param {NssolPlatypusApiModelsAccountApiModelsDisplayNameInputModel} [nssolPlatypusApiModelsAccountApiModelsDisplayNameInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountDisplayNamePut(nssolPlatypusApiModelsAccountApiModelsDisplayNameInputModel?: NssolPlatypusApiModelsAccountApiModelsDisplayNameInputModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2AccountDisplayNamePut(nssolPlatypusApiModelsAccountApiModelsDisplayNameInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ログインユーザのアカウント情報を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountGet(options?: any): AxiosPromise<NssolPlatypusApiModelsAccountApiModelsAccountOutputModel> {
            return localVarFp.apiV2AccountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 選択中のテナントにおけるGit情報を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountGitsGet(options?: any): AxiosPromise<NssolPlatypusApiModelsAccountApiModelsGitInfoOutputModel> {
            return localVarFp.apiV2AccountGitsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 選択中のテナントにおけるGitのトークン情報を更新する。
         * @param {NssolPlatypusApiModelsAccountApiModelsGitCredentialInputModel} [nssolPlatypusApiModelsAccountApiModelsGitCredentialInputModel] 更新内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountGitsPut(nssolPlatypusApiModelsAccountApiModelsGitCredentialInputModel?: NssolPlatypusApiModelsAccountApiModelsGitCredentialInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsAccountApiModelsGitCredentialOutputModel> {
            return localVarFp.apiV2AccountGitsPut(nssolPlatypusApiModelsAccountApiModelsGitCredentialInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ログインする
         * @param {NssolPlatypusApiModelsAccountApiModelsLoginInputModel} [nssolPlatypusApiModelsAccountApiModelsLoginInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountLoginPost(nssolPlatypusApiModelsAccountApiModelsLoginInputModel?: NssolPlatypusApiModelsAccountApiModelsLoginInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsAccountApiModelsLoginOutputModel> {
            return localVarFp.apiV2AccountLoginPost(nssolPlatypusApiModelsAccountApiModelsLoginInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary アクセス可能なKQIのメニュー一覧をリスト形式で取得する。
         * @param {string} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountMenusListGet(lang?: string, options?: any): AxiosPromise<Array<NssolPlatypusApiModelsAccountApiModelsMenuListOutputModel>> {
            return localVarFp.apiV2AccountMenusListGet(lang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary アクセス可能なKQIのメニュー一覧をツリー形式で取得する。
         * @param {string} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountMenusTreeGet(lang?: string, options?: any): AxiosPromise<Array<NssolPlatypusApiModelsAccountApiModelsMenuTreeOutputModelMenuGroup>> {
            return localVarFp.apiV2AccountMenusTreeGet(lang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ログインユーザのパスワードを変更する
         * @param {NssolPlatypusApiModelsAccountApiModelsPasswordInputModel} [nssolPlatypusApiModelsAccountApiModelsPasswordInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountPasswordPut(nssolPlatypusApiModelsAccountApiModelsPasswordInputModel?: NssolPlatypusApiModelsAccountApiModelsPasswordInputModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2AccountPasswordPut(nssolPlatypusApiModelsAccountApiModelsPasswordInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ログインユーザのアカウント情報を変更する
         * @param {string} defaultTenant デフォルトテナント
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountPut(defaultTenant: string, options?: any): AxiosPromise<NssolPlatypusApiModelsAccountApiModelsAccountOutputModel> {
            return localVarFp.apiV2AccountPut(defaultTenant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 選択中のテナントにおけるレジストリ情報を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountRegistriesGet(options?: any): AxiosPromise<NssolPlatypusApiModelsAccountApiModelsRegistryInfoOutputModel> {
            return localVarFp.apiV2AccountRegistriesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 選択中のテナントにおけるレジストリのトークン情報を更新する。
         * @param {NssolPlatypusApiModelsAccountApiModelsRegistryCredentialInputModel} [nssolPlatypusApiModelsAccountApiModelsRegistryCredentialInputModel] 更新内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountRegistriesPut(nssolPlatypusApiModelsAccountApiModelsRegistryCredentialInputModel?: NssolPlatypusApiModelsAccountApiModelsRegistryCredentialInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsAccountApiModelsRegistryCredentialOutputModel> {
            return localVarFp.apiV2AccountRegistriesPut(nssolPlatypusApiModelsAccountApiModelsRegistryCredentialInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 現在の認証情報を使用し、新規にアクセストークンを取得する
         * @param {number} tenantId テナントID
         * @param {NssolPlatypusApiModelsAccountApiModelsSwitchTenantInputModel} [nssolPlatypusApiModelsAccountApiModelsSwitchTenantInputModel] テナント切替用入力モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountTenantsTenantIdTokenPost(tenantId: number, nssolPlatypusApiModelsAccountApiModelsSwitchTenantInputModel?: NssolPlatypusApiModelsAccountApiModelsSwitchTenantInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsAccountApiModelsLoginOutputModel> {
            return localVarFp.apiV2AccountTenantsTenantIdTokenPost(tenantId, nssolPlatypusApiModelsAccountApiModelsSwitchTenantInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary WebHook情報を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountWebhookSlackGet(options?: any): AxiosPromise<NssolPlatypusApiModelsAccountApiModelsWebhookModel> {
            return localVarFp.apiV2AccountWebhookSlackGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary WebHook情報を更新する
         * @param {NssolPlatypusApiModelsAccountApiModelsWebhookModel} [nssolPlatypusApiModelsAccountApiModelsWebhookModel] Webhook情報モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountWebhookSlackPut(nssolPlatypusApiModelsAccountApiModelsWebhookModel?: NssolPlatypusApiModelsAccountApiModelsWebhookModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2AccountWebhookSlackPut(nssolPlatypusApiModelsAccountApiModelsWebhookModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary テスト通知を送信する
         * @param {NssolPlatypusApiModelsAccountApiModelsWebhookModel} [nssolPlatypusApiModelsAccountApiModelsWebhookModel] Webhook情報モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AccountWebhookSlackTestPost(nssolPlatypusApiModelsAccountApiModelsWebhookModel?: NssolPlatypusApiModelsAccountApiModelsWebhookModel, options?: any): AxiosPromise<boolean> {
            return localVarFp.apiV2AccountWebhookSlackTestPost(nssolPlatypusApiModelsAccountApiModelsWebhookModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV2AccountAquariumMenusListGet operation in AccountApi.
 * @export
 * @interface AccountApiApiV2AccountAquariumMenusListGetRequest
 */
export interface AccountApiApiV2AccountAquariumMenusListGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountApiApiV2AccountAquariumMenusListGet
     */
    readonly lang?: string
}

/**
 * Request parameters for apiV2AccountAquariumMenusTreeGet operation in AccountApi.
 * @export
 * @interface AccountApiApiV2AccountAquariumMenusTreeGetRequest
 */
export interface AccountApiApiV2AccountAquariumMenusTreeGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountApiApiV2AccountAquariumMenusTreeGet
     */
    readonly lang?: string
}

/**
 * Request parameters for apiV2AccountDisplayNamePut operation in AccountApi.
 * @export
 * @interface AccountApiApiV2AccountDisplayNamePutRequest
 */
export interface AccountApiApiV2AccountDisplayNamePutRequest {
    /**
     * 
     * @type {NssolPlatypusApiModelsAccountApiModelsDisplayNameInputModel}
     * @memberof AccountApiApiV2AccountDisplayNamePut
     */
    readonly nssolPlatypusApiModelsAccountApiModelsDisplayNameInputModel?: NssolPlatypusApiModelsAccountApiModelsDisplayNameInputModel
}

/**
 * Request parameters for apiV2AccountGitsPut operation in AccountApi.
 * @export
 * @interface AccountApiApiV2AccountGitsPutRequest
 */
export interface AccountApiApiV2AccountGitsPutRequest {
    /**
     * 更新内容
     * @type {NssolPlatypusApiModelsAccountApiModelsGitCredentialInputModel}
     * @memberof AccountApiApiV2AccountGitsPut
     */
    readonly nssolPlatypusApiModelsAccountApiModelsGitCredentialInputModel?: NssolPlatypusApiModelsAccountApiModelsGitCredentialInputModel
}

/**
 * Request parameters for apiV2AccountLoginPost operation in AccountApi.
 * @export
 * @interface AccountApiApiV2AccountLoginPostRequest
 */
export interface AccountApiApiV2AccountLoginPostRequest {
    /**
     * 
     * @type {NssolPlatypusApiModelsAccountApiModelsLoginInputModel}
     * @memberof AccountApiApiV2AccountLoginPost
     */
    readonly nssolPlatypusApiModelsAccountApiModelsLoginInputModel?: NssolPlatypusApiModelsAccountApiModelsLoginInputModel
}

/**
 * Request parameters for apiV2AccountMenusListGet operation in AccountApi.
 * @export
 * @interface AccountApiApiV2AccountMenusListGetRequest
 */
export interface AccountApiApiV2AccountMenusListGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountApiApiV2AccountMenusListGet
     */
    readonly lang?: string
}

/**
 * Request parameters for apiV2AccountMenusTreeGet operation in AccountApi.
 * @export
 * @interface AccountApiApiV2AccountMenusTreeGetRequest
 */
export interface AccountApiApiV2AccountMenusTreeGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountApiApiV2AccountMenusTreeGet
     */
    readonly lang?: string
}

/**
 * Request parameters for apiV2AccountPasswordPut operation in AccountApi.
 * @export
 * @interface AccountApiApiV2AccountPasswordPutRequest
 */
export interface AccountApiApiV2AccountPasswordPutRequest {
    /**
     * 
     * @type {NssolPlatypusApiModelsAccountApiModelsPasswordInputModel}
     * @memberof AccountApiApiV2AccountPasswordPut
     */
    readonly nssolPlatypusApiModelsAccountApiModelsPasswordInputModel?: NssolPlatypusApiModelsAccountApiModelsPasswordInputModel
}

/**
 * Request parameters for apiV2AccountPut operation in AccountApi.
 * @export
 * @interface AccountApiApiV2AccountPutRequest
 */
export interface AccountApiApiV2AccountPutRequest {
    /**
     * デフォルトテナント
     * @type {string}
     * @memberof AccountApiApiV2AccountPut
     */
    readonly defaultTenant: string
}

/**
 * Request parameters for apiV2AccountRegistriesPut operation in AccountApi.
 * @export
 * @interface AccountApiApiV2AccountRegistriesPutRequest
 */
export interface AccountApiApiV2AccountRegistriesPutRequest {
    /**
     * 更新内容
     * @type {NssolPlatypusApiModelsAccountApiModelsRegistryCredentialInputModel}
     * @memberof AccountApiApiV2AccountRegistriesPut
     */
    readonly nssolPlatypusApiModelsAccountApiModelsRegistryCredentialInputModel?: NssolPlatypusApiModelsAccountApiModelsRegistryCredentialInputModel
}

/**
 * Request parameters for apiV2AccountTenantsTenantIdTokenPost operation in AccountApi.
 * @export
 * @interface AccountApiApiV2AccountTenantsTenantIdTokenPostRequest
 */
export interface AccountApiApiV2AccountTenantsTenantIdTokenPostRequest {
    /**
     * テナントID
     * @type {number}
     * @memberof AccountApiApiV2AccountTenantsTenantIdTokenPost
     */
    readonly tenantId: number

    /**
     * テナント切替用入力モデル
     * @type {NssolPlatypusApiModelsAccountApiModelsSwitchTenantInputModel}
     * @memberof AccountApiApiV2AccountTenantsTenantIdTokenPost
     */
    readonly nssolPlatypusApiModelsAccountApiModelsSwitchTenantInputModel?: NssolPlatypusApiModelsAccountApiModelsSwitchTenantInputModel
}

/**
 * Request parameters for apiV2AccountWebhookSlackPut operation in AccountApi.
 * @export
 * @interface AccountApiApiV2AccountWebhookSlackPutRequest
 */
export interface AccountApiApiV2AccountWebhookSlackPutRequest {
    /**
     * Webhook情報モデル
     * @type {NssolPlatypusApiModelsAccountApiModelsWebhookModel}
     * @memberof AccountApiApiV2AccountWebhookSlackPut
     */
    readonly nssolPlatypusApiModelsAccountApiModelsWebhookModel?: NssolPlatypusApiModelsAccountApiModelsWebhookModel
}

/**
 * Request parameters for apiV2AccountWebhookSlackTestPost operation in AccountApi.
 * @export
 * @interface AccountApiApiV2AccountWebhookSlackTestPostRequest
 */
export interface AccountApiApiV2AccountWebhookSlackTestPostRequest {
    /**
     * Webhook情報モデル
     * @type {NssolPlatypusApiModelsAccountApiModelsWebhookModel}
     * @memberof AccountApiApiV2AccountWebhookSlackTestPost
     */
    readonly nssolPlatypusApiModelsAccountApiModelsWebhookModel?: NssolPlatypusApiModelsAccountApiModelsWebhookModel
}

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * 
     * @summary アクセス可能なAquariumのメニュー一覧をリスト形式で取得する。
     * @param {AccountApiApiV2AccountAquariumMenusListGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiV2AccountAquariumMenusListGet(requestParameters: AccountApiApiV2AccountAquariumMenusListGetRequest = {}, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiV2AccountAquariumMenusListGet(requestParameters.lang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary アクセス可能なAquariumのメニュー一覧をツリー形式で取得する。
     * @param {AccountApiApiV2AccountAquariumMenusTreeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiV2AccountAquariumMenusTreeGet(requestParameters: AccountApiApiV2AccountAquariumMenusTreeGetRequest = {}, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiV2AccountAquariumMenusTreeGet(requestParameters.lang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ログインユーザの表示名を変更する
     * @param {AccountApiApiV2AccountDisplayNamePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiV2AccountDisplayNamePut(requestParameters: AccountApiApiV2AccountDisplayNamePutRequest = {}, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiV2AccountDisplayNamePut(requestParameters.nssolPlatypusApiModelsAccountApiModelsDisplayNameInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ログインユーザのアカウント情報を取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiV2AccountGet(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiV2AccountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 選択中のテナントにおけるGit情報を取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiV2AccountGitsGet(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiV2AccountGitsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 選択中のテナントにおけるGitのトークン情報を更新する。
     * @param {AccountApiApiV2AccountGitsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiV2AccountGitsPut(requestParameters: AccountApiApiV2AccountGitsPutRequest = {}, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiV2AccountGitsPut(requestParameters.nssolPlatypusApiModelsAccountApiModelsGitCredentialInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ログインする
     * @param {AccountApiApiV2AccountLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiV2AccountLoginPost(requestParameters: AccountApiApiV2AccountLoginPostRequest = {}, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiV2AccountLoginPost(requestParameters.nssolPlatypusApiModelsAccountApiModelsLoginInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary アクセス可能なKQIのメニュー一覧をリスト形式で取得する。
     * @param {AccountApiApiV2AccountMenusListGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiV2AccountMenusListGet(requestParameters: AccountApiApiV2AccountMenusListGetRequest = {}, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiV2AccountMenusListGet(requestParameters.lang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary アクセス可能なKQIのメニュー一覧をツリー形式で取得する。
     * @param {AccountApiApiV2AccountMenusTreeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiV2AccountMenusTreeGet(requestParameters: AccountApiApiV2AccountMenusTreeGetRequest = {}, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiV2AccountMenusTreeGet(requestParameters.lang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ログインユーザのパスワードを変更する
     * @param {AccountApiApiV2AccountPasswordPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiV2AccountPasswordPut(requestParameters: AccountApiApiV2AccountPasswordPutRequest = {}, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiV2AccountPasswordPut(requestParameters.nssolPlatypusApiModelsAccountApiModelsPasswordInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ログインユーザのアカウント情報を変更する
     * @param {AccountApiApiV2AccountPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiV2AccountPut(requestParameters: AccountApiApiV2AccountPutRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiV2AccountPut(requestParameters.defaultTenant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 選択中のテナントにおけるレジストリ情報を取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiV2AccountRegistriesGet(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiV2AccountRegistriesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 選択中のテナントにおけるレジストリのトークン情報を更新する。
     * @param {AccountApiApiV2AccountRegistriesPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiV2AccountRegistriesPut(requestParameters: AccountApiApiV2AccountRegistriesPutRequest = {}, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiV2AccountRegistriesPut(requestParameters.nssolPlatypusApiModelsAccountApiModelsRegistryCredentialInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 現在の認証情報を使用し、新規にアクセストークンを取得する
     * @param {AccountApiApiV2AccountTenantsTenantIdTokenPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiV2AccountTenantsTenantIdTokenPost(requestParameters: AccountApiApiV2AccountTenantsTenantIdTokenPostRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiV2AccountTenantsTenantIdTokenPost(requestParameters.tenantId, requestParameters.nssolPlatypusApiModelsAccountApiModelsSwitchTenantInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary WebHook情報を取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiV2AccountWebhookSlackGet(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiV2AccountWebhookSlackGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary WebHook情報を更新する
     * @param {AccountApiApiV2AccountWebhookSlackPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiV2AccountWebhookSlackPut(requestParameters: AccountApiApiV2AccountWebhookSlackPutRequest = {}, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiV2AccountWebhookSlackPut(requestParameters.nssolPlatypusApiModelsAccountApiModelsWebhookModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary テスト通知を送信する
     * @param {AccountApiApiV2AccountWebhookSlackTestPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiV2AccountWebhookSlackTestPost(requestParameters: AccountApiApiV2AccountWebhookSlackTestPostRequest = {}, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiV2AccountWebhookSlackTestPost(requestParameters.nssolPlatypusApiModelsAccountApiModelsWebhookModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AquariumDataSetApi - axios parameter creator
 * @export
 */
export const AquariumDataSetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 指定された条件でページングされた状態で、アクアリウムデータセット一覧を取得する
         * @param {string} [id] IDの検索条件。  比較文字列＋数値の形式。
         * @param {string} [name] 名前
         * @param {string} [createdAt] 作成時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
         * @param {string} [createdBy] 作成者
         * @param {string} [modifiedAt] 更新時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
         * @param {string} [modifiedBy] 更新者
         * @param {number} [perPage] 表示件数。指定がない場合は上限(1000件)。
         * @param {number} [page] ページ番号。デフォルトは1。
         * @param {boolean} [withTotal] 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AquariumDatasetsGet: async (id?: string, name?: string, createdAt?: string, createdBy?: string, modifiedAt?: string, modifiedBy?: string, perPage?: number, page?: number, withTotal?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/aquarium/datasets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (createdAt !== undefined) {
                localVarQueryParameter['CreatedAt'] = createdAt;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['CreatedBy'] = createdBy;
            }

            if (modifiedAt !== undefined) {
                localVarQueryParameter['ModifiedAt'] = modifiedAt;
            }

            if (modifiedBy !== undefined) {
                localVarQueryParameter['ModifiedBy'] = modifiedBy;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (withTotal !== undefined) {
                localVarQueryParameter['withTotal'] = withTotal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary アクアリウムデータセットを削除する
         * @param {number} id アクアリウムデータセットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AquariumDatasetsIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AquariumDatasetsIdDelete', 'id', id)
            const localVarPath = `/api/v2/aquarium/datasets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary アクアリウムデータセットバージョン一覧を取得する
         * @param {number} id アクアリウムデータセットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AquariumDatasetsIdVersionsGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AquariumDatasetsIdVersionsGet', 'id', id)
            const localVarPath = `/api/v2/aquarium/datasets/{id}/versions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary アクアリウムデータセットバージョンを作成する
         * @param {number} id アクアリウムデータセットID
         * @param {NssolPlatypusApiModelsAquariumDataSetApiModelsVersionCreateInputModel} [nssolPlatypusApiModelsAquariumDataSetApiModelsVersionCreateInputModel] アクアリウムデータセットバージョン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AquariumDatasetsIdVersionsPost: async (id: number, nssolPlatypusApiModelsAquariumDataSetApiModelsVersionCreateInputModel?: NssolPlatypusApiModelsAquariumDataSetApiModelsVersionCreateInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AquariumDatasetsIdVersionsPost', 'id', id)
            const localVarPath = `/api/v2/aquarium/datasets/{id}/versions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsAquariumDataSetApiModelsVersionCreateInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary アクアリウムデータセットバージョンを削除する
         * @param {number} id アクアリウムデータセットID
         * @param {number} versionId アクアリウムデータセットバージョンID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AquariumDatasetsIdVersionsVersionIdDelete: async (id: number, versionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AquariumDatasetsIdVersionsVersionIdDelete', 'id', id)
            // verify required parameter 'versionId' is not null or undefined
            assertParamExists('apiV2AquariumDatasetsIdVersionsVersionIdDelete', 'versionId', versionId)
            const localVarPath = `/api/v2/aquarium/datasets/{id}/versions/{versionId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"versionId"}}`, encodeURIComponent(String(versionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary アクアリウムデータセットバージョンを取得する
         * @param {number} id アクアリウムデータセットID
         * @param {number} versionId アクアリウムデータセットバージョンID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AquariumDatasetsIdVersionsVersionIdGet: async (id: number, versionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AquariumDatasetsIdVersionsVersionIdGet', 'id', id)
            // verify required parameter 'versionId' is not null or undefined
            assertParamExists('apiV2AquariumDatasetsIdVersionsVersionIdGet', 'versionId', versionId)
            const localVarPath = `/api/v2/aquarium/datasets/{id}/versions/{versionId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"versionId"}}`, encodeURIComponent(String(versionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary アクアリウムデータセットを作成する
         * @param {NssolPlatypusApiModelsAquariumDataSetApiModelsCreateInputModel} [nssolPlatypusApiModelsAquariumDataSetApiModelsCreateInputModel] アクアリウムデータセット
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AquariumDatasetsPost: async (nssolPlatypusApiModelsAquariumDataSetApiModelsCreateInputModel?: NssolPlatypusApiModelsAquariumDataSetApiModelsCreateInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/aquarium/datasets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsAquariumDataSetApiModelsCreateInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AquariumDataSetApi - functional programming interface
 * @export
 */
export const AquariumDataSetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AquariumDataSetApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 指定された条件でページングされた状態で、アクアリウムデータセット一覧を取得する
         * @param {string} [id] IDの検索条件。  比較文字列＋数値の形式。
         * @param {string} [name] 名前
         * @param {string} [createdAt] 作成時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
         * @param {string} [createdBy] 作成者
         * @param {string} [modifiedAt] 更新時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
         * @param {string} [modifiedBy] 更新者
         * @param {number} [perPage] 表示件数。指定がない場合は上限(1000件)。
         * @param {number} [page] ページ番号。デフォルトは1。
         * @param {boolean} [withTotal] 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AquariumDatasetsGet(id?: string, name?: string, createdAt?: string, createdBy?: string, modifiedAt?: string, modifiedBy?: string, perPage?: number, page?: number, withTotal?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsAquariumDataSetApiModelsIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AquariumDatasetsGet(id, name, createdAt, createdBy, modifiedAt, modifiedBy, perPage, page, withTotal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary アクアリウムデータセットを削除する
         * @param {number} id アクアリウムデータセットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AquariumDatasetsIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AquariumDatasetsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary アクアリウムデータセットバージョン一覧を取得する
         * @param {number} id アクアリウムデータセットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AquariumDatasetsIdVersionsGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsAquariumDataSetApiModelsVersionIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AquariumDatasetsIdVersionsGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary アクアリウムデータセットバージョンを作成する
         * @param {number} id アクアリウムデータセットID
         * @param {NssolPlatypusApiModelsAquariumDataSetApiModelsVersionCreateInputModel} [nssolPlatypusApiModelsAquariumDataSetApiModelsVersionCreateInputModel] アクアリウムデータセットバージョン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AquariumDatasetsIdVersionsPost(id: number, nssolPlatypusApiModelsAquariumDataSetApiModelsVersionCreateInputModel?: NssolPlatypusApiModelsAquariumDataSetApiModelsVersionCreateInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsAquariumDataSetApiModelsVersionIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AquariumDatasetsIdVersionsPost(id, nssolPlatypusApiModelsAquariumDataSetApiModelsVersionCreateInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary アクアリウムデータセットバージョンを削除する
         * @param {number} id アクアリウムデータセットID
         * @param {number} versionId アクアリウムデータセットバージョンID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AquariumDatasetsIdVersionsVersionIdDelete(id: number, versionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AquariumDatasetsIdVersionsVersionIdDelete(id, versionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary アクアリウムデータセットバージョンを取得する
         * @param {number} id アクアリウムデータセットID
         * @param {number} versionId アクアリウムデータセットバージョンID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AquariumDatasetsIdVersionsVersionIdGet(id: number, versionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsAquariumDataSetApiModelsVersionDetailsOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AquariumDatasetsIdVersionsVersionIdGet(id, versionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary アクアリウムデータセットを作成する
         * @param {NssolPlatypusApiModelsAquariumDataSetApiModelsCreateInputModel} [nssolPlatypusApiModelsAquariumDataSetApiModelsCreateInputModel] アクアリウムデータセット
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AquariumDatasetsPost(nssolPlatypusApiModelsAquariumDataSetApiModelsCreateInputModel?: NssolPlatypusApiModelsAquariumDataSetApiModelsCreateInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsAquariumDataSetApiModelsIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AquariumDatasetsPost(nssolPlatypusApiModelsAquariumDataSetApiModelsCreateInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AquariumDataSetApi - factory interface
 * @export
 */
export const AquariumDataSetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AquariumDataSetApiFp(configuration)
    return {
        /**
         * 
         * @summary 指定された条件でページングされた状態で、アクアリウムデータセット一覧を取得する
         * @param {string} [id] IDの検索条件。  比較文字列＋数値の形式。
         * @param {string} [name] 名前
         * @param {string} [createdAt] 作成時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
         * @param {string} [createdBy] 作成者
         * @param {string} [modifiedAt] 更新時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
         * @param {string} [modifiedBy] 更新者
         * @param {number} [perPage] 表示件数。指定がない場合は上限(1000件)。
         * @param {number} [page] ページ番号。デフォルトは1。
         * @param {boolean} [withTotal] 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AquariumDatasetsGet(id?: string, name?: string, createdAt?: string, createdBy?: string, modifiedAt?: string, modifiedBy?: string, perPage?: number, page?: number, withTotal?: boolean, options?: any): AxiosPromise<Array<NssolPlatypusApiModelsAquariumDataSetApiModelsIndexOutputModel>> {
            return localVarFp.apiV2AquariumDatasetsGet(id, name, createdAt, createdBy, modifiedAt, modifiedBy, perPage, page, withTotal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary アクアリウムデータセットを削除する
         * @param {number} id アクアリウムデータセットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AquariumDatasetsIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2AquariumDatasetsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary アクアリウムデータセットバージョン一覧を取得する
         * @param {number} id アクアリウムデータセットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AquariumDatasetsIdVersionsGet(id: number, options?: any): AxiosPromise<Array<NssolPlatypusApiModelsAquariumDataSetApiModelsVersionIndexOutputModel>> {
            return localVarFp.apiV2AquariumDatasetsIdVersionsGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary アクアリウムデータセットバージョンを作成する
         * @param {number} id アクアリウムデータセットID
         * @param {NssolPlatypusApiModelsAquariumDataSetApiModelsVersionCreateInputModel} [nssolPlatypusApiModelsAquariumDataSetApiModelsVersionCreateInputModel] アクアリウムデータセットバージョン
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AquariumDatasetsIdVersionsPost(id: number, nssolPlatypusApiModelsAquariumDataSetApiModelsVersionCreateInputModel?: NssolPlatypusApiModelsAquariumDataSetApiModelsVersionCreateInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsAquariumDataSetApiModelsVersionIndexOutputModel> {
            return localVarFp.apiV2AquariumDatasetsIdVersionsPost(id, nssolPlatypusApiModelsAquariumDataSetApiModelsVersionCreateInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary アクアリウムデータセットバージョンを削除する
         * @param {number} id アクアリウムデータセットID
         * @param {number} versionId アクアリウムデータセットバージョンID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AquariumDatasetsIdVersionsVersionIdDelete(id: number, versionId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2AquariumDatasetsIdVersionsVersionIdDelete(id, versionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary アクアリウムデータセットバージョンを取得する
         * @param {number} id アクアリウムデータセットID
         * @param {number} versionId アクアリウムデータセットバージョンID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AquariumDatasetsIdVersionsVersionIdGet(id: number, versionId: number, options?: any): AxiosPromise<NssolPlatypusApiModelsAquariumDataSetApiModelsVersionDetailsOutputModel> {
            return localVarFp.apiV2AquariumDatasetsIdVersionsVersionIdGet(id, versionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary アクアリウムデータセットを作成する
         * @param {NssolPlatypusApiModelsAquariumDataSetApiModelsCreateInputModel} [nssolPlatypusApiModelsAquariumDataSetApiModelsCreateInputModel] アクアリウムデータセット
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AquariumDatasetsPost(nssolPlatypusApiModelsAquariumDataSetApiModelsCreateInputModel?: NssolPlatypusApiModelsAquariumDataSetApiModelsCreateInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsAquariumDataSetApiModelsIndexOutputModel> {
            return localVarFp.apiV2AquariumDatasetsPost(nssolPlatypusApiModelsAquariumDataSetApiModelsCreateInputModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV2AquariumDatasetsGet operation in AquariumDataSetApi.
 * @export
 * @interface AquariumDataSetApiApiV2AquariumDatasetsGetRequest
 */
export interface AquariumDataSetApiApiV2AquariumDatasetsGetRequest {
    /**
     * IDの検索条件。  比較文字列＋数値の形式。
     * @type {string}
     * @memberof AquariumDataSetApiApiV2AquariumDatasetsGet
     */
    readonly id?: string

    /**
     * 名前
     * @type {string}
     * @memberof AquariumDataSetApiApiV2AquariumDatasetsGet
     */
    readonly name?: string

    /**
     * 作成時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
     * @type {string}
     * @memberof AquariumDataSetApiApiV2AquariumDatasetsGet
     */
    readonly createdAt?: string

    /**
     * 作成者
     * @type {string}
     * @memberof AquariumDataSetApiApiV2AquariumDatasetsGet
     */
    readonly createdBy?: string

    /**
     * 更新時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
     * @type {string}
     * @memberof AquariumDataSetApiApiV2AquariumDatasetsGet
     */
    readonly modifiedAt?: string

    /**
     * 更新者
     * @type {string}
     * @memberof AquariumDataSetApiApiV2AquariumDatasetsGet
     */
    readonly modifiedBy?: string

    /**
     * 表示件数。指定がない場合は上限(1000件)。
     * @type {number}
     * @memberof AquariumDataSetApiApiV2AquariumDatasetsGet
     */
    readonly perPage?: number

    /**
     * ページ番号。デフォルトは1。
     * @type {number}
     * @memberof AquariumDataSetApiApiV2AquariumDatasetsGet
     */
    readonly page?: number

    /**
     * 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
     * @type {boolean}
     * @memberof AquariumDataSetApiApiV2AquariumDatasetsGet
     */
    readonly withTotal?: boolean
}

/**
 * Request parameters for apiV2AquariumDatasetsIdDelete operation in AquariumDataSetApi.
 * @export
 * @interface AquariumDataSetApiApiV2AquariumDatasetsIdDeleteRequest
 */
export interface AquariumDataSetApiApiV2AquariumDatasetsIdDeleteRequest {
    /**
     * アクアリウムデータセットID
     * @type {number}
     * @memberof AquariumDataSetApiApiV2AquariumDatasetsIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiV2AquariumDatasetsIdVersionsGet operation in AquariumDataSetApi.
 * @export
 * @interface AquariumDataSetApiApiV2AquariumDatasetsIdVersionsGetRequest
 */
export interface AquariumDataSetApiApiV2AquariumDatasetsIdVersionsGetRequest {
    /**
     * アクアリウムデータセットID
     * @type {number}
     * @memberof AquariumDataSetApiApiV2AquariumDatasetsIdVersionsGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV2AquariumDatasetsIdVersionsPost operation in AquariumDataSetApi.
 * @export
 * @interface AquariumDataSetApiApiV2AquariumDatasetsIdVersionsPostRequest
 */
export interface AquariumDataSetApiApiV2AquariumDatasetsIdVersionsPostRequest {
    /**
     * アクアリウムデータセットID
     * @type {number}
     * @memberof AquariumDataSetApiApiV2AquariumDatasetsIdVersionsPost
     */
    readonly id: number

    /**
     * アクアリウムデータセットバージョン
     * @type {NssolPlatypusApiModelsAquariumDataSetApiModelsVersionCreateInputModel}
     * @memberof AquariumDataSetApiApiV2AquariumDatasetsIdVersionsPost
     */
    readonly nssolPlatypusApiModelsAquariumDataSetApiModelsVersionCreateInputModel?: NssolPlatypusApiModelsAquariumDataSetApiModelsVersionCreateInputModel
}

/**
 * Request parameters for apiV2AquariumDatasetsIdVersionsVersionIdDelete operation in AquariumDataSetApi.
 * @export
 * @interface AquariumDataSetApiApiV2AquariumDatasetsIdVersionsVersionIdDeleteRequest
 */
export interface AquariumDataSetApiApiV2AquariumDatasetsIdVersionsVersionIdDeleteRequest {
    /**
     * アクアリウムデータセットID
     * @type {number}
     * @memberof AquariumDataSetApiApiV2AquariumDatasetsIdVersionsVersionIdDelete
     */
    readonly id: number

    /**
     * アクアリウムデータセットバージョンID
     * @type {number}
     * @memberof AquariumDataSetApiApiV2AquariumDatasetsIdVersionsVersionIdDelete
     */
    readonly versionId: number
}

/**
 * Request parameters for apiV2AquariumDatasetsIdVersionsVersionIdGet operation in AquariumDataSetApi.
 * @export
 * @interface AquariumDataSetApiApiV2AquariumDatasetsIdVersionsVersionIdGetRequest
 */
export interface AquariumDataSetApiApiV2AquariumDatasetsIdVersionsVersionIdGetRequest {
    /**
     * アクアリウムデータセットID
     * @type {number}
     * @memberof AquariumDataSetApiApiV2AquariumDatasetsIdVersionsVersionIdGet
     */
    readonly id: number

    /**
     * アクアリウムデータセットバージョンID
     * @type {number}
     * @memberof AquariumDataSetApiApiV2AquariumDatasetsIdVersionsVersionIdGet
     */
    readonly versionId: number
}

/**
 * Request parameters for apiV2AquariumDatasetsPost operation in AquariumDataSetApi.
 * @export
 * @interface AquariumDataSetApiApiV2AquariumDatasetsPostRequest
 */
export interface AquariumDataSetApiApiV2AquariumDatasetsPostRequest {
    /**
     * アクアリウムデータセット
     * @type {NssolPlatypusApiModelsAquariumDataSetApiModelsCreateInputModel}
     * @memberof AquariumDataSetApiApiV2AquariumDatasetsPost
     */
    readonly nssolPlatypusApiModelsAquariumDataSetApiModelsCreateInputModel?: NssolPlatypusApiModelsAquariumDataSetApiModelsCreateInputModel
}

/**
 * AquariumDataSetApi - object-oriented interface
 * @export
 * @class AquariumDataSetApi
 * @extends {BaseAPI}
 */
export class AquariumDataSetApi extends BaseAPI {
    /**
     * 
     * @summary 指定された条件でページングされた状態で、アクアリウムデータセット一覧を取得する
     * @param {AquariumDataSetApiApiV2AquariumDatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AquariumDataSetApi
     */
    public apiV2AquariumDatasetsGet(requestParameters: AquariumDataSetApiApiV2AquariumDatasetsGetRequest = {}, options?: AxiosRequestConfig) {
        return AquariumDataSetApiFp(this.configuration).apiV2AquariumDatasetsGet(requestParameters.id, requestParameters.name, requestParameters.createdAt, requestParameters.createdBy, requestParameters.modifiedAt, requestParameters.modifiedBy, requestParameters.perPage, requestParameters.page, requestParameters.withTotal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary アクアリウムデータセットを削除する
     * @param {AquariumDataSetApiApiV2AquariumDatasetsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AquariumDataSetApi
     */
    public apiV2AquariumDatasetsIdDelete(requestParameters: AquariumDataSetApiApiV2AquariumDatasetsIdDeleteRequest, options?: AxiosRequestConfig) {
        return AquariumDataSetApiFp(this.configuration).apiV2AquariumDatasetsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary アクアリウムデータセットバージョン一覧を取得する
     * @param {AquariumDataSetApiApiV2AquariumDatasetsIdVersionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AquariumDataSetApi
     */
    public apiV2AquariumDatasetsIdVersionsGet(requestParameters: AquariumDataSetApiApiV2AquariumDatasetsIdVersionsGetRequest, options?: AxiosRequestConfig) {
        return AquariumDataSetApiFp(this.configuration).apiV2AquariumDatasetsIdVersionsGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary アクアリウムデータセットバージョンを作成する
     * @param {AquariumDataSetApiApiV2AquariumDatasetsIdVersionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AquariumDataSetApi
     */
    public apiV2AquariumDatasetsIdVersionsPost(requestParameters: AquariumDataSetApiApiV2AquariumDatasetsIdVersionsPostRequest, options?: AxiosRequestConfig) {
        return AquariumDataSetApiFp(this.configuration).apiV2AquariumDatasetsIdVersionsPost(requestParameters.id, requestParameters.nssolPlatypusApiModelsAquariumDataSetApiModelsVersionCreateInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary アクアリウムデータセットバージョンを削除する
     * @param {AquariumDataSetApiApiV2AquariumDatasetsIdVersionsVersionIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AquariumDataSetApi
     */
    public apiV2AquariumDatasetsIdVersionsVersionIdDelete(requestParameters: AquariumDataSetApiApiV2AquariumDatasetsIdVersionsVersionIdDeleteRequest, options?: AxiosRequestConfig) {
        return AquariumDataSetApiFp(this.configuration).apiV2AquariumDatasetsIdVersionsVersionIdDelete(requestParameters.id, requestParameters.versionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary アクアリウムデータセットバージョンを取得する
     * @param {AquariumDataSetApiApiV2AquariumDatasetsIdVersionsVersionIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AquariumDataSetApi
     */
    public apiV2AquariumDatasetsIdVersionsVersionIdGet(requestParameters: AquariumDataSetApiApiV2AquariumDatasetsIdVersionsVersionIdGetRequest, options?: AxiosRequestConfig) {
        return AquariumDataSetApiFp(this.configuration).apiV2AquariumDatasetsIdVersionsVersionIdGet(requestParameters.id, requestParameters.versionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary アクアリウムデータセットを作成する
     * @param {AquariumDataSetApiApiV2AquariumDatasetsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AquariumDataSetApi
     */
    public apiV2AquariumDatasetsPost(requestParameters: AquariumDataSetApiApiV2AquariumDatasetsPostRequest = {}, options?: AxiosRequestConfig) {
        return AquariumDataSetApiFp(this.configuration).apiV2AquariumDatasetsPost(requestParameters.nssolPlatypusApiModelsAquariumDataSetApiModelsCreateInputModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ClusterApi - axios parameter creator
 * @export
 */
export const ClusterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary イベントを取得する
         * @param {number} id テナントID
         * @param {string} [name] コンテナ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminEventsIdGet: async (id: number, name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminEventsIdGet', 'id', id)
            const localVarPath = `/api/v2/admin/events/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary パーティションの一覧を取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminPartitionsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/partitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary クォータ設定を取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminQuotasGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/quotas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 0が指定された場合、上限なしを示す。また、指定のなかったテナントは更新しない。
         * @summary クォータ設定を更新する。
         * @param {Array<NssolPlatypusApiModelsClusterApiModelsQuotaInputModel>} [nssolPlatypusApiModelsClusterApiModelsQuotaInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminQuotasPost: async (nssolPlatypusApiModelsClusterApiModelsQuotaInputModel?: Array<NssolPlatypusApiModelsClusterApiModelsQuotaInputModel>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/quotas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsClusterApiModelsQuotaInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * REST APIとして定時バッチから実行される想定。
         * @summary DB上の全てのTensorBoardコンテナ情報を対応する実コンテナごと削除する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTensorboardsDelete: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/tensorboards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 接続中のテナントが利用可能なノード一覧（リソース値を含む）を取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantNodesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/tenant/nodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 接続中のテナントに有効なパーティションの一覧を取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantPartitionsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/tenant/partitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 接続中テナントのクォータ情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantQuotaGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/tenant/quota`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClusterApi - functional programming interface
 * @export
 */
export const ClusterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClusterApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary イベントを取得する
         * @param {number} id テナントID
         * @param {string} [name] コンテナ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminEventsIdGet(id: number, name?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusInfrastructureInfosContainerEventInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminEventsIdGet(id, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary パーティションの一覧を取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminPartitionsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminPartitionsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary クォータ設定を取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminQuotasGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsClusterApiModelsQuotaOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminQuotasGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 0が指定された場合、上限なしを示す。また、指定のなかったテナントは更新しない。
         * @summary クォータ設定を更新する。
         * @param {Array<NssolPlatypusApiModelsClusterApiModelsQuotaInputModel>} [nssolPlatypusApiModelsClusterApiModelsQuotaInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminQuotasPost(nssolPlatypusApiModelsClusterApiModelsQuotaInputModel?: Array<NssolPlatypusApiModelsClusterApiModelsQuotaInputModel>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsClusterApiModelsQuotaOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminQuotasPost(nssolPlatypusApiModelsClusterApiModelsQuotaInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * REST APIとして定時バッチから実行される想定。
         * @summary DB上の全てのTensorBoardコンテナ情報を対応する実コンテナごと削除する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminTensorboardsDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminTensorboardsDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 接続中のテナントが利用可能なノード一覧（リソース値を含む）を取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TenantNodesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsClusterApiModelsNodeResourceOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TenantNodesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 接続中のテナントに有効なパーティションの一覧を取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TenantPartitionsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TenantPartitionsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 接続中テナントのクォータ情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TenantQuotaGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsClusterApiModelsQuotaOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TenantQuotaGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ClusterApi - factory interface
 * @export
 */
export const ClusterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClusterApiFp(configuration)
    return {
        /**
         * 
         * @summary イベントを取得する
         * @param {number} id テナントID
         * @param {string} [name] コンテナ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminEventsIdGet(id: number, name?: string, options?: any): AxiosPromise<Array<NssolPlatypusInfrastructureInfosContainerEventInfo>> {
            return localVarFp.apiV2AdminEventsIdGet(id, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary パーティションの一覧を取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminPartitionsGet(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.apiV2AdminPartitionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary クォータ設定を取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminQuotasGet(options?: any): AxiosPromise<Array<NssolPlatypusApiModelsClusterApiModelsQuotaOutputModel>> {
            return localVarFp.apiV2AdminQuotasGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 0が指定された場合、上限なしを示す。また、指定のなかったテナントは更新しない。
         * @summary クォータ設定を更新する。
         * @param {Array<NssolPlatypusApiModelsClusterApiModelsQuotaInputModel>} [nssolPlatypusApiModelsClusterApiModelsQuotaInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminQuotasPost(nssolPlatypusApiModelsClusterApiModelsQuotaInputModel?: Array<NssolPlatypusApiModelsClusterApiModelsQuotaInputModel>, options?: any): AxiosPromise<Array<NssolPlatypusApiModelsClusterApiModelsQuotaOutputModel>> {
            return localVarFp.apiV2AdminQuotasPost(nssolPlatypusApiModelsClusterApiModelsQuotaInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * REST APIとして定時バッチから実行される想定。
         * @summary DB上の全てのTensorBoardコンテナ情報を対応する実コンテナごと削除する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTensorboardsDelete(options?: any): AxiosPromise<number> {
            return localVarFp.apiV2AdminTensorboardsDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 接続中のテナントが利用可能なノード一覧（リソース値を含む）を取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantNodesGet(options?: any): AxiosPromise<Array<NssolPlatypusApiModelsClusterApiModelsNodeResourceOutputModel>> {
            return localVarFp.apiV2TenantNodesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 接続中のテナントに有効なパーティションの一覧を取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantPartitionsGet(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.apiV2TenantPartitionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 接続中テナントのクォータ情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantQuotaGet(options?: any): AxiosPromise<NssolPlatypusApiModelsClusterApiModelsQuotaOutputModel> {
            return localVarFp.apiV2TenantQuotaGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV2AdminEventsIdGet operation in ClusterApi.
 * @export
 * @interface ClusterApiApiV2AdminEventsIdGetRequest
 */
export interface ClusterApiApiV2AdminEventsIdGetRequest {
    /**
     * テナントID
     * @type {number}
     * @memberof ClusterApiApiV2AdminEventsIdGet
     */
    readonly id: number

    /**
     * コンテナ名
     * @type {string}
     * @memberof ClusterApiApiV2AdminEventsIdGet
     */
    readonly name?: string
}

/**
 * Request parameters for apiV2AdminQuotasPost operation in ClusterApi.
 * @export
 * @interface ClusterApiApiV2AdminQuotasPostRequest
 */
export interface ClusterApiApiV2AdminQuotasPostRequest {
    /**
     * 
     * @type {Array<NssolPlatypusApiModelsClusterApiModelsQuotaInputModel>}
     * @memberof ClusterApiApiV2AdminQuotasPost
     */
    readonly nssolPlatypusApiModelsClusterApiModelsQuotaInputModel?: Array<NssolPlatypusApiModelsClusterApiModelsQuotaInputModel>
}

/**
 * ClusterApi - object-oriented interface
 * @export
 * @class ClusterApi
 * @extends {BaseAPI}
 */
export class ClusterApi extends BaseAPI {
    /**
     * 
     * @summary イベントを取得する
     * @param {ClusterApiApiV2AdminEventsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClusterApi
     */
    public apiV2AdminEventsIdGet(requestParameters: ClusterApiApiV2AdminEventsIdGetRequest, options?: AxiosRequestConfig) {
        return ClusterApiFp(this.configuration).apiV2AdminEventsIdGet(requestParameters.id, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary パーティションの一覧を取得する。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClusterApi
     */
    public apiV2AdminPartitionsGet(options?: AxiosRequestConfig) {
        return ClusterApiFp(this.configuration).apiV2AdminPartitionsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary クォータ設定を取得する。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClusterApi
     */
    public apiV2AdminQuotasGet(options?: AxiosRequestConfig) {
        return ClusterApiFp(this.configuration).apiV2AdminQuotasGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 0が指定された場合、上限なしを示す。また、指定のなかったテナントは更新しない。
     * @summary クォータ設定を更新する。
     * @param {ClusterApiApiV2AdminQuotasPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClusterApi
     */
    public apiV2AdminQuotasPost(requestParameters: ClusterApiApiV2AdminQuotasPostRequest = {}, options?: AxiosRequestConfig) {
        return ClusterApiFp(this.configuration).apiV2AdminQuotasPost(requestParameters.nssolPlatypusApiModelsClusterApiModelsQuotaInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * REST APIとして定時バッチから実行される想定。
     * @summary DB上の全てのTensorBoardコンテナ情報を対応する実コンテナごと削除する。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClusterApi
     */
    public apiV2AdminTensorboardsDelete(options?: AxiosRequestConfig) {
        return ClusterApiFp(this.configuration).apiV2AdminTensorboardsDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 接続中のテナントが利用可能なノード一覧（リソース値を含む）を取得する。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClusterApi
     */
    public apiV2TenantNodesGet(options?: AxiosRequestConfig) {
        return ClusterApiFp(this.configuration).apiV2TenantNodesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 接続中のテナントに有効なパーティションの一覧を取得する。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClusterApi
     */
    public apiV2TenantPartitionsGet(options?: AxiosRequestConfig) {
        return ClusterApiFp(this.configuration).apiV2TenantPartitionsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 接続中テナントのクォータ情報を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClusterApi
     */
    public apiV2TenantQuotaGet(options?: AxiosRequestConfig) {
        return ClusterApiFp(this.configuration).apiV2TenantQuotaGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DataApi - axios parameter creator
 * @export
 */
export const DataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DataDatatagsDelete: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/data/datatags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 選択中のテナントに登録されているデータ管理で使用できるタグを表示する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DataDatatagsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/data/datatags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定された条件でページングされた状態で、データ一覧を取得。  タグ情報が含まれる。
         * @param {string} [id] IDの検索条件。  比較文字列＋数値の形式。
         * @param {string} [name] 名前
         * @param {string} [memo] メモ
         * @param {string} [createdAt] 作成時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
         * @param {string} [createdBy] 作成者
         * @param {Array<string>} [tag] タグ。
         * @param {number} [perPage] 表示件数。指定がない場合は上限(1000件)。
         * @param {number} [page] ページ番号。デフォルトは1。
         * @param {boolean} [withTotal] 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DataGet: async (id?: string, name?: string, memo?: string, createdAt?: string, createdBy?: string, tag?: Array<string>, perPage?: number, page?: number, withTotal?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (memo !== undefined) {
                localVarQueryParameter['Memo'] = memo;
            }

            if (createdAt !== undefined) {
                localVarQueryParameter['CreatedAt'] = createdAt;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['CreatedBy'] = createdBy;
            }

            if (tag) {
                localVarQueryParameter['tag'] = tag;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (withTotal !== undefined) {
                localVarQueryParameter['withTotal'] = withTotal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定したデータを削除する
         * @param {number} id データID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DataIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2DataIdDelete', 'id', id)
            const localVarPath = `/api/v2/data/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定されたIDのファイルを削除する
         * @param {number} id 対象のデータID
         * @param {number} fileId 削除するファイルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DataIdFilesFileIdDelete: async (id: number, fileId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2DataIdFilesFileIdDelete', 'id', id)
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('apiV2DataIdFilesFileIdDelete', 'fileId', fileId)
            const localVarPath = `/api/v2/data/{id}/files/{fileId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定したデータのファイル情報を全て取得する
         * @param {number} id 対象データID
         * @param {boolean} [withUrl] 結果にダウンロード用のURLを含めるか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DataIdFilesGet: async (id: number, withUrl?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2DataIdFilesGet', 'id', id)
            const localVarPath = `/api/v2/data/{id}/files`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (withUrl !== undefined) {
                localVarQueryParameter['withUrl'] = withUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ファイルのダウンロードURLを取得する
         * @param {number} id 対象データID
         * @param {string} name 対象ファイル名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DataIdFilesNameGet: async (id: number, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2DataIdFilesNameGet', 'id', id)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiV2DataIdFilesNameGet', 'name', name)
            const localVarPath = `/api/v2/data/{id}/files/{name}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ファイルのサイズ(Byte)を取得する
         * @param {number} id 対象データID
         * @param {string} name 対象ファイル名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DataIdFilesNameSizeGet: async (id: number, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2DataIdFilesNameSizeGet', 'id', id)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiV2DataIdFilesNameSizeGet', 'name', name)
            const localVarPath = `/api/v2/data/{id}/files/{name}/size`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ファイルを追加する。
         * @param {number} id 変更対象のデータID
         * @param {NssolPlatypusApiModelsDataApiModelsAddFilesInputModel} [nssolPlatypusApiModelsDataApiModelsAddFilesInputModel] 追加するファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DataIdFilesPost: async (id: number, nssolPlatypusApiModelsDataApiModelsAddFilesInputModel?: NssolPlatypusApiModelsDataApiModelsAddFilesInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2DataIdFilesPost', 'id', id)
            const localVarPath = `/api/v2/data/{id}/files`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsDataApiModelsAddFilesInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定したIDのデータ詳細情報を取得する。
         * @param {number} id データID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DataIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2DataIdGet', 'id', id)
            const localVarPath = `/api/v2/data/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary データ編集メソッド。  ファイルの追加は別のメソッドで行う。
         * @param {number} id 変更対象のデータID
         * @param {NssolPlatypusApiModelsDataApiModelsEditInputModel} [nssolPlatypusApiModelsDataApiModelsEditInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DataIdPut: async (id: number, nssolPlatypusApiModelsDataApiModelsEditInputModel?: NssolPlatypusApiModelsDataApiModelsEditInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2DataIdPut', 'id', id)
            const localVarPath = `/api/v2/data/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsDataApiModelsEditInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定したデータからタグを削除する。
         * @param {number} id 
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DataIdTagsTagDelete: async (id: number, tag: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2DataIdTagsTagDelete', 'id', id)
            // verify required parameter 'tag' is not null or undefined
            assertParamExists('apiV2DataIdTagsTagDelete', 'tag', tag)
            const localVarPath = `/api/v2/data/{id}/tags/{tag}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"tag"}}`, encodeURIComponent(String(tag)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定したデータに対してタグを追加する。
         * @param {number} id 
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DataIdTagsTagPut: async (id: number, tag: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2DataIdTagsTagPut', 'id', id)
            // verify required parameter 'tag' is not null or undefined
            assertParamExists('apiV2DataIdTagsTagPut', 'tag', tag)
            const localVarPath = `/api/v2/data/{id}/tags/{tag}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"tag"}}`, encodeURIComponent(String(tag)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary データの新規作成
         * @param {NssolPlatypusApiModelsDataApiModelsCreateInputModel} [nssolPlatypusApiModelsDataApiModelsCreateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DataPost: async (nssolPlatypusApiModelsDataApiModelsCreateInputModel?: NssolPlatypusApiModelsDataApiModelsCreateInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsDataApiModelsCreateInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataApi - functional programming interface
 * @export
 */
export const DataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DataApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2DataDatatagsDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2DataDatatagsDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 選択中のテナントに登録されているデータ管理で使用できるタグを表示する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2DataDatatagsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2DataDatatagsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定された条件でページングされた状態で、データ一覧を取得。  タグ情報が含まれる。
         * @param {string} [id] IDの検索条件。  比較文字列＋数値の形式。
         * @param {string} [name] 名前
         * @param {string} [memo] メモ
         * @param {string} [createdAt] 作成時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
         * @param {string} [createdBy] 作成者
         * @param {Array<string>} [tag] タグ。
         * @param {number} [perPage] 表示件数。指定がない場合は上限(1000件)。
         * @param {number} [page] ページ番号。デフォルトは1。
         * @param {boolean} [withTotal] 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2DataGet(id?: string, name?: string, memo?: string, createdAt?: string, createdBy?: string, tag?: Array<string>, perPage?: number, page?: number, withTotal?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsDataApiModelsIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2DataGet(id, name, memo, createdAt, createdBy, tag, perPage, page, withTotal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定したデータを削除する
         * @param {number} id データID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2DataIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2DataIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定されたIDのファイルを削除する
         * @param {number} id 対象のデータID
         * @param {number} fileId 削除するファイルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2DataIdFilesFileIdDelete(id: number, fileId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2DataIdFilesFileIdDelete(id, fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定したデータのファイル情報を全て取得する
         * @param {number} id 対象データID
         * @param {boolean} [withUrl] 結果にダウンロード用のURLを含めるか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2DataIdFilesGet(id: number, withUrl?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsDataApiModelsDataFileOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2DataIdFilesGet(id, withUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ファイルのダウンロードURLを取得する
         * @param {number} id 対象データID
         * @param {string} name 対象ファイル名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2DataIdFilesNameGet(id: number, name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsDataApiModelsDataFileOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2DataIdFilesNameGet(id, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ファイルのサイズ(Byte)を取得する
         * @param {number} id 対象データID
         * @param {string} name 対象ファイル名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2DataIdFilesNameSizeGet(id: number, name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsDataApiModelsDataFileOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2DataIdFilesNameSizeGet(id, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ファイルを追加する。
         * @param {number} id 変更対象のデータID
         * @param {NssolPlatypusApiModelsDataApiModelsAddFilesInputModel} [nssolPlatypusApiModelsDataApiModelsAddFilesInputModel] 追加するファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2DataIdFilesPost(id: number, nssolPlatypusApiModelsDataApiModelsAddFilesInputModel?: NssolPlatypusApiModelsDataApiModelsAddFilesInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsDataApiModelsDataFilesOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2DataIdFilesPost(id, nssolPlatypusApiModelsDataApiModelsAddFilesInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定したIDのデータ詳細情報を取得する。
         * @param {number} id データID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2DataIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsDataApiModelsDetailsOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2DataIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary データ編集メソッド。  ファイルの追加は別のメソッドで行う。
         * @param {number} id 変更対象のデータID
         * @param {NssolPlatypusApiModelsDataApiModelsEditInputModel} [nssolPlatypusApiModelsDataApiModelsEditInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2DataIdPut(id: number, nssolPlatypusApiModelsDataApiModelsEditInputModel?: NssolPlatypusApiModelsDataApiModelsEditInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsDataApiModelsIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2DataIdPut(id, nssolPlatypusApiModelsDataApiModelsEditInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定したデータからタグを削除する。
         * @param {number} id 
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2DataIdTagsTagDelete(id: number, tag: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2DataIdTagsTagDelete(id, tag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定したデータに対してタグを追加する。
         * @param {number} id 
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2DataIdTagsTagPut(id: number, tag: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsDataApiModelsIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2DataIdTagsTagPut(id, tag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary データの新規作成
         * @param {NssolPlatypusApiModelsDataApiModelsCreateInputModel} [nssolPlatypusApiModelsDataApiModelsCreateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2DataPost(nssolPlatypusApiModelsDataApiModelsCreateInputModel?: NssolPlatypusApiModelsDataApiModelsCreateInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsDataApiModelsIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2DataPost(nssolPlatypusApiModelsDataApiModelsCreateInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DataApi - factory interface
 * @export
 */
export const DataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DataApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DataDatatagsDelete(options?: any): AxiosPromise<void> {
            return localVarFp.apiV2DataDatatagsDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 選択中のテナントに登録されているデータ管理で使用できるタグを表示する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DataDatatagsGet(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.apiV2DataDatatagsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定された条件でページングされた状態で、データ一覧を取得。  タグ情報が含まれる。
         * @param {string} [id] IDの検索条件。  比較文字列＋数値の形式。
         * @param {string} [name] 名前
         * @param {string} [memo] メモ
         * @param {string} [createdAt] 作成時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
         * @param {string} [createdBy] 作成者
         * @param {Array<string>} [tag] タグ。
         * @param {number} [perPage] 表示件数。指定がない場合は上限(1000件)。
         * @param {number} [page] ページ番号。デフォルトは1。
         * @param {boolean} [withTotal] 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DataGet(id?: string, name?: string, memo?: string, createdAt?: string, createdBy?: string, tag?: Array<string>, perPage?: number, page?: number, withTotal?: boolean, options?: any): AxiosPromise<Array<NssolPlatypusApiModelsDataApiModelsIndexOutputModel>> {
            return localVarFp.apiV2DataGet(id, name, memo, createdAt, createdBy, tag, perPage, page, withTotal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定したデータを削除する
         * @param {number} id データID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DataIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2DataIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定されたIDのファイルを削除する
         * @param {number} id 対象のデータID
         * @param {number} fileId 削除するファイルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DataIdFilesFileIdDelete(id: number, fileId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2DataIdFilesFileIdDelete(id, fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定したデータのファイル情報を全て取得する
         * @param {number} id 対象データID
         * @param {boolean} [withUrl] 結果にダウンロード用のURLを含めるか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DataIdFilesGet(id: number, withUrl?: boolean, options?: any): AxiosPromise<Array<NssolPlatypusApiModelsDataApiModelsDataFileOutputModel>> {
            return localVarFp.apiV2DataIdFilesGet(id, withUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ファイルのダウンロードURLを取得する
         * @param {number} id 対象データID
         * @param {string} name 対象ファイル名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DataIdFilesNameGet(id: number, name: string, options?: any): AxiosPromise<NssolPlatypusApiModelsDataApiModelsDataFileOutputModel> {
            return localVarFp.apiV2DataIdFilesNameGet(id, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ファイルのサイズ(Byte)を取得する
         * @param {number} id 対象データID
         * @param {string} name 対象ファイル名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DataIdFilesNameSizeGet(id: number, name: string, options?: any): AxiosPromise<NssolPlatypusApiModelsDataApiModelsDataFileOutputModel> {
            return localVarFp.apiV2DataIdFilesNameSizeGet(id, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ファイルを追加する。
         * @param {number} id 変更対象のデータID
         * @param {NssolPlatypusApiModelsDataApiModelsAddFilesInputModel} [nssolPlatypusApiModelsDataApiModelsAddFilesInputModel] 追加するファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DataIdFilesPost(id: number, nssolPlatypusApiModelsDataApiModelsAddFilesInputModel?: NssolPlatypusApiModelsDataApiModelsAddFilesInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsDataApiModelsDataFilesOutputModel> {
            return localVarFp.apiV2DataIdFilesPost(id, nssolPlatypusApiModelsDataApiModelsAddFilesInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定したIDのデータ詳細情報を取得する。
         * @param {number} id データID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DataIdGet(id: number, options?: any): AxiosPromise<NssolPlatypusApiModelsDataApiModelsDetailsOutputModel> {
            return localVarFp.apiV2DataIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary データ編集メソッド。  ファイルの追加は別のメソッドで行う。
         * @param {number} id 変更対象のデータID
         * @param {NssolPlatypusApiModelsDataApiModelsEditInputModel} [nssolPlatypusApiModelsDataApiModelsEditInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DataIdPut(id: number, nssolPlatypusApiModelsDataApiModelsEditInputModel?: NssolPlatypusApiModelsDataApiModelsEditInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsDataApiModelsIndexOutputModel> {
            return localVarFp.apiV2DataIdPut(id, nssolPlatypusApiModelsDataApiModelsEditInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定したデータからタグを削除する。
         * @param {number} id 
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DataIdTagsTagDelete(id: number, tag: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2DataIdTagsTagDelete(id, tag, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定したデータに対してタグを追加する。
         * @param {number} id 
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DataIdTagsTagPut(id: number, tag: string, options?: any): AxiosPromise<NssolPlatypusApiModelsDataApiModelsIndexOutputModel> {
            return localVarFp.apiV2DataIdTagsTagPut(id, tag, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary データの新規作成
         * @param {NssolPlatypusApiModelsDataApiModelsCreateInputModel} [nssolPlatypusApiModelsDataApiModelsCreateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DataPost(nssolPlatypusApiModelsDataApiModelsCreateInputModel?: NssolPlatypusApiModelsDataApiModelsCreateInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsDataApiModelsIndexOutputModel> {
            return localVarFp.apiV2DataPost(nssolPlatypusApiModelsDataApiModelsCreateInputModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV2DataGet operation in DataApi.
 * @export
 * @interface DataApiApiV2DataGetRequest
 */
export interface DataApiApiV2DataGetRequest {
    /**
     * IDの検索条件。  比較文字列＋数値の形式。
     * @type {string}
     * @memberof DataApiApiV2DataGet
     */
    readonly id?: string

    /**
     * 名前
     * @type {string}
     * @memberof DataApiApiV2DataGet
     */
    readonly name?: string

    /**
     * メモ
     * @type {string}
     * @memberof DataApiApiV2DataGet
     */
    readonly memo?: string

    /**
     * 作成時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
     * @type {string}
     * @memberof DataApiApiV2DataGet
     */
    readonly createdAt?: string

    /**
     * 作成者
     * @type {string}
     * @memberof DataApiApiV2DataGet
     */
    readonly createdBy?: string

    /**
     * タグ。
     * @type {Array<string>}
     * @memberof DataApiApiV2DataGet
     */
    readonly tag?: Array<string>

    /**
     * 表示件数。指定がない場合は上限(1000件)。
     * @type {number}
     * @memberof DataApiApiV2DataGet
     */
    readonly perPage?: number

    /**
     * ページ番号。デフォルトは1。
     * @type {number}
     * @memberof DataApiApiV2DataGet
     */
    readonly page?: number

    /**
     * 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
     * @type {boolean}
     * @memberof DataApiApiV2DataGet
     */
    readonly withTotal?: boolean
}

/**
 * Request parameters for apiV2DataIdDelete operation in DataApi.
 * @export
 * @interface DataApiApiV2DataIdDeleteRequest
 */
export interface DataApiApiV2DataIdDeleteRequest {
    /**
     * データID
     * @type {number}
     * @memberof DataApiApiV2DataIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiV2DataIdFilesFileIdDelete operation in DataApi.
 * @export
 * @interface DataApiApiV2DataIdFilesFileIdDeleteRequest
 */
export interface DataApiApiV2DataIdFilesFileIdDeleteRequest {
    /**
     * 対象のデータID
     * @type {number}
     * @memberof DataApiApiV2DataIdFilesFileIdDelete
     */
    readonly id: number

    /**
     * 削除するファイルのID
     * @type {number}
     * @memberof DataApiApiV2DataIdFilesFileIdDelete
     */
    readonly fileId: number
}

/**
 * Request parameters for apiV2DataIdFilesGet operation in DataApi.
 * @export
 * @interface DataApiApiV2DataIdFilesGetRequest
 */
export interface DataApiApiV2DataIdFilesGetRequest {
    /**
     * 対象データID
     * @type {number}
     * @memberof DataApiApiV2DataIdFilesGet
     */
    readonly id: number

    /**
     * 結果にダウンロード用のURLを含めるか
     * @type {boolean}
     * @memberof DataApiApiV2DataIdFilesGet
     */
    readonly withUrl?: boolean
}

/**
 * Request parameters for apiV2DataIdFilesNameGet operation in DataApi.
 * @export
 * @interface DataApiApiV2DataIdFilesNameGetRequest
 */
export interface DataApiApiV2DataIdFilesNameGetRequest {
    /**
     * 対象データID
     * @type {number}
     * @memberof DataApiApiV2DataIdFilesNameGet
     */
    readonly id: number

    /**
     * 対象ファイル名
     * @type {string}
     * @memberof DataApiApiV2DataIdFilesNameGet
     */
    readonly name: string
}

/**
 * Request parameters for apiV2DataIdFilesNameSizeGet operation in DataApi.
 * @export
 * @interface DataApiApiV2DataIdFilesNameSizeGetRequest
 */
export interface DataApiApiV2DataIdFilesNameSizeGetRequest {
    /**
     * 対象データID
     * @type {number}
     * @memberof DataApiApiV2DataIdFilesNameSizeGet
     */
    readonly id: number

    /**
     * 対象ファイル名
     * @type {string}
     * @memberof DataApiApiV2DataIdFilesNameSizeGet
     */
    readonly name: string
}

/**
 * Request parameters for apiV2DataIdFilesPost operation in DataApi.
 * @export
 * @interface DataApiApiV2DataIdFilesPostRequest
 */
export interface DataApiApiV2DataIdFilesPostRequest {
    /**
     * 変更対象のデータID
     * @type {number}
     * @memberof DataApiApiV2DataIdFilesPost
     */
    readonly id: number

    /**
     * 追加するファイル情報
     * @type {NssolPlatypusApiModelsDataApiModelsAddFilesInputModel}
     * @memberof DataApiApiV2DataIdFilesPost
     */
    readonly nssolPlatypusApiModelsDataApiModelsAddFilesInputModel?: NssolPlatypusApiModelsDataApiModelsAddFilesInputModel
}

/**
 * Request parameters for apiV2DataIdGet operation in DataApi.
 * @export
 * @interface DataApiApiV2DataIdGetRequest
 */
export interface DataApiApiV2DataIdGetRequest {
    /**
     * データID
     * @type {number}
     * @memberof DataApiApiV2DataIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV2DataIdPut operation in DataApi.
 * @export
 * @interface DataApiApiV2DataIdPutRequest
 */
export interface DataApiApiV2DataIdPutRequest {
    /**
     * 変更対象のデータID
     * @type {number}
     * @memberof DataApiApiV2DataIdPut
     */
    readonly id: number

    /**
     * 変更内容
     * @type {NssolPlatypusApiModelsDataApiModelsEditInputModel}
     * @memberof DataApiApiV2DataIdPut
     */
    readonly nssolPlatypusApiModelsDataApiModelsEditInputModel?: NssolPlatypusApiModelsDataApiModelsEditInputModel
}

/**
 * Request parameters for apiV2DataIdTagsTagDelete operation in DataApi.
 * @export
 * @interface DataApiApiV2DataIdTagsTagDeleteRequest
 */
export interface DataApiApiV2DataIdTagsTagDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof DataApiApiV2DataIdTagsTagDelete
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof DataApiApiV2DataIdTagsTagDelete
     */
    readonly tag: string
}

/**
 * Request parameters for apiV2DataIdTagsTagPut operation in DataApi.
 * @export
 * @interface DataApiApiV2DataIdTagsTagPutRequest
 */
export interface DataApiApiV2DataIdTagsTagPutRequest {
    /**
     * 
     * @type {number}
     * @memberof DataApiApiV2DataIdTagsTagPut
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof DataApiApiV2DataIdTagsTagPut
     */
    readonly tag: string
}

/**
 * Request parameters for apiV2DataPost operation in DataApi.
 * @export
 * @interface DataApiApiV2DataPostRequest
 */
export interface DataApiApiV2DataPostRequest {
    /**
     * 
     * @type {NssolPlatypusApiModelsDataApiModelsCreateInputModel}
     * @memberof DataApiApiV2DataPost
     */
    readonly nssolPlatypusApiModelsDataApiModelsCreateInputModel?: NssolPlatypusApiModelsDataApiModelsCreateInputModel
}

/**
 * DataApi - object-oriented interface
 * @export
 * @class DataApi
 * @extends {BaseAPI}
 */
export class DataApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public apiV2DataDatatagsDelete(options?: AxiosRequestConfig) {
        return DataApiFp(this.configuration).apiV2DataDatatagsDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 選択中のテナントに登録されているデータ管理で使用できるタグを表示する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public apiV2DataDatatagsGet(options?: AxiosRequestConfig) {
        return DataApiFp(this.configuration).apiV2DataDatatagsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定された条件でページングされた状態で、データ一覧を取得。  タグ情報が含まれる。
     * @param {DataApiApiV2DataGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public apiV2DataGet(requestParameters: DataApiApiV2DataGetRequest = {}, options?: AxiosRequestConfig) {
        return DataApiFp(this.configuration).apiV2DataGet(requestParameters.id, requestParameters.name, requestParameters.memo, requestParameters.createdAt, requestParameters.createdBy, requestParameters.tag, requestParameters.perPage, requestParameters.page, requestParameters.withTotal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定したデータを削除する
     * @param {DataApiApiV2DataIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public apiV2DataIdDelete(requestParameters: DataApiApiV2DataIdDeleteRequest, options?: AxiosRequestConfig) {
        return DataApiFp(this.configuration).apiV2DataIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定されたIDのファイルを削除する
     * @param {DataApiApiV2DataIdFilesFileIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public apiV2DataIdFilesFileIdDelete(requestParameters: DataApiApiV2DataIdFilesFileIdDeleteRequest, options?: AxiosRequestConfig) {
        return DataApiFp(this.configuration).apiV2DataIdFilesFileIdDelete(requestParameters.id, requestParameters.fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定したデータのファイル情報を全て取得する
     * @param {DataApiApiV2DataIdFilesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public apiV2DataIdFilesGet(requestParameters: DataApiApiV2DataIdFilesGetRequest, options?: AxiosRequestConfig) {
        return DataApiFp(this.configuration).apiV2DataIdFilesGet(requestParameters.id, requestParameters.withUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ファイルのダウンロードURLを取得する
     * @param {DataApiApiV2DataIdFilesNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public apiV2DataIdFilesNameGet(requestParameters: DataApiApiV2DataIdFilesNameGetRequest, options?: AxiosRequestConfig) {
        return DataApiFp(this.configuration).apiV2DataIdFilesNameGet(requestParameters.id, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ファイルのサイズ(Byte)を取得する
     * @param {DataApiApiV2DataIdFilesNameSizeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public apiV2DataIdFilesNameSizeGet(requestParameters: DataApiApiV2DataIdFilesNameSizeGetRequest, options?: AxiosRequestConfig) {
        return DataApiFp(this.configuration).apiV2DataIdFilesNameSizeGet(requestParameters.id, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ファイルを追加する。
     * @param {DataApiApiV2DataIdFilesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public apiV2DataIdFilesPost(requestParameters: DataApiApiV2DataIdFilesPostRequest, options?: AxiosRequestConfig) {
        return DataApiFp(this.configuration).apiV2DataIdFilesPost(requestParameters.id, requestParameters.nssolPlatypusApiModelsDataApiModelsAddFilesInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定したIDのデータ詳細情報を取得する。
     * @param {DataApiApiV2DataIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public apiV2DataIdGet(requestParameters: DataApiApiV2DataIdGetRequest, options?: AxiosRequestConfig) {
        return DataApiFp(this.configuration).apiV2DataIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary データ編集メソッド。  ファイルの追加は別のメソッドで行う。
     * @param {DataApiApiV2DataIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public apiV2DataIdPut(requestParameters: DataApiApiV2DataIdPutRequest, options?: AxiosRequestConfig) {
        return DataApiFp(this.configuration).apiV2DataIdPut(requestParameters.id, requestParameters.nssolPlatypusApiModelsDataApiModelsEditInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定したデータからタグを削除する。
     * @param {DataApiApiV2DataIdTagsTagDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public apiV2DataIdTagsTagDelete(requestParameters: DataApiApiV2DataIdTagsTagDeleteRequest, options?: AxiosRequestConfig) {
        return DataApiFp(this.configuration).apiV2DataIdTagsTagDelete(requestParameters.id, requestParameters.tag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定したデータに対してタグを追加する。
     * @param {DataApiApiV2DataIdTagsTagPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public apiV2DataIdTagsTagPut(requestParameters: DataApiApiV2DataIdTagsTagPutRequest, options?: AxiosRequestConfig) {
        return DataApiFp(this.configuration).apiV2DataIdTagsTagPut(requestParameters.id, requestParameters.tag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary データの新規作成
     * @param {DataApiApiV2DataPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public apiV2DataPost(requestParameters: DataApiApiV2DataPostRequest = {}, options?: AxiosRequestConfig) {
        return DataApiFp(this.configuration).apiV2DataPost(requestParameters.nssolPlatypusApiModelsDataApiModelsCreateInputModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DataSetApi - axios parameter creator
 * @export
 */
export const DataSetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 指定された条件でページングされた状態で、データセット一覧を取得
         * @param {string} [id] IDの検索条件。  比較文字列＋数値の形式。
         * @param {string} [name] 名前
         * @param {string} [memo] メモ
         * @param {string} [createdAt] 作成時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
         * @param {number} [perPage] 表示件数。指定がない場合は上限(1000件)。
         * @param {number} [page] ページ番号。デフォルトは1。
         * @param {boolean} [withTotal] 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DatasetsGet: async (id?: string, name?: string, memo?: string, createdAt?: string, perPage?: number, page?: number, withTotal?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/datasets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (memo !== undefined) {
                localVarQueryParameter['Memo'] = memo;
            }

            if (createdAt !== undefined) {
                localVarQueryParameter['CreatedAt'] = createdAt;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (withTotal !== undefined) {
                localVarQueryParameter['withTotal'] = withTotal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary データセットを削除する
         * @param {number} id データセットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DatasetsIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2DatasetsIdDelete', 'id', id)
            const localVarPath = `/api/v2/datasets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定したIDのデータセットに含まれるデータファイル情報を取得する。
         * @param {number} id データセットID
         * @param {boolean} [withUrl] 結果にダウンロード用のURLを含めるか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DatasetsIdFilesGet: async (id: number, withUrl?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2DatasetsIdFilesGet', 'id', id)
            const localVarPath = `/api/v2/datasets/{id}/files`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (withUrl !== undefined) {
                localVarQueryParameter['withUrl'] = withUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定したIDのデータセット詳細情報を取得する。
         * @param {number} id データセットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DatasetsIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2DatasetsIdGet', 'id', id)
            const localVarPath = `/api/v2/datasets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary データセットの付属情報（メモなど、任意のタイミングで変更できるもの）を変更する。
         * @param {number} id データセットID
         * @param {NssolPlatypusApiModelsDataSetApiModelsEditInputModel} [nssolPlatypusApiModelsDataSetApiModelsEditInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DatasetsIdPatch: async (id: number, nssolPlatypusApiModelsDataSetApiModelsEditInputModel?: NssolPlatypusApiModelsDataSetApiModelsEditInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2DatasetsIdPatch', 'id', id)
            const localVarPath = `/api/v2/datasets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsDataSetApiModelsEditInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定したIDのデータセットに含まれるデータとNFS上のデータ名のペア情報を取得する。
         * @param {number} id データセットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DatasetsIdPathpairsGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2DatasetsIdPathpairsGet', 'id', id)
            const localVarPath = `/api/v2/datasets/{id}/pathpairs`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary データセットのエントリ内容（学習で使用後は編集不可）を変更する
         * @param {number} id データセットID
         * @param {NssolPlatypusApiModelsDataSetApiModelsEditEntriesInputModel} [nssolPlatypusApiModelsDataSetApiModelsEditEntriesInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DatasetsIdPut: async (id: number, nssolPlatypusApiModelsDataSetApiModelsEditEntriesInputModel?: NssolPlatypusApiModelsDataSetApiModelsEditEntriesInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2DatasetsIdPut', 'id', id)
            const localVarPath = `/api/v2/datasets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsDataSetApiModelsEditEntriesInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary データセットを新規作成する
         * @param {NssolPlatypusApiModelsDataSetApiModelsCreateInputModel} [nssolPlatypusApiModelsDataSetApiModelsCreateInputModel] 新規作成内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DatasetsPost: async (nssolPlatypusApiModelsDataSetApiModelsCreateInputModel?: NssolPlatypusApiModelsDataSetApiModelsCreateInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/datasets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsDataSetApiModelsCreateInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 全データ種別を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DatatypesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/datatypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataSetApi - functional programming interface
 * @export
 */
export const DataSetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DataSetApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 指定された条件でページングされた状態で、データセット一覧を取得
         * @param {string} [id] IDの検索条件。  比較文字列＋数値の形式。
         * @param {string} [name] 名前
         * @param {string} [memo] メモ
         * @param {string} [createdAt] 作成時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
         * @param {number} [perPage] 表示件数。指定がない場合は上限(1000件)。
         * @param {number} [page] ページ番号。デフォルトは1。
         * @param {boolean} [withTotal] 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2DatasetsGet(id?: string, name?: string, memo?: string, createdAt?: string, perPage?: number, page?: number, withTotal?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsDataSetApiModelsIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2DatasetsGet(id, name, memo, createdAt, perPage, page, withTotal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary データセットを削除する
         * @param {number} id データセットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2DatasetsIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2DatasetsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定したIDのデータセットに含まれるデータファイル情報を取得する。
         * @param {number} id データセットID
         * @param {boolean} [withUrl] 結果にダウンロード用のURLを含めるか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2DatasetsIdFilesGet(id: number, withUrl?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsDataSetApiModelsDataFileOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2DatasetsIdFilesGet(id, withUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定したIDのデータセット詳細情報を取得する。
         * @param {number} id データセットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2DatasetsIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsDataSetApiModelsDetailsOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2DatasetsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary データセットの付属情報（メモなど、任意のタイミングで変更できるもの）を変更する。
         * @param {number} id データセットID
         * @param {NssolPlatypusApiModelsDataSetApiModelsEditInputModel} [nssolPlatypusApiModelsDataSetApiModelsEditInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2DatasetsIdPatch(id: number, nssolPlatypusApiModelsDataSetApiModelsEditInputModel?: NssolPlatypusApiModelsDataSetApiModelsEditInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsDataSetApiModelsIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2DatasetsIdPatch(id, nssolPlatypusApiModelsDataSetApiModelsEditInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定したIDのデータセットに含まれるデータとNFS上のデータ名のペア情報を取得する。
         * @param {number} id データセットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2DatasetsIdPathpairsGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsDataSetApiModelsPathPairOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2DatasetsIdPathpairsGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary データセットのエントリ内容（学習で使用後は編集不可）を変更する
         * @param {number} id データセットID
         * @param {NssolPlatypusApiModelsDataSetApiModelsEditEntriesInputModel} [nssolPlatypusApiModelsDataSetApiModelsEditEntriesInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2DatasetsIdPut(id: number, nssolPlatypusApiModelsDataSetApiModelsEditEntriesInputModel?: NssolPlatypusApiModelsDataSetApiModelsEditEntriesInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsDataSetApiModelsIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2DatasetsIdPut(id, nssolPlatypusApiModelsDataSetApiModelsEditEntriesInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary データセットを新規作成する
         * @param {NssolPlatypusApiModelsDataSetApiModelsCreateInputModel} [nssolPlatypusApiModelsDataSetApiModelsCreateInputModel] 新規作成内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2DatasetsPost(nssolPlatypusApiModelsDataSetApiModelsCreateInputModel?: NssolPlatypusApiModelsDataSetApiModelsCreateInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsDataSetApiModelsIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2DatasetsPost(nssolPlatypusApiModelsDataSetApiModelsCreateInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 全データ種別を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2DatatypesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsDataSetApiModelsDataTypeOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2DatatypesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DataSetApi - factory interface
 * @export
 */
export const DataSetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DataSetApiFp(configuration)
    return {
        /**
         * 
         * @summary 指定された条件でページングされた状態で、データセット一覧を取得
         * @param {string} [id] IDの検索条件。  比較文字列＋数値の形式。
         * @param {string} [name] 名前
         * @param {string} [memo] メモ
         * @param {string} [createdAt] 作成時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
         * @param {number} [perPage] 表示件数。指定がない場合は上限(1000件)。
         * @param {number} [page] ページ番号。デフォルトは1。
         * @param {boolean} [withTotal] 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DatasetsGet(id?: string, name?: string, memo?: string, createdAt?: string, perPage?: number, page?: number, withTotal?: boolean, options?: any): AxiosPromise<Array<NssolPlatypusApiModelsDataSetApiModelsIndexOutputModel>> {
            return localVarFp.apiV2DatasetsGet(id, name, memo, createdAt, perPage, page, withTotal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary データセットを削除する
         * @param {number} id データセットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DatasetsIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2DatasetsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定したIDのデータセットに含まれるデータファイル情報を取得する。
         * @param {number} id データセットID
         * @param {boolean} [withUrl] 結果にダウンロード用のURLを含めるか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DatasetsIdFilesGet(id: number, withUrl?: boolean, options?: any): AxiosPromise<NssolPlatypusApiModelsDataSetApiModelsDataFileOutputModel> {
            return localVarFp.apiV2DatasetsIdFilesGet(id, withUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定したIDのデータセット詳細情報を取得する。
         * @param {number} id データセットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DatasetsIdGet(id: number, options?: any): AxiosPromise<NssolPlatypusApiModelsDataSetApiModelsDetailsOutputModel> {
            return localVarFp.apiV2DatasetsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary データセットの付属情報（メモなど、任意のタイミングで変更できるもの）を変更する。
         * @param {number} id データセットID
         * @param {NssolPlatypusApiModelsDataSetApiModelsEditInputModel} [nssolPlatypusApiModelsDataSetApiModelsEditInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DatasetsIdPatch(id: number, nssolPlatypusApiModelsDataSetApiModelsEditInputModel?: NssolPlatypusApiModelsDataSetApiModelsEditInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsDataSetApiModelsIndexOutputModel> {
            return localVarFp.apiV2DatasetsIdPatch(id, nssolPlatypusApiModelsDataSetApiModelsEditInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定したIDのデータセットに含まれるデータとNFS上のデータ名のペア情報を取得する。
         * @param {number} id データセットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DatasetsIdPathpairsGet(id: number, options?: any): AxiosPromise<Array<NssolPlatypusApiModelsDataSetApiModelsPathPairOutputModel>> {
            return localVarFp.apiV2DatasetsIdPathpairsGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary データセットのエントリ内容（学習で使用後は編集不可）を変更する
         * @param {number} id データセットID
         * @param {NssolPlatypusApiModelsDataSetApiModelsEditEntriesInputModel} [nssolPlatypusApiModelsDataSetApiModelsEditEntriesInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DatasetsIdPut(id: number, nssolPlatypusApiModelsDataSetApiModelsEditEntriesInputModel?: NssolPlatypusApiModelsDataSetApiModelsEditEntriesInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsDataSetApiModelsIndexOutputModel> {
            return localVarFp.apiV2DatasetsIdPut(id, nssolPlatypusApiModelsDataSetApiModelsEditEntriesInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary データセットを新規作成する
         * @param {NssolPlatypusApiModelsDataSetApiModelsCreateInputModel} [nssolPlatypusApiModelsDataSetApiModelsCreateInputModel] 新規作成内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DatasetsPost(nssolPlatypusApiModelsDataSetApiModelsCreateInputModel?: NssolPlatypusApiModelsDataSetApiModelsCreateInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsDataSetApiModelsIndexOutputModel> {
            return localVarFp.apiV2DatasetsPost(nssolPlatypusApiModelsDataSetApiModelsCreateInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 全データ種別を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DatatypesGet(options?: any): AxiosPromise<Array<NssolPlatypusApiModelsDataSetApiModelsDataTypeOutputModel>> {
            return localVarFp.apiV2DatatypesGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV2DatasetsGet operation in DataSetApi.
 * @export
 * @interface DataSetApiApiV2DatasetsGetRequest
 */
export interface DataSetApiApiV2DatasetsGetRequest {
    /**
     * IDの検索条件。  比較文字列＋数値の形式。
     * @type {string}
     * @memberof DataSetApiApiV2DatasetsGet
     */
    readonly id?: string

    /**
     * 名前
     * @type {string}
     * @memberof DataSetApiApiV2DatasetsGet
     */
    readonly name?: string

    /**
     * メモ
     * @type {string}
     * @memberof DataSetApiApiV2DatasetsGet
     */
    readonly memo?: string

    /**
     * 作成時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
     * @type {string}
     * @memberof DataSetApiApiV2DatasetsGet
     */
    readonly createdAt?: string

    /**
     * 表示件数。指定がない場合は上限(1000件)。
     * @type {number}
     * @memberof DataSetApiApiV2DatasetsGet
     */
    readonly perPage?: number

    /**
     * ページ番号。デフォルトは1。
     * @type {number}
     * @memberof DataSetApiApiV2DatasetsGet
     */
    readonly page?: number

    /**
     * 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
     * @type {boolean}
     * @memberof DataSetApiApiV2DatasetsGet
     */
    readonly withTotal?: boolean
}

/**
 * Request parameters for apiV2DatasetsIdDelete operation in DataSetApi.
 * @export
 * @interface DataSetApiApiV2DatasetsIdDeleteRequest
 */
export interface DataSetApiApiV2DatasetsIdDeleteRequest {
    /**
     * データセットID
     * @type {number}
     * @memberof DataSetApiApiV2DatasetsIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiV2DatasetsIdFilesGet operation in DataSetApi.
 * @export
 * @interface DataSetApiApiV2DatasetsIdFilesGetRequest
 */
export interface DataSetApiApiV2DatasetsIdFilesGetRequest {
    /**
     * データセットID
     * @type {number}
     * @memberof DataSetApiApiV2DatasetsIdFilesGet
     */
    readonly id: number

    /**
     * 結果にダウンロード用のURLを含めるか
     * @type {boolean}
     * @memberof DataSetApiApiV2DatasetsIdFilesGet
     */
    readonly withUrl?: boolean
}

/**
 * Request parameters for apiV2DatasetsIdGet operation in DataSetApi.
 * @export
 * @interface DataSetApiApiV2DatasetsIdGetRequest
 */
export interface DataSetApiApiV2DatasetsIdGetRequest {
    /**
     * データセットID
     * @type {number}
     * @memberof DataSetApiApiV2DatasetsIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV2DatasetsIdPatch operation in DataSetApi.
 * @export
 * @interface DataSetApiApiV2DatasetsIdPatchRequest
 */
export interface DataSetApiApiV2DatasetsIdPatchRequest {
    /**
     * データセットID
     * @type {number}
     * @memberof DataSetApiApiV2DatasetsIdPatch
     */
    readonly id: number

    /**
     * 変更内容
     * @type {NssolPlatypusApiModelsDataSetApiModelsEditInputModel}
     * @memberof DataSetApiApiV2DatasetsIdPatch
     */
    readonly nssolPlatypusApiModelsDataSetApiModelsEditInputModel?: NssolPlatypusApiModelsDataSetApiModelsEditInputModel
}

/**
 * Request parameters for apiV2DatasetsIdPathpairsGet operation in DataSetApi.
 * @export
 * @interface DataSetApiApiV2DatasetsIdPathpairsGetRequest
 */
export interface DataSetApiApiV2DatasetsIdPathpairsGetRequest {
    /**
     * データセットID
     * @type {number}
     * @memberof DataSetApiApiV2DatasetsIdPathpairsGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV2DatasetsIdPut operation in DataSetApi.
 * @export
 * @interface DataSetApiApiV2DatasetsIdPutRequest
 */
export interface DataSetApiApiV2DatasetsIdPutRequest {
    /**
     * データセットID
     * @type {number}
     * @memberof DataSetApiApiV2DatasetsIdPut
     */
    readonly id: number

    /**
     * 変更内容
     * @type {NssolPlatypusApiModelsDataSetApiModelsEditEntriesInputModel}
     * @memberof DataSetApiApiV2DatasetsIdPut
     */
    readonly nssolPlatypusApiModelsDataSetApiModelsEditEntriesInputModel?: NssolPlatypusApiModelsDataSetApiModelsEditEntriesInputModel
}

/**
 * Request parameters for apiV2DatasetsPost operation in DataSetApi.
 * @export
 * @interface DataSetApiApiV2DatasetsPostRequest
 */
export interface DataSetApiApiV2DatasetsPostRequest {
    /**
     * 新規作成内容
     * @type {NssolPlatypusApiModelsDataSetApiModelsCreateInputModel}
     * @memberof DataSetApiApiV2DatasetsPost
     */
    readonly nssolPlatypusApiModelsDataSetApiModelsCreateInputModel?: NssolPlatypusApiModelsDataSetApiModelsCreateInputModel
}

/**
 * DataSetApi - object-oriented interface
 * @export
 * @class DataSetApi
 * @extends {BaseAPI}
 */
export class DataSetApi extends BaseAPI {
    /**
     * 
     * @summary 指定された条件でページングされた状態で、データセット一覧を取得
     * @param {DataSetApiApiV2DatasetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public apiV2DatasetsGet(requestParameters: DataSetApiApiV2DatasetsGetRequest = {}, options?: AxiosRequestConfig) {
        return DataSetApiFp(this.configuration).apiV2DatasetsGet(requestParameters.id, requestParameters.name, requestParameters.memo, requestParameters.createdAt, requestParameters.perPage, requestParameters.page, requestParameters.withTotal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary データセットを削除する
     * @param {DataSetApiApiV2DatasetsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public apiV2DatasetsIdDelete(requestParameters: DataSetApiApiV2DatasetsIdDeleteRequest, options?: AxiosRequestConfig) {
        return DataSetApiFp(this.configuration).apiV2DatasetsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定したIDのデータセットに含まれるデータファイル情報を取得する。
     * @param {DataSetApiApiV2DatasetsIdFilesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public apiV2DatasetsIdFilesGet(requestParameters: DataSetApiApiV2DatasetsIdFilesGetRequest, options?: AxiosRequestConfig) {
        return DataSetApiFp(this.configuration).apiV2DatasetsIdFilesGet(requestParameters.id, requestParameters.withUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定したIDのデータセット詳細情報を取得する。
     * @param {DataSetApiApiV2DatasetsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public apiV2DatasetsIdGet(requestParameters: DataSetApiApiV2DatasetsIdGetRequest, options?: AxiosRequestConfig) {
        return DataSetApiFp(this.configuration).apiV2DatasetsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary データセットの付属情報（メモなど、任意のタイミングで変更できるもの）を変更する。
     * @param {DataSetApiApiV2DatasetsIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public apiV2DatasetsIdPatch(requestParameters: DataSetApiApiV2DatasetsIdPatchRequest, options?: AxiosRequestConfig) {
        return DataSetApiFp(this.configuration).apiV2DatasetsIdPatch(requestParameters.id, requestParameters.nssolPlatypusApiModelsDataSetApiModelsEditInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定したIDのデータセットに含まれるデータとNFS上のデータ名のペア情報を取得する。
     * @param {DataSetApiApiV2DatasetsIdPathpairsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public apiV2DatasetsIdPathpairsGet(requestParameters: DataSetApiApiV2DatasetsIdPathpairsGetRequest, options?: AxiosRequestConfig) {
        return DataSetApiFp(this.configuration).apiV2DatasetsIdPathpairsGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary データセットのエントリ内容（学習で使用後は編集不可）を変更する
     * @param {DataSetApiApiV2DatasetsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public apiV2DatasetsIdPut(requestParameters: DataSetApiApiV2DatasetsIdPutRequest, options?: AxiosRequestConfig) {
        return DataSetApiFp(this.configuration).apiV2DatasetsIdPut(requestParameters.id, requestParameters.nssolPlatypusApiModelsDataSetApiModelsEditEntriesInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary データセットを新規作成する
     * @param {DataSetApiApiV2DatasetsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public apiV2DatasetsPost(requestParameters: DataSetApiApiV2DatasetsPostRequest = {}, options?: AxiosRequestConfig) {
        return DataSetApiFp(this.configuration).apiV2DatasetsPost(requestParameters.nssolPlatypusApiModelsDataSetApiModelsCreateInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 全データ種別を取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSetApi
     */
    public apiV2DatatypesGet(options?: AxiosRequestConfig) {
        return DataSetApiFp(this.configuration).apiV2DatatypesGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ExperimentApi - axios parameter creator
 * @export
 */
export const ExperimentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 指定された条件でページングされた状態で、実験一覧を取得する
         * @param {string} [id] IDの検索条件。  比較文字列＋数値の形式。
         * @param {string} [name] 名前
         * @param {string} [startedAt] 実行時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
         * @param {number} [perPage] 表示件数。指定がない場合は上限(1000件)。
         * @param {number} [page] ページ番号。デフォルトは1。
         * @param {boolean} [withTotal] 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ExperimentGet: async (id?: string, name?: string, startedAt?: string, perPage?: number, page?: number, withTotal?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/experiment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (startedAt !== undefined) {
                localVarQueryParameter['StartedAt'] = startedAt;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (withTotal !== undefined) {
                localVarQueryParameter['withTotal'] = withTotal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 実験を削除する
         * @param {number} id 実験ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ExperimentIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2ExperimentIdDelete', 'id', id)
            const localVarPath = `/api/v2/experiment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary アクアリウム推論を削除する
         * @param {number} id 実験ID
         * @param {number} evaluationId アクアリウム推論ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ExperimentIdEvaluationsEvaluationIdDelete: async (id: number, evaluationId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2ExperimentIdEvaluationsEvaluationIdDelete', 'id', id)
            // verify required parameter 'evaluationId' is not null or undefined
            assertParamExists('apiV2ExperimentIdEvaluationsEvaluationIdDelete', 'evaluationId', evaluationId)
            const localVarPath = `/api/v2/experiment/{id}/evaluations/{evaluationId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"evaluationId"}}`, encodeURIComponent(String(evaluationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary アクアリウム推論一覧を取得する
         * @param {number} id 実験ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ExperimentIdEvaluationsGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2ExperimentIdEvaluationsGet', 'id', id)
            const localVarPath = `/api/v2/experiment/{id}/evaluations`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary アクアリウム推論を作成する
         * @param {number} id 実験ID
         * @param {NssolPlatypusApiModelsExperimentApiModelsEvaluationCreateInputModel} [nssolPlatypusApiModelsExperimentApiModelsEvaluationCreateInputModel] アクアリウム推論
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ExperimentIdEvaluationsPost: async (id: number, nssolPlatypusApiModelsExperimentApiModelsEvaluationCreateInputModel?: NssolPlatypusApiModelsExperimentApiModelsEvaluationCreateInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2ExperimentIdEvaluationsPost', 'id', id)
            const localVarPath = `/api/v2/experiment/{id}/evaluations`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsExperimentApiModelsEvaluationCreateInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 実験を取得する
         * @param {number} id 実験ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ExperimentIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2ExperimentIdGet', 'id', id)
            const localVarPath = `/api/v2/experiment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 前処理を正常終了させ、後続の学習を開始する
         * @param {number} id 学習履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ExperimentIdPreprocessingCompletePost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2ExperimentIdPreprocessingCompletePost', 'id', id)
            const localVarPath = `/api/v2/experiment/{id}/preprocessing/complete`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 実験を開始する
         * @param {NssolPlatypusApiModelsExperimentApiModelsCreateInputModel} [nssolPlatypusApiModelsExperimentApiModelsCreateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ExperimentRunPost: async (nssolPlatypusApiModelsExperimentApiModelsCreateInputModel?: NssolPlatypusApiModelsExperimentApiModelsCreateInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/experiment/run`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsExperimentApiModelsCreateInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExperimentApi - functional programming interface
 * @export
 */
export const ExperimentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExperimentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 指定された条件でページングされた状態で、実験一覧を取得する
         * @param {string} [id] IDの検索条件。  比較文字列＋数値の形式。
         * @param {string} [name] 名前
         * @param {string} [startedAt] 実行時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
         * @param {number} [perPage] 表示件数。指定がない場合は上限(1000件)。
         * @param {number} [page] ページ番号。デフォルトは1。
         * @param {boolean} [withTotal] 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2ExperimentGet(id?: string, name?: string, startedAt?: string, perPage?: number, page?: number, withTotal?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsExperimentApiModelsIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2ExperimentGet(id, name, startedAt, perPage, page, withTotal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 実験を削除する
         * @param {number} id 実験ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2ExperimentIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2ExperimentIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary アクアリウム推論を削除する
         * @param {number} id 実験ID
         * @param {number} evaluationId アクアリウム推論ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2ExperimentIdEvaluationsEvaluationIdDelete(id: number, evaluationId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2ExperimentIdEvaluationsEvaluationIdDelete(id, evaluationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary アクアリウム推論一覧を取得する
         * @param {number} id 実験ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2ExperimentIdEvaluationsGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsExperimentApiModelsEvaluationIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2ExperimentIdEvaluationsGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary アクアリウム推論を作成する
         * @param {number} id 実験ID
         * @param {NssolPlatypusApiModelsExperimentApiModelsEvaluationCreateInputModel} [nssolPlatypusApiModelsExperimentApiModelsEvaluationCreateInputModel] アクアリウム推論
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2ExperimentIdEvaluationsPost(id: number, nssolPlatypusApiModelsExperimentApiModelsEvaluationCreateInputModel?: NssolPlatypusApiModelsExperimentApiModelsEvaluationCreateInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsExperimentApiModelsEvaluationSimpleOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2ExperimentIdEvaluationsPost(id, nssolPlatypusApiModelsExperimentApiModelsEvaluationCreateInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 実験を取得する
         * @param {number} id 実験ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2ExperimentIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsExperimentApiModelsDetailsOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2ExperimentIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 前処理を正常終了させ、後続の学習を開始する
         * @param {number} id 学習履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2ExperimentIdPreprocessingCompletePost(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsExperimentApiModelsSimpleOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2ExperimentIdPreprocessingCompletePost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 実験を開始する
         * @param {NssolPlatypusApiModelsExperimentApiModelsCreateInputModel} [nssolPlatypusApiModelsExperimentApiModelsCreateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2ExperimentRunPost(nssolPlatypusApiModelsExperimentApiModelsCreateInputModel?: NssolPlatypusApiModelsExperimentApiModelsCreateInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsExperimentApiModelsSimpleOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2ExperimentRunPost(nssolPlatypusApiModelsExperimentApiModelsCreateInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExperimentApi - factory interface
 * @export
 */
export const ExperimentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExperimentApiFp(configuration)
    return {
        /**
         * 
         * @summary 指定された条件でページングされた状態で、実験一覧を取得する
         * @param {string} [id] IDの検索条件。  比較文字列＋数値の形式。
         * @param {string} [name] 名前
         * @param {string} [startedAt] 実行時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
         * @param {number} [perPage] 表示件数。指定がない場合は上限(1000件)。
         * @param {number} [page] ページ番号。デフォルトは1。
         * @param {boolean} [withTotal] 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ExperimentGet(id?: string, name?: string, startedAt?: string, perPage?: number, page?: number, withTotal?: boolean, options?: any): AxiosPromise<Array<NssolPlatypusApiModelsExperimentApiModelsIndexOutputModel>> {
            return localVarFp.apiV2ExperimentGet(id, name, startedAt, perPage, page, withTotal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 実験を削除する
         * @param {number} id 実験ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ExperimentIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2ExperimentIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary アクアリウム推論を削除する
         * @param {number} id 実験ID
         * @param {number} evaluationId アクアリウム推論ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ExperimentIdEvaluationsEvaluationIdDelete(id: number, evaluationId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2ExperimentIdEvaluationsEvaluationIdDelete(id, evaluationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary アクアリウム推論一覧を取得する
         * @param {number} id 実験ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ExperimentIdEvaluationsGet(id: number, options?: any): AxiosPromise<Array<NssolPlatypusApiModelsExperimentApiModelsEvaluationIndexOutputModel>> {
            return localVarFp.apiV2ExperimentIdEvaluationsGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary アクアリウム推論を作成する
         * @param {number} id 実験ID
         * @param {NssolPlatypusApiModelsExperimentApiModelsEvaluationCreateInputModel} [nssolPlatypusApiModelsExperimentApiModelsEvaluationCreateInputModel] アクアリウム推論
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ExperimentIdEvaluationsPost(id: number, nssolPlatypusApiModelsExperimentApiModelsEvaluationCreateInputModel?: NssolPlatypusApiModelsExperimentApiModelsEvaluationCreateInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsExperimentApiModelsEvaluationSimpleOutputModel> {
            return localVarFp.apiV2ExperimentIdEvaluationsPost(id, nssolPlatypusApiModelsExperimentApiModelsEvaluationCreateInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 実験を取得する
         * @param {number} id 実験ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ExperimentIdGet(id: number, options?: any): AxiosPromise<NssolPlatypusApiModelsExperimentApiModelsDetailsOutputModel> {
            return localVarFp.apiV2ExperimentIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 前処理を正常終了させ、後続の学習を開始する
         * @param {number} id 学習履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ExperimentIdPreprocessingCompletePost(id: number, options?: any): AxiosPromise<NssolPlatypusApiModelsExperimentApiModelsSimpleOutputModel> {
            return localVarFp.apiV2ExperimentIdPreprocessingCompletePost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 実験を開始する
         * @param {NssolPlatypusApiModelsExperimentApiModelsCreateInputModel} [nssolPlatypusApiModelsExperimentApiModelsCreateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ExperimentRunPost(nssolPlatypusApiModelsExperimentApiModelsCreateInputModel?: NssolPlatypusApiModelsExperimentApiModelsCreateInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsExperimentApiModelsSimpleOutputModel> {
            return localVarFp.apiV2ExperimentRunPost(nssolPlatypusApiModelsExperimentApiModelsCreateInputModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV2ExperimentGet operation in ExperimentApi.
 * @export
 * @interface ExperimentApiApiV2ExperimentGetRequest
 */
export interface ExperimentApiApiV2ExperimentGetRequest {
    /**
     * IDの検索条件。  比較文字列＋数値の形式。
     * @type {string}
     * @memberof ExperimentApiApiV2ExperimentGet
     */
    readonly id?: string

    /**
     * 名前
     * @type {string}
     * @memberof ExperimentApiApiV2ExperimentGet
     */
    readonly name?: string

    /**
     * 実行時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
     * @type {string}
     * @memberof ExperimentApiApiV2ExperimentGet
     */
    readonly startedAt?: string

    /**
     * 表示件数。指定がない場合は上限(1000件)。
     * @type {number}
     * @memberof ExperimentApiApiV2ExperimentGet
     */
    readonly perPage?: number

    /**
     * ページ番号。デフォルトは1。
     * @type {number}
     * @memberof ExperimentApiApiV2ExperimentGet
     */
    readonly page?: number

    /**
     * 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
     * @type {boolean}
     * @memberof ExperimentApiApiV2ExperimentGet
     */
    readonly withTotal?: boolean
}

/**
 * Request parameters for apiV2ExperimentIdDelete operation in ExperimentApi.
 * @export
 * @interface ExperimentApiApiV2ExperimentIdDeleteRequest
 */
export interface ExperimentApiApiV2ExperimentIdDeleteRequest {
    /**
     * 実験ID
     * @type {number}
     * @memberof ExperimentApiApiV2ExperimentIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiV2ExperimentIdEvaluationsEvaluationIdDelete operation in ExperimentApi.
 * @export
 * @interface ExperimentApiApiV2ExperimentIdEvaluationsEvaluationIdDeleteRequest
 */
export interface ExperimentApiApiV2ExperimentIdEvaluationsEvaluationIdDeleteRequest {
    /**
     * 実験ID
     * @type {number}
     * @memberof ExperimentApiApiV2ExperimentIdEvaluationsEvaluationIdDelete
     */
    readonly id: number

    /**
     * アクアリウム推論ID
     * @type {number}
     * @memberof ExperimentApiApiV2ExperimentIdEvaluationsEvaluationIdDelete
     */
    readonly evaluationId: number
}

/**
 * Request parameters for apiV2ExperimentIdEvaluationsGet operation in ExperimentApi.
 * @export
 * @interface ExperimentApiApiV2ExperimentIdEvaluationsGetRequest
 */
export interface ExperimentApiApiV2ExperimentIdEvaluationsGetRequest {
    /**
     * 実験ID
     * @type {number}
     * @memberof ExperimentApiApiV2ExperimentIdEvaluationsGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV2ExperimentIdEvaluationsPost operation in ExperimentApi.
 * @export
 * @interface ExperimentApiApiV2ExperimentIdEvaluationsPostRequest
 */
export interface ExperimentApiApiV2ExperimentIdEvaluationsPostRequest {
    /**
     * 実験ID
     * @type {number}
     * @memberof ExperimentApiApiV2ExperimentIdEvaluationsPost
     */
    readonly id: number

    /**
     * アクアリウム推論
     * @type {NssolPlatypusApiModelsExperimentApiModelsEvaluationCreateInputModel}
     * @memberof ExperimentApiApiV2ExperimentIdEvaluationsPost
     */
    readonly nssolPlatypusApiModelsExperimentApiModelsEvaluationCreateInputModel?: NssolPlatypusApiModelsExperimentApiModelsEvaluationCreateInputModel
}

/**
 * Request parameters for apiV2ExperimentIdGet operation in ExperimentApi.
 * @export
 * @interface ExperimentApiApiV2ExperimentIdGetRequest
 */
export interface ExperimentApiApiV2ExperimentIdGetRequest {
    /**
     * 実験ID
     * @type {number}
     * @memberof ExperimentApiApiV2ExperimentIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV2ExperimentIdPreprocessingCompletePost operation in ExperimentApi.
 * @export
 * @interface ExperimentApiApiV2ExperimentIdPreprocessingCompletePostRequest
 */
export interface ExperimentApiApiV2ExperimentIdPreprocessingCompletePostRequest {
    /**
     * 学習履歴ID
     * @type {number}
     * @memberof ExperimentApiApiV2ExperimentIdPreprocessingCompletePost
     */
    readonly id: number
}

/**
 * Request parameters for apiV2ExperimentRunPost operation in ExperimentApi.
 * @export
 * @interface ExperimentApiApiV2ExperimentRunPostRequest
 */
export interface ExperimentApiApiV2ExperimentRunPostRequest {
    /**
     * 
     * @type {NssolPlatypusApiModelsExperimentApiModelsCreateInputModel}
     * @memberof ExperimentApiApiV2ExperimentRunPost
     */
    readonly nssolPlatypusApiModelsExperimentApiModelsCreateInputModel?: NssolPlatypusApiModelsExperimentApiModelsCreateInputModel
}

/**
 * ExperimentApi - object-oriented interface
 * @export
 * @class ExperimentApi
 * @extends {BaseAPI}
 */
export class ExperimentApi extends BaseAPI {
    /**
     * 
     * @summary 指定された条件でページングされた状態で、実験一覧を取得する
     * @param {ExperimentApiApiV2ExperimentGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentApi
     */
    public apiV2ExperimentGet(requestParameters: ExperimentApiApiV2ExperimentGetRequest = {}, options?: AxiosRequestConfig) {
        return ExperimentApiFp(this.configuration).apiV2ExperimentGet(requestParameters.id, requestParameters.name, requestParameters.startedAt, requestParameters.perPage, requestParameters.page, requestParameters.withTotal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 実験を削除する
     * @param {ExperimentApiApiV2ExperimentIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentApi
     */
    public apiV2ExperimentIdDelete(requestParameters: ExperimentApiApiV2ExperimentIdDeleteRequest, options?: AxiosRequestConfig) {
        return ExperimentApiFp(this.configuration).apiV2ExperimentIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary アクアリウム推論を削除する
     * @param {ExperimentApiApiV2ExperimentIdEvaluationsEvaluationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentApi
     */
    public apiV2ExperimentIdEvaluationsEvaluationIdDelete(requestParameters: ExperimentApiApiV2ExperimentIdEvaluationsEvaluationIdDeleteRequest, options?: AxiosRequestConfig) {
        return ExperimentApiFp(this.configuration).apiV2ExperimentIdEvaluationsEvaluationIdDelete(requestParameters.id, requestParameters.evaluationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary アクアリウム推論一覧を取得する
     * @param {ExperimentApiApiV2ExperimentIdEvaluationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentApi
     */
    public apiV2ExperimentIdEvaluationsGet(requestParameters: ExperimentApiApiV2ExperimentIdEvaluationsGetRequest, options?: AxiosRequestConfig) {
        return ExperimentApiFp(this.configuration).apiV2ExperimentIdEvaluationsGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary アクアリウム推論を作成する
     * @param {ExperimentApiApiV2ExperimentIdEvaluationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentApi
     */
    public apiV2ExperimentIdEvaluationsPost(requestParameters: ExperimentApiApiV2ExperimentIdEvaluationsPostRequest, options?: AxiosRequestConfig) {
        return ExperimentApiFp(this.configuration).apiV2ExperimentIdEvaluationsPost(requestParameters.id, requestParameters.nssolPlatypusApiModelsExperimentApiModelsEvaluationCreateInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 実験を取得する
     * @param {ExperimentApiApiV2ExperimentIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentApi
     */
    public apiV2ExperimentIdGet(requestParameters: ExperimentApiApiV2ExperimentIdGetRequest, options?: AxiosRequestConfig) {
        return ExperimentApiFp(this.configuration).apiV2ExperimentIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 前処理を正常終了させ、後続の学習を開始する
     * @param {ExperimentApiApiV2ExperimentIdPreprocessingCompletePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentApi
     */
    public apiV2ExperimentIdPreprocessingCompletePost(requestParameters: ExperimentApiApiV2ExperimentIdPreprocessingCompletePostRequest, options?: AxiosRequestConfig) {
        return ExperimentApiFp(this.configuration).apiV2ExperimentIdPreprocessingCompletePost(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 実験を開始する
     * @param {ExperimentApiApiV2ExperimentRunPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentApi
     */
    public apiV2ExperimentRunPost(requestParameters: ExperimentApiApiV2ExperimentRunPostRequest = {}, options?: AxiosRequestConfig) {
        return ExperimentApiFp(this.configuration).apiV2ExperimentRunPost(requestParameters.nssolPlatypusApiModelsExperimentApiModelsCreateInputModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GitApi - axios parameter creator
 * @export
 */
export const GitApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 登録済みのGitエンドポイント一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminGitEndpointsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/git/endpoints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gitエンドポイント情報の削除
         * @param {number} id 削除対象GitID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminGitEndpointsIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminGitEndpointsIdDelete', 'id', id)
            const localVarPath = `/api/v2/admin/git/endpoints/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定されたIDのGitエンドポイント情報を取得。
         * @param {number} id GitエンドポイントID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminGitEndpointsIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminGitEndpointsIdGet', 'id', id)
            const localVarPath = `/api/v2/admin/git/endpoints/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gitエンドポイント情報の編集
         * @param {number} id 編集対象GitID
         * @param {NssolPlatypusApiModelsGitApiModelsCreateInputModel} [nssolPlatypusApiModelsGitApiModelsCreateInputModel] 編集モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminGitEndpointsIdPut: async (id: number, nssolPlatypusApiModelsGitApiModelsCreateInputModel?: NssolPlatypusApiModelsGitApiModelsCreateInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminGitEndpointsIdPut', 'id', id)
            const localVarPath = `/api/v2/admin/git/endpoints/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsGitApiModelsCreateInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新規にGitエンドポイントを登録する
         * @param {NssolPlatypusApiModelsGitApiModelsCreateInputModel} [nssolPlatypusApiModelsGitApiModelsCreateInputModel] 新規作成モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminGitEndpointsPost: async (nssolPlatypusApiModelsGitApiModelsCreateInputModel?: NssolPlatypusApiModelsGitApiModelsCreateInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/git/endpoints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsGitApiModelsCreateInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Git種別一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminGitTypesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/git/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 全てのリポジトリを取得する
         * @param {number} gitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2GitGitIdReposGet: async (gitId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gitId' is not null or undefined
            assertParamExists('apiV2GitGitIdReposGet', 'gitId', gitId)
            const localVarPath = `/api/v2/git/{gitId}/repos`
                .replace(`{${"gitId"}}`, encodeURIComponent(String(gitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ブランチ一覧を取得する
         * @param {number} gitId GitId
         * @param {string} owner オーナー名
         * @param {string} repositoryName リポジトリ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2GitGitIdReposOwnerRepositoryNameBranchesGet: async (gitId: number, owner: string, repositoryName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gitId' is not null or undefined
            assertParamExists('apiV2GitGitIdReposOwnerRepositoryNameBranchesGet', 'gitId', gitId)
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('apiV2GitGitIdReposOwnerRepositoryNameBranchesGet', 'owner', owner)
            // verify required parameter 'repositoryName' is not null or undefined
            assertParamExists('apiV2GitGitIdReposOwnerRepositoryNameBranchesGet', 'repositoryName', repositoryName)
            const localVarPath = `/api/v2/git/{gitId}/repos/{owner}/{repositoryName}/branches`
                .replace(`{${"gitId"}}`, encodeURIComponent(String(gitId)))
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repositoryName"}}`, encodeURIComponent(String(repositoryName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定したコミットIDのコミット詳細を取得する
         * @param {number} gitId GitId
         * @param {string} owner オーナー名
         * @param {string} repositoryName リポジトリ名
         * @param {string} commitId コミットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2GitGitIdReposOwnerRepositoryNameCommitsCommitIdGet: async (gitId: number, owner: string, repositoryName: string, commitId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gitId' is not null or undefined
            assertParamExists('apiV2GitGitIdReposOwnerRepositoryNameCommitsCommitIdGet', 'gitId', gitId)
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('apiV2GitGitIdReposOwnerRepositoryNameCommitsCommitIdGet', 'owner', owner)
            // verify required parameter 'repositoryName' is not null or undefined
            assertParamExists('apiV2GitGitIdReposOwnerRepositoryNameCommitsCommitIdGet', 'repositoryName', repositoryName)
            // verify required parameter 'commitId' is not null or undefined
            assertParamExists('apiV2GitGitIdReposOwnerRepositoryNameCommitsCommitIdGet', 'commitId', commitId)
            const localVarPath = `/api/v2/git/{gitId}/repos/{owner}/{repositoryName}/commits/{commitId}`
                .replace(`{${"gitId"}}`, encodeURIComponent(String(gitId)))
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repositoryName"}}`, encodeURIComponent(String(repositoryName)))
                .replace(`{${"commitId"}}`, encodeURIComponent(String(commitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary コミット一覧を取得する
         * @param {number} gitId GitId
         * @param {string} owner オーナー名
         * @param {string} repositoryName リポジトリ名
         * @param {string} [branch] ブランチ名
         * @param {string} [page] ページ番号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2GitGitIdReposOwnerRepositoryNameCommitsGet: async (gitId: number, owner: string, repositoryName: string, branch?: string, page?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gitId' is not null or undefined
            assertParamExists('apiV2GitGitIdReposOwnerRepositoryNameCommitsGet', 'gitId', gitId)
            // verify required parameter 'owner' is not null or undefined
            assertParamExists('apiV2GitGitIdReposOwnerRepositoryNameCommitsGet', 'owner', owner)
            // verify required parameter 'repositoryName' is not null or undefined
            assertParamExists('apiV2GitGitIdReposOwnerRepositoryNameCommitsGet', 'repositoryName', repositoryName)
            const localVarPath = `/api/v2/git/{gitId}/repos/{owner}/{repositoryName}/commits`
                .replace(`{${"gitId"}}`, encodeURIComponent(String(gitId)))
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repositoryName"}}`, encodeURIComponent(String(repositoryName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (branch !== undefined) {
                localVarQueryParameter['branch'] = branch;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 階層化されたURLを吸収するためのダミーAPI。  製品版のSwaggerからは削除する。
         * @param {number} gitId 
         * @param {string} segments 
         * @param {string} [branch] 
         * @param {string} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2GitGitIdReposSegmentsGet: async (gitId: number, segments: string, branch?: string, page?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gitId' is not null or undefined
            assertParamExists('apiV2GitGitIdReposSegmentsGet', 'gitId', gitId)
            // verify required parameter 'segments' is not null or undefined
            assertParamExists('apiV2GitGitIdReposSegmentsGet', 'segments', segments)
            const localVarPath = `/api/v2/git/{gitId}/repos/{segments}`
                .replace(`{${"gitId"}}`, encodeURIComponent(String(gitId)))
                .replace(`{${"segments"}}`, encodeURIComponent(String(segments)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (branch !== undefined) {
                localVarQueryParameter['branch'] = branch;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary テナント管理者が選択可能な登録済みのGitエンドポイント一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantGitEndpointsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/tenant/git/endpoints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GitApi - functional programming interface
 * @export
 */
export const GitApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GitApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 登録済みのGitエンドポイント一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminGitEndpointsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsGitApiModelsIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminGitEndpointsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gitエンドポイント情報の削除
         * @param {number} id 削除対象GitID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminGitEndpointsIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminGitEndpointsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定されたIDのGitエンドポイント情報を取得。
         * @param {number} id GitエンドポイントID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminGitEndpointsIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsGitApiModelsDetailsOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminGitEndpointsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gitエンドポイント情報の編集
         * @param {number} id 編集対象GitID
         * @param {NssolPlatypusApiModelsGitApiModelsCreateInputModel} [nssolPlatypusApiModelsGitApiModelsCreateInputModel] 編集モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminGitEndpointsIdPut(id: number, nssolPlatypusApiModelsGitApiModelsCreateInputModel?: NssolPlatypusApiModelsGitApiModelsCreateInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsGitApiModelsIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminGitEndpointsIdPut(id, nssolPlatypusApiModelsGitApiModelsCreateInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新規にGitエンドポイントを登録する
         * @param {NssolPlatypusApiModelsGitApiModelsCreateInputModel} [nssolPlatypusApiModelsGitApiModelsCreateInputModel] 新規作成モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminGitEndpointsPost(nssolPlatypusApiModelsGitApiModelsCreateInputModel?: NssolPlatypusApiModelsGitApiModelsCreateInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsGitApiModelsIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminGitEndpointsPost(nssolPlatypusApiModelsGitApiModelsCreateInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Git種別一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminGitTypesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusInfrastructureInfosEnumInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminGitTypesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 全てのリポジトリを取得する
         * @param {number} gitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2GitGitIdReposGet(gitId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusServiceModelsGitRepositoryModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2GitGitIdReposGet(gitId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ブランチ一覧を取得する
         * @param {number} gitId GitId
         * @param {string} owner オーナー名
         * @param {string} repositoryName リポジトリ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2GitGitIdReposOwnerRepositoryNameBranchesGet(gitId: number, owner: string, repositoryName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusServiceModelsGitBranchModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2GitGitIdReposOwnerRepositoryNameBranchesGet(gitId, owner, repositoryName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定したコミットIDのコミット詳細を取得する
         * @param {number} gitId GitId
         * @param {string} owner オーナー名
         * @param {string} repositoryName リポジトリ名
         * @param {string} commitId コミットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2GitGitIdReposOwnerRepositoryNameCommitsCommitIdGet(gitId: number, owner: string, repositoryName: string, commitId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusServiceModelsGitCommitModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2GitGitIdReposOwnerRepositoryNameCommitsCommitIdGet(gitId, owner, repositoryName, commitId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary コミット一覧を取得する
         * @param {number} gitId GitId
         * @param {string} owner オーナー名
         * @param {string} repositoryName リポジトリ名
         * @param {string} [branch] ブランチ名
         * @param {string} [page] ページ番号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2GitGitIdReposOwnerRepositoryNameCommitsGet(gitId: number, owner: string, repositoryName: string, branch?: string, page?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusServiceModelsGitCommitModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2GitGitIdReposOwnerRepositoryNameCommitsGet(gitId, owner, repositoryName, branch, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 階層化されたURLを吸収するためのダミーAPI。  製品版のSwaggerからは削除する。
         * @param {number} gitId 
         * @param {string} segments 
         * @param {string} [branch] 
         * @param {string} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2GitGitIdReposSegmentsGet(gitId: number, segments: string, branch?: string, page?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2GitGitIdReposSegmentsGet(gitId, segments, branch, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary テナント管理者が選択可能な登録済みのGitエンドポイント一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TenantGitEndpointsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsGitApiModelsIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TenantGitEndpointsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GitApi - factory interface
 * @export
 */
export const GitApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GitApiFp(configuration)
    return {
        /**
         * 
         * @summary 登録済みのGitエンドポイント一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminGitEndpointsGet(options?: any): AxiosPromise<Array<NssolPlatypusApiModelsGitApiModelsIndexOutputModel>> {
            return localVarFp.apiV2AdminGitEndpointsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gitエンドポイント情報の削除
         * @param {number} id 削除対象GitID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminGitEndpointsIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2AdminGitEndpointsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定されたIDのGitエンドポイント情報を取得。
         * @param {number} id GitエンドポイントID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminGitEndpointsIdGet(id: number, options?: any): AxiosPromise<NssolPlatypusApiModelsGitApiModelsDetailsOutputModel> {
            return localVarFp.apiV2AdminGitEndpointsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gitエンドポイント情報の編集
         * @param {number} id 編集対象GitID
         * @param {NssolPlatypusApiModelsGitApiModelsCreateInputModel} [nssolPlatypusApiModelsGitApiModelsCreateInputModel] 編集モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminGitEndpointsIdPut(id: number, nssolPlatypusApiModelsGitApiModelsCreateInputModel?: NssolPlatypusApiModelsGitApiModelsCreateInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsGitApiModelsIndexOutputModel> {
            return localVarFp.apiV2AdminGitEndpointsIdPut(id, nssolPlatypusApiModelsGitApiModelsCreateInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新規にGitエンドポイントを登録する
         * @param {NssolPlatypusApiModelsGitApiModelsCreateInputModel} [nssolPlatypusApiModelsGitApiModelsCreateInputModel] 新規作成モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminGitEndpointsPost(nssolPlatypusApiModelsGitApiModelsCreateInputModel?: NssolPlatypusApiModelsGitApiModelsCreateInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsGitApiModelsIndexOutputModel> {
            return localVarFp.apiV2AdminGitEndpointsPost(nssolPlatypusApiModelsGitApiModelsCreateInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Git種別一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminGitTypesGet(options?: any): AxiosPromise<Array<NssolPlatypusInfrastructureInfosEnumInfo>> {
            return localVarFp.apiV2AdminGitTypesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 全てのリポジトリを取得する
         * @param {number} gitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2GitGitIdReposGet(gitId: number, options?: any): AxiosPromise<Array<NssolPlatypusServiceModelsGitRepositoryModel>> {
            return localVarFp.apiV2GitGitIdReposGet(gitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ブランチ一覧を取得する
         * @param {number} gitId GitId
         * @param {string} owner オーナー名
         * @param {string} repositoryName リポジトリ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2GitGitIdReposOwnerRepositoryNameBranchesGet(gitId: number, owner: string, repositoryName: string, options?: any): AxiosPromise<Array<NssolPlatypusServiceModelsGitBranchModel>> {
            return localVarFp.apiV2GitGitIdReposOwnerRepositoryNameBranchesGet(gitId, owner, repositoryName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定したコミットIDのコミット詳細を取得する
         * @param {number} gitId GitId
         * @param {string} owner オーナー名
         * @param {string} repositoryName リポジトリ名
         * @param {string} commitId コミットID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2GitGitIdReposOwnerRepositoryNameCommitsCommitIdGet(gitId: number, owner: string, repositoryName: string, commitId: string, options?: any): AxiosPromise<NssolPlatypusServiceModelsGitCommitModel> {
            return localVarFp.apiV2GitGitIdReposOwnerRepositoryNameCommitsCommitIdGet(gitId, owner, repositoryName, commitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary コミット一覧を取得する
         * @param {number} gitId GitId
         * @param {string} owner オーナー名
         * @param {string} repositoryName リポジトリ名
         * @param {string} [branch] ブランチ名
         * @param {string} [page] ページ番号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2GitGitIdReposOwnerRepositoryNameCommitsGet(gitId: number, owner: string, repositoryName: string, branch?: string, page?: string, options?: any): AxiosPromise<Array<NssolPlatypusServiceModelsGitCommitModel>> {
            return localVarFp.apiV2GitGitIdReposOwnerRepositoryNameCommitsGet(gitId, owner, repositoryName, branch, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 階層化されたURLを吸収するためのダミーAPI。  製品版のSwaggerからは削除する。
         * @param {number} gitId 
         * @param {string} segments 
         * @param {string} [branch] 
         * @param {string} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2GitGitIdReposSegmentsGet(gitId: number, segments: string, branch?: string, page?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2GitGitIdReposSegmentsGet(gitId, segments, branch, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary テナント管理者が選択可能な登録済みのGitエンドポイント一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantGitEndpointsGet(options?: any): AxiosPromise<Array<NssolPlatypusApiModelsGitApiModelsIndexOutputModel>> {
            return localVarFp.apiV2TenantGitEndpointsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV2AdminGitEndpointsIdDelete operation in GitApi.
 * @export
 * @interface GitApiApiV2AdminGitEndpointsIdDeleteRequest
 */
export interface GitApiApiV2AdminGitEndpointsIdDeleteRequest {
    /**
     * 削除対象GitID
     * @type {number}
     * @memberof GitApiApiV2AdminGitEndpointsIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiV2AdminGitEndpointsIdGet operation in GitApi.
 * @export
 * @interface GitApiApiV2AdminGitEndpointsIdGetRequest
 */
export interface GitApiApiV2AdminGitEndpointsIdGetRequest {
    /**
     * GitエンドポイントID
     * @type {number}
     * @memberof GitApiApiV2AdminGitEndpointsIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV2AdminGitEndpointsIdPut operation in GitApi.
 * @export
 * @interface GitApiApiV2AdminGitEndpointsIdPutRequest
 */
export interface GitApiApiV2AdminGitEndpointsIdPutRequest {
    /**
     * 編集対象GitID
     * @type {number}
     * @memberof GitApiApiV2AdminGitEndpointsIdPut
     */
    readonly id: number

    /**
     * 編集モデル
     * @type {NssolPlatypusApiModelsGitApiModelsCreateInputModel}
     * @memberof GitApiApiV2AdminGitEndpointsIdPut
     */
    readonly nssolPlatypusApiModelsGitApiModelsCreateInputModel?: NssolPlatypusApiModelsGitApiModelsCreateInputModel
}

/**
 * Request parameters for apiV2AdminGitEndpointsPost operation in GitApi.
 * @export
 * @interface GitApiApiV2AdminGitEndpointsPostRequest
 */
export interface GitApiApiV2AdminGitEndpointsPostRequest {
    /**
     * 新規作成モデル
     * @type {NssolPlatypusApiModelsGitApiModelsCreateInputModel}
     * @memberof GitApiApiV2AdminGitEndpointsPost
     */
    readonly nssolPlatypusApiModelsGitApiModelsCreateInputModel?: NssolPlatypusApiModelsGitApiModelsCreateInputModel
}

/**
 * Request parameters for apiV2GitGitIdReposGet operation in GitApi.
 * @export
 * @interface GitApiApiV2GitGitIdReposGetRequest
 */
export interface GitApiApiV2GitGitIdReposGetRequest {
    /**
     * 
     * @type {number}
     * @memberof GitApiApiV2GitGitIdReposGet
     */
    readonly gitId: number
}

/**
 * Request parameters for apiV2GitGitIdReposOwnerRepositoryNameBranchesGet operation in GitApi.
 * @export
 * @interface GitApiApiV2GitGitIdReposOwnerRepositoryNameBranchesGetRequest
 */
export interface GitApiApiV2GitGitIdReposOwnerRepositoryNameBranchesGetRequest {
    /**
     * GitId
     * @type {number}
     * @memberof GitApiApiV2GitGitIdReposOwnerRepositoryNameBranchesGet
     */
    readonly gitId: number

    /**
     * オーナー名
     * @type {string}
     * @memberof GitApiApiV2GitGitIdReposOwnerRepositoryNameBranchesGet
     */
    readonly owner: string

    /**
     * リポジトリ名
     * @type {string}
     * @memberof GitApiApiV2GitGitIdReposOwnerRepositoryNameBranchesGet
     */
    readonly repositoryName: string
}

/**
 * Request parameters for apiV2GitGitIdReposOwnerRepositoryNameCommitsCommitIdGet operation in GitApi.
 * @export
 * @interface GitApiApiV2GitGitIdReposOwnerRepositoryNameCommitsCommitIdGetRequest
 */
export interface GitApiApiV2GitGitIdReposOwnerRepositoryNameCommitsCommitIdGetRequest {
    /**
     * GitId
     * @type {number}
     * @memberof GitApiApiV2GitGitIdReposOwnerRepositoryNameCommitsCommitIdGet
     */
    readonly gitId: number

    /**
     * オーナー名
     * @type {string}
     * @memberof GitApiApiV2GitGitIdReposOwnerRepositoryNameCommitsCommitIdGet
     */
    readonly owner: string

    /**
     * リポジトリ名
     * @type {string}
     * @memberof GitApiApiV2GitGitIdReposOwnerRepositoryNameCommitsCommitIdGet
     */
    readonly repositoryName: string

    /**
     * コミットID
     * @type {string}
     * @memberof GitApiApiV2GitGitIdReposOwnerRepositoryNameCommitsCommitIdGet
     */
    readonly commitId: string
}

/**
 * Request parameters for apiV2GitGitIdReposOwnerRepositoryNameCommitsGet operation in GitApi.
 * @export
 * @interface GitApiApiV2GitGitIdReposOwnerRepositoryNameCommitsGetRequest
 */
export interface GitApiApiV2GitGitIdReposOwnerRepositoryNameCommitsGetRequest {
    /**
     * GitId
     * @type {number}
     * @memberof GitApiApiV2GitGitIdReposOwnerRepositoryNameCommitsGet
     */
    readonly gitId: number

    /**
     * オーナー名
     * @type {string}
     * @memberof GitApiApiV2GitGitIdReposOwnerRepositoryNameCommitsGet
     */
    readonly owner: string

    /**
     * リポジトリ名
     * @type {string}
     * @memberof GitApiApiV2GitGitIdReposOwnerRepositoryNameCommitsGet
     */
    readonly repositoryName: string

    /**
     * ブランチ名
     * @type {string}
     * @memberof GitApiApiV2GitGitIdReposOwnerRepositoryNameCommitsGet
     */
    readonly branch?: string

    /**
     * ページ番号
     * @type {string}
     * @memberof GitApiApiV2GitGitIdReposOwnerRepositoryNameCommitsGet
     */
    readonly page?: string
}

/**
 * Request parameters for apiV2GitGitIdReposSegmentsGet operation in GitApi.
 * @export
 * @interface GitApiApiV2GitGitIdReposSegmentsGetRequest
 */
export interface GitApiApiV2GitGitIdReposSegmentsGetRequest {
    /**
     * 
     * @type {number}
     * @memberof GitApiApiV2GitGitIdReposSegmentsGet
     */
    readonly gitId: number

    /**
     * 
     * @type {string}
     * @memberof GitApiApiV2GitGitIdReposSegmentsGet
     */
    readonly segments: string

    /**
     * 
     * @type {string}
     * @memberof GitApiApiV2GitGitIdReposSegmentsGet
     */
    readonly branch?: string

    /**
     * 
     * @type {string}
     * @memberof GitApiApiV2GitGitIdReposSegmentsGet
     */
    readonly page?: string
}

/**
 * GitApi - object-oriented interface
 * @export
 * @class GitApi
 * @extends {BaseAPI}
 */
export class GitApi extends BaseAPI {
    /**
     * 
     * @summary 登録済みのGitエンドポイント一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GitApi
     */
    public apiV2AdminGitEndpointsGet(options?: AxiosRequestConfig) {
        return GitApiFp(this.configuration).apiV2AdminGitEndpointsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gitエンドポイント情報の削除
     * @param {GitApiApiV2AdminGitEndpointsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GitApi
     */
    public apiV2AdminGitEndpointsIdDelete(requestParameters: GitApiApiV2AdminGitEndpointsIdDeleteRequest, options?: AxiosRequestConfig) {
        return GitApiFp(this.configuration).apiV2AdminGitEndpointsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定されたIDのGitエンドポイント情報を取得。
     * @param {GitApiApiV2AdminGitEndpointsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GitApi
     */
    public apiV2AdminGitEndpointsIdGet(requestParameters: GitApiApiV2AdminGitEndpointsIdGetRequest, options?: AxiosRequestConfig) {
        return GitApiFp(this.configuration).apiV2AdminGitEndpointsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gitエンドポイント情報の編集
     * @param {GitApiApiV2AdminGitEndpointsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GitApi
     */
    public apiV2AdminGitEndpointsIdPut(requestParameters: GitApiApiV2AdminGitEndpointsIdPutRequest, options?: AxiosRequestConfig) {
        return GitApiFp(this.configuration).apiV2AdminGitEndpointsIdPut(requestParameters.id, requestParameters.nssolPlatypusApiModelsGitApiModelsCreateInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新規にGitエンドポイントを登録する
     * @param {GitApiApiV2AdminGitEndpointsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GitApi
     */
    public apiV2AdminGitEndpointsPost(requestParameters: GitApiApiV2AdminGitEndpointsPostRequest = {}, options?: AxiosRequestConfig) {
        return GitApiFp(this.configuration).apiV2AdminGitEndpointsPost(requestParameters.nssolPlatypusApiModelsGitApiModelsCreateInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Git種別一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GitApi
     */
    public apiV2AdminGitTypesGet(options?: AxiosRequestConfig) {
        return GitApiFp(this.configuration).apiV2AdminGitTypesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 全てのリポジトリを取得する
     * @param {GitApiApiV2GitGitIdReposGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GitApi
     */
    public apiV2GitGitIdReposGet(requestParameters: GitApiApiV2GitGitIdReposGetRequest, options?: AxiosRequestConfig) {
        return GitApiFp(this.configuration).apiV2GitGitIdReposGet(requestParameters.gitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ブランチ一覧を取得する
     * @param {GitApiApiV2GitGitIdReposOwnerRepositoryNameBranchesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GitApi
     */
    public apiV2GitGitIdReposOwnerRepositoryNameBranchesGet(requestParameters: GitApiApiV2GitGitIdReposOwnerRepositoryNameBranchesGetRequest, options?: AxiosRequestConfig) {
        return GitApiFp(this.configuration).apiV2GitGitIdReposOwnerRepositoryNameBranchesGet(requestParameters.gitId, requestParameters.owner, requestParameters.repositoryName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定したコミットIDのコミット詳細を取得する
     * @param {GitApiApiV2GitGitIdReposOwnerRepositoryNameCommitsCommitIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GitApi
     */
    public apiV2GitGitIdReposOwnerRepositoryNameCommitsCommitIdGet(requestParameters: GitApiApiV2GitGitIdReposOwnerRepositoryNameCommitsCommitIdGetRequest, options?: AxiosRequestConfig) {
        return GitApiFp(this.configuration).apiV2GitGitIdReposOwnerRepositoryNameCommitsCommitIdGet(requestParameters.gitId, requestParameters.owner, requestParameters.repositoryName, requestParameters.commitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary コミット一覧を取得する
     * @param {GitApiApiV2GitGitIdReposOwnerRepositoryNameCommitsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GitApi
     */
    public apiV2GitGitIdReposOwnerRepositoryNameCommitsGet(requestParameters: GitApiApiV2GitGitIdReposOwnerRepositoryNameCommitsGetRequest, options?: AxiosRequestConfig) {
        return GitApiFp(this.configuration).apiV2GitGitIdReposOwnerRepositoryNameCommitsGet(requestParameters.gitId, requestParameters.owner, requestParameters.repositoryName, requestParameters.branch, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 階層化されたURLを吸収するためのダミーAPI。  製品版のSwaggerからは削除する。
     * @param {GitApiApiV2GitGitIdReposSegmentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GitApi
     */
    public apiV2GitGitIdReposSegmentsGet(requestParameters: GitApiApiV2GitGitIdReposSegmentsGetRequest, options?: AxiosRequestConfig) {
        return GitApiFp(this.configuration).apiV2GitGitIdReposSegmentsGet(requestParameters.gitId, requestParameters.segments, requestParameters.branch, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary テナント管理者が選択可能な登録済みのGitエンドポイント一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GitApi
     */
    public apiV2TenantGitEndpointsGet(options?: AxiosRequestConfig) {
        return GitApiFp(this.configuration).apiV2TenantGitEndpointsGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InferenceApi - axios parameter creator
 * @export
 */
export const InferenceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 指定された条件でページングされた状態で、全推論履歴を取得
         * @param {string} [id] IDの検索条件。  比較文字列＋数値の形式。
         * @param {string} [name] 名前
         * @param {string} [startedAt] 実行時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
         * @param {string} [startedBy] 実行者
         * @param {string} [dataSet] データセット名
         * @param {string} [memo] メモ
         * @param {string} [status] ステータス
         * @param {string} [entryPoint] 実行コマンド
         * @param {string} [parentId] マウントした学習ID
         * @param {string} [parentInferenceId] マウントした推論ID
         * @param {string} [parentName] マウントした学習名
         * @param {string} [parentInferenceName] マウントした推論名
         * @param {number} [perPage] 表示件数。指定がない場合は上限(1000件)。
         * @param {number} [page] ページ番号。デフォルトは1。
         * @param {boolean} [withTotal] 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesGet: async (id?: string, name?: string, startedAt?: string, startedBy?: string, dataSet?: string, memo?: string, status?: string, entryPoint?: string, parentId?: string, parentInferenceId?: string, parentName?: string, parentInferenceName?: string, perPage?: number, page?: number, withTotal?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/inferences`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (startedAt !== undefined) {
                localVarQueryParameter['StartedAt'] = startedAt;
            }

            if (startedBy !== undefined) {
                localVarQueryParameter['StartedBy'] = startedBy;
            }

            if (dataSet !== undefined) {
                localVarQueryParameter['DataSet'] = dataSet;
            }

            if (memo !== undefined) {
                localVarQueryParameter['Memo'] = memo;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (entryPoint !== undefined) {
                localVarQueryParameter['EntryPoint'] = entryPoint;
            }

            if (parentId !== undefined) {
                localVarQueryParameter['ParentId'] = parentId;
            }

            if (parentInferenceId !== undefined) {
                localVarQueryParameter['ParentInferenceId'] = parentInferenceId;
            }

            if (parentName !== undefined) {
                localVarQueryParameter['ParentName'] = parentName;
            }

            if (parentInferenceName !== undefined) {
                localVarQueryParameter['ParentInferenceName'] = parentInferenceName;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (withTotal !== undefined) {
                localVarQueryParameter['withTotal'] = withTotal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 推論を正常終了
         * @param {number} id 推論履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesIdCompletePost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2InferencesIdCompletePost', 'id', id)
            const localVarPath = `/api/v2/inferences/{id}/complete`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * コンテナの/output/配下から指定ディレクトリパスの直下を検索する  検索対象ディレクトリが見つからない場合もファイル・ディレクトリが空の結果を返す
         * @summary コンテナの出力ファイルの一覧を取得
         * @param {number} id 対象の推論履歴ID
         * @param {string} [path] 検索対象ディレクトリ。使用可能文字は「-_1-9a-zA-Z/」
         * @param {boolean} [withUrl] 結果にダウンロード用のURLを含めるか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesIdContainerFilesGet: async (id: number, path?: string, withUrl?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2InferencesIdContainerFilesGet', 'id', id)
            const localVarPath = `/api/v2/inferences/{id}/container-files`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            if (withUrl !== undefined) {
                localVarQueryParameter['withUrl'] = withUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 推論履歴を削除
         * @param {number} id 推論履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2InferencesIdDelete', 'id', id)
            const localVarPath = `/api/v2/inferences/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定された推論履歴のエラーイベントを取得
         * @param {number} id 推論履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesIdEventsGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2InferencesIdEventsGet', 'id', id)
            const localVarPath = `/api/v2/inferences/{id}/events`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 推論履歴添付ファイルを削除
         * @param {number} id 対象の推論履歴ID
         * @param {number} fileId 削除するファイルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesIdFilesFileIdDelete: async (id: number, fileId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2InferencesIdFilesFileIdDelete', 'id', id)
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('apiV2InferencesIdFilesFileIdDelete', 'fileId', fileId)
            const localVarPath = `/api/v2/inferences/{id}/files/{fileId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 推論履歴添付ファイルの一覧を取得
         * @param {number} id 対象の推論履歴ID
         * @param {boolean} [withUrl] 結果にダウンロード用のURLを含めるか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesIdFilesGet: async (id: number, withUrl?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2InferencesIdFilesGet', 'id', id)
            const localVarPath = `/api/v2/inferences/{id}/files`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (withUrl !== undefined) {
                localVarQueryParameter['withUrl'] = withUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 推論履歴添付ファイルのサイズ(Byte)を取得する
         * @param {number} id 対象の推論履歴ID
         * @param {string} name 対象ファイル名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesIdFilesNameSizeGet: async (id: number, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2InferencesIdFilesNameSizeGet', 'id', id)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiV2InferencesIdFilesNameSizeGet', 'name', name)
            const localVarPath = `/api/v2/inferences/{id}/files/{name}/size`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 推論履歴添付ファイルを登録
         * @param {number} id 対象の推論履歴ID
         * @param {NssolPlatypusApiModelsComponentsAddFileInputModel} [nssolPlatypusApiModelsComponentsAddFileInputModel] 追加するファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesIdFilesPost: async (id: number, nssolPlatypusApiModelsComponentsAddFileInputModel?: NssolPlatypusApiModelsComponentsAddFileInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2InferencesIdFilesPost', 'id', id)
            const localVarPath = `/api/v2/inferences/{id}/files`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsComponentsAddFileInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定されたIDの推論履歴の詳細情報を取得
         * @param {number} id 推論履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2InferencesIdGet', 'id', id)
            const localVarPath = `/api/v2/inferences/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 推論を途中で強制終了
         * @param {number} id 推論履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesIdHaltPost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2InferencesIdHaltPost', 'id', id)
            const localVarPath = `/api/v2/inferences/{id}/halt`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 推論履歴の編集
         * @param {number} id 変更対象の推論履歴ID
         * @param {NssolPlatypusApiModelsTrainingApiModelsEditInputModel} [nssolPlatypusApiModelsTrainingApiModelsEditInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesIdPut: async (id: number, nssolPlatypusApiModelsTrainingApiModelsEditInputModel?: NssolPlatypusApiModelsTrainingApiModelsEditInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2InferencesIdPut', 'id', id)
            const localVarPath = `/api/v2/inferences/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsTrainingApiModelsEditInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 推論を途中で強制終了させる。  ユーザ自身がジョブを停止させた場合。
         * @param {number} id 推論履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesIdUserCancelPost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2InferencesIdUserCancelPost', 'id', id)
            const localVarPath = `/api/v2/inferences/{id}/user-cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary マウントする推論履歴を取得
         * @param {Array<string>} [status] ステータス
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesMountGet: async (status?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/inferences/mount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (status) {
                localVarQueryParameter['Status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新規に推論を開始
         * @param {NssolPlatypusApiModelsInferenceApiModelsCreateInputModel} [nssolPlatypusApiModelsInferenceApiModelsCreateInputModel] 新規推論実行内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesRunPost: async (nssolPlatypusApiModelsInferenceApiModelsCreateInputModel?: NssolPlatypusApiModelsInferenceApiModelsCreateInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/inferences/run`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsInferenceApiModelsCreateInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 全推論履歴のIDと名前を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesSimpleGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/inferences/simple`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InferenceApi - functional programming interface
 * @export
 */
export const InferenceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InferenceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 指定された条件でページングされた状態で、全推論履歴を取得
         * @param {string} [id] IDの検索条件。  比較文字列＋数値の形式。
         * @param {string} [name] 名前
         * @param {string} [startedAt] 実行時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
         * @param {string} [startedBy] 実行者
         * @param {string} [dataSet] データセット名
         * @param {string} [memo] メモ
         * @param {string} [status] ステータス
         * @param {string} [entryPoint] 実行コマンド
         * @param {string} [parentId] マウントした学習ID
         * @param {string} [parentInferenceId] マウントした推論ID
         * @param {string} [parentName] マウントした学習名
         * @param {string} [parentInferenceName] マウントした推論名
         * @param {number} [perPage] 表示件数。指定がない場合は上限(1000件)。
         * @param {number} [page] ページ番号。デフォルトは1。
         * @param {boolean} [withTotal] 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2InferencesGet(id?: string, name?: string, startedAt?: string, startedBy?: string, dataSet?: string, memo?: string, status?: string, entryPoint?: string, parentId?: string, parentInferenceId?: string, parentName?: string, parentInferenceName?: string, perPage?: number, page?: number, withTotal?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsInferenceApiModelsInferenceIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2InferencesGet(id, name, startedAt, startedBy, dataSet, memo, status, entryPoint, parentId, parentInferenceId, parentName, parentInferenceName, perPage, page, withTotal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 推論を正常終了
         * @param {number} id 推論履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2InferencesIdCompletePost(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsInferenceApiModelsInferenceSimpleOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2InferencesIdCompletePost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * コンテナの/output/配下から指定ディレクトリパスの直下を検索する  検索対象ディレクトリが見つからない場合もファイル・ディレクトリが空の結果を返す
         * @summary コンテナの出力ファイルの一覧を取得
         * @param {number} id 対象の推論履歴ID
         * @param {string} [path] 検索対象ディレクトリ。使用可能文字は「-_1-9a-zA-Z/」
         * @param {boolean} [withUrl] 結果にダウンロード用のURLを含めるか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2InferencesIdContainerFilesGet(id: number, path?: string, withUrl?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusInfrastructureStorageListResultInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2InferencesIdContainerFilesGet(id, path, withUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 推論履歴を削除
         * @param {number} id 推論履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2InferencesIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2InferencesIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定された推論履歴のエラーイベントを取得
         * @param {number} id 推論履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2InferencesIdEventsGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusInfrastructureInfosContainerEventInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2InferencesIdEventsGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 推論履歴添付ファイルを削除
         * @param {number} id 対象の推論履歴ID
         * @param {number} fileId 削除するファイルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2InferencesIdFilesFileIdDelete(id: number, fileId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2InferencesIdFilesFileIdDelete(id, fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 推論履歴添付ファイルの一覧を取得
         * @param {number} id 対象の推論履歴ID
         * @param {boolean} [withUrl] 結果にダウンロード用のURLを含めるか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2InferencesIdFilesGet(id: number, withUrl?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsTrainingApiModelsAttachedFileOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2InferencesIdFilesGet(id, withUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 推論履歴添付ファイルのサイズ(Byte)を取得する
         * @param {number} id 対象の推論履歴ID
         * @param {string} name 対象ファイル名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2InferencesIdFilesNameSizeGet(id: number, name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsInferenceApiModelsFileOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2InferencesIdFilesNameSizeGet(id, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 推論履歴添付ファイルを登録
         * @param {number} id 対象の推論履歴ID
         * @param {NssolPlatypusApiModelsComponentsAddFileInputModel} [nssolPlatypusApiModelsComponentsAddFileInputModel] 追加するファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2InferencesIdFilesPost(id: number, nssolPlatypusApiModelsComponentsAddFileInputModel?: NssolPlatypusApiModelsComponentsAddFileInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsTrainingApiModelsAttachedFileOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2InferencesIdFilesPost(id, nssolPlatypusApiModelsComponentsAddFileInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定されたIDの推論履歴の詳細情報を取得
         * @param {number} id 推論履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2InferencesIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2InferencesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 推論を途中で強制終了
         * @param {number} id 推論履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2InferencesIdHaltPost(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsInferenceApiModelsInferenceSimpleOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2InferencesIdHaltPost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 推論履歴の編集
         * @param {number} id 変更対象の推論履歴ID
         * @param {NssolPlatypusApiModelsTrainingApiModelsEditInputModel} [nssolPlatypusApiModelsTrainingApiModelsEditInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2InferencesIdPut(id: number, nssolPlatypusApiModelsTrainingApiModelsEditInputModel?: NssolPlatypusApiModelsTrainingApiModelsEditInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsInferenceApiModelsInferenceSimpleOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2InferencesIdPut(id, nssolPlatypusApiModelsTrainingApiModelsEditInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 推論を途中で強制終了させる。  ユーザ自身がジョブを停止させた場合。
         * @param {number} id 推論履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2InferencesIdUserCancelPost(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsInferenceApiModelsInferenceSimpleOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2InferencesIdUserCancelPost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary マウントする推論履歴を取得
         * @param {Array<string>} [status] ステータス
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2InferencesMountGet(status?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsInferenceApiModelsInferenceIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2InferencesMountGet(status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新規に推論を開始
         * @param {NssolPlatypusApiModelsInferenceApiModelsCreateInputModel} [nssolPlatypusApiModelsInferenceApiModelsCreateInputModel] 新規推論実行内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2InferencesRunPost(nssolPlatypusApiModelsInferenceApiModelsCreateInputModel?: NssolPlatypusApiModelsInferenceApiModelsCreateInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsInferenceApiModelsInferenceSimpleOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2InferencesRunPost(nssolPlatypusApiModelsInferenceApiModelsCreateInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 全推論履歴のIDと名前を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2InferencesSimpleGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsInferenceApiModelsInferenceSimpleOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2InferencesSimpleGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InferenceApi - factory interface
 * @export
 */
export const InferenceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InferenceApiFp(configuration)
    return {
        /**
         * 
         * @summary 指定された条件でページングされた状態で、全推論履歴を取得
         * @param {string} [id] IDの検索条件。  比較文字列＋数値の形式。
         * @param {string} [name] 名前
         * @param {string} [startedAt] 実行時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
         * @param {string} [startedBy] 実行者
         * @param {string} [dataSet] データセット名
         * @param {string} [memo] メモ
         * @param {string} [status] ステータス
         * @param {string} [entryPoint] 実行コマンド
         * @param {string} [parentId] マウントした学習ID
         * @param {string} [parentInferenceId] マウントした推論ID
         * @param {string} [parentName] マウントした学習名
         * @param {string} [parentInferenceName] マウントした推論名
         * @param {number} [perPage] 表示件数。指定がない場合は上限(1000件)。
         * @param {number} [page] ページ番号。デフォルトは1。
         * @param {boolean} [withTotal] 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesGet(id?: string, name?: string, startedAt?: string, startedBy?: string, dataSet?: string, memo?: string, status?: string, entryPoint?: string, parentId?: string, parentInferenceId?: string, parentName?: string, parentInferenceName?: string, perPage?: number, page?: number, withTotal?: boolean, options?: any): AxiosPromise<Array<NssolPlatypusApiModelsInferenceApiModelsInferenceIndexOutputModel>> {
            return localVarFp.apiV2InferencesGet(id, name, startedAt, startedBy, dataSet, memo, status, entryPoint, parentId, parentInferenceId, parentName, parentInferenceName, perPage, page, withTotal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 推論を正常終了
         * @param {number} id 推論履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesIdCompletePost(id: number, options?: any): AxiosPromise<NssolPlatypusApiModelsInferenceApiModelsInferenceSimpleOutputModel> {
            return localVarFp.apiV2InferencesIdCompletePost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * コンテナの/output/配下から指定ディレクトリパスの直下を検索する  検索対象ディレクトリが見つからない場合もファイル・ディレクトリが空の結果を返す
         * @summary コンテナの出力ファイルの一覧を取得
         * @param {number} id 対象の推論履歴ID
         * @param {string} [path] 検索対象ディレクトリ。使用可能文字は「-_1-9a-zA-Z/」
         * @param {boolean} [withUrl] 結果にダウンロード用のURLを含めるか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesIdContainerFilesGet(id: number, path?: string, withUrl?: boolean, options?: any): AxiosPromise<NssolPlatypusInfrastructureStorageListResultInfo> {
            return localVarFp.apiV2InferencesIdContainerFilesGet(id, path, withUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 推論履歴を削除
         * @param {number} id 推論履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2InferencesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定された推論履歴のエラーイベントを取得
         * @param {number} id 推論履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesIdEventsGet(id: number, options?: any): AxiosPromise<NssolPlatypusInfrastructureInfosContainerEventInfo> {
            return localVarFp.apiV2InferencesIdEventsGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 推論履歴添付ファイルを削除
         * @param {number} id 対象の推論履歴ID
         * @param {number} fileId 削除するファイルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesIdFilesFileIdDelete(id: number, fileId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2InferencesIdFilesFileIdDelete(id, fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 推論履歴添付ファイルの一覧を取得
         * @param {number} id 対象の推論履歴ID
         * @param {boolean} [withUrl] 結果にダウンロード用のURLを含めるか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesIdFilesGet(id: number, withUrl?: boolean, options?: any): AxiosPromise<Array<NssolPlatypusApiModelsTrainingApiModelsAttachedFileOutputModel>> {
            return localVarFp.apiV2InferencesIdFilesGet(id, withUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 推論履歴添付ファイルのサイズ(Byte)を取得する
         * @param {number} id 対象の推論履歴ID
         * @param {string} name 対象ファイル名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesIdFilesNameSizeGet(id: number, name: string, options?: any): AxiosPromise<NssolPlatypusApiModelsInferenceApiModelsFileOutputModel> {
            return localVarFp.apiV2InferencesIdFilesNameSizeGet(id, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 推論履歴添付ファイルを登録
         * @param {number} id 対象の推論履歴ID
         * @param {NssolPlatypusApiModelsComponentsAddFileInputModel} [nssolPlatypusApiModelsComponentsAddFileInputModel] 追加するファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesIdFilesPost(id: number, nssolPlatypusApiModelsComponentsAddFileInputModel?: NssolPlatypusApiModelsComponentsAddFileInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsTrainingApiModelsAttachedFileOutputModel> {
            return localVarFp.apiV2InferencesIdFilesPost(id, nssolPlatypusApiModelsComponentsAddFileInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定されたIDの推論履歴の詳細情報を取得
         * @param {number} id 推論履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesIdGet(id: number, options?: any): AxiosPromise<NssolPlatypusApiModelsInferenceApiModelsInferenceDetailsOutputModel> {
            return localVarFp.apiV2InferencesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 推論を途中で強制終了
         * @param {number} id 推論履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesIdHaltPost(id: number, options?: any): AxiosPromise<NssolPlatypusApiModelsInferenceApiModelsInferenceSimpleOutputModel> {
            return localVarFp.apiV2InferencesIdHaltPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 推論履歴の編集
         * @param {number} id 変更対象の推論履歴ID
         * @param {NssolPlatypusApiModelsTrainingApiModelsEditInputModel} [nssolPlatypusApiModelsTrainingApiModelsEditInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesIdPut(id: number, nssolPlatypusApiModelsTrainingApiModelsEditInputModel?: NssolPlatypusApiModelsTrainingApiModelsEditInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsInferenceApiModelsInferenceSimpleOutputModel> {
            return localVarFp.apiV2InferencesIdPut(id, nssolPlatypusApiModelsTrainingApiModelsEditInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 推論を途中で強制終了させる。  ユーザ自身がジョブを停止させた場合。
         * @param {number} id 推論履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesIdUserCancelPost(id: number, options?: any): AxiosPromise<NssolPlatypusApiModelsInferenceApiModelsInferenceSimpleOutputModel> {
            return localVarFp.apiV2InferencesIdUserCancelPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary マウントする推論履歴を取得
         * @param {Array<string>} [status] ステータス
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesMountGet(status?: Array<string>, options?: any): AxiosPromise<Array<NssolPlatypusApiModelsInferenceApiModelsInferenceIndexOutputModel>> {
            return localVarFp.apiV2InferencesMountGet(status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新規に推論を開始
         * @param {NssolPlatypusApiModelsInferenceApiModelsCreateInputModel} [nssolPlatypusApiModelsInferenceApiModelsCreateInputModel] 新規推論実行内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesRunPost(nssolPlatypusApiModelsInferenceApiModelsCreateInputModel?: NssolPlatypusApiModelsInferenceApiModelsCreateInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsInferenceApiModelsInferenceSimpleOutputModel> {
            return localVarFp.apiV2InferencesRunPost(nssolPlatypusApiModelsInferenceApiModelsCreateInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 全推論履歴のIDと名前を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InferencesSimpleGet(options?: any): AxiosPromise<Array<NssolPlatypusApiModelsInferenceApiModelsInferenceSimpleOutputModel>> {
            return localVarFp.apiV2InferencesSimpleGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV2InferencesGet operation in InferenceApi.
 * @export
 * @interface InferenceApiApiV2InferencesGetRequest
 */
export interface InferenceApiApiV2InferencesGetRequest {
    /**
     * IDの検索条件。  比較文字列＋数値の形式。
     * @type {string}
     * @memberof InferenceApiApiV2InferencesGet
     */
    readonly id?: string

    /**
     * 名前
     * @type {string}
     * @memberof InferenceApiApiV2InferencesGet
     */
    readonly name?: string

    /**
     * 実行時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
     * @type {string}
     * @memberof InferenceApiApiV2InferencesGet
     */
    readonly startedAt?: string

    /**
     * 実行者
     * @type {string}
     * @memberof InferenceApiApiV2InferencesGet
     */
    readonly startedBy?: string

    /**
     * データセット名
     * @type {string}
     * @memberof InferenceApiApiV2InferencesGet
     */
    readonly dataSet?: string

    /**
     * メモ
     * @type {string}
     * @memberof InferenceApiApiV2InferencesGet
     */
    readonly memo?: string

    /**
     * ステータス
     * @type {string}
     * @memberof InferenceApiApiV2InferencesGet
     */
    readonly status?: string

    /**
     * 実行コマンド
     * @type {string}
     * @memberof InferenceApiApiV2InferencesGet
     */
    readonly entryPoint?: string

    /**
     * マウントした学習ID
     * @type {string}
     * @memberof InferenceApiApiV2InferencesGet
     */
    readonly parentId?: string

    /**
     * マウントした推論ID
     * @type {string}
     * @memberof InferenceApiApiV2InferencesGet
     */
    readonly parentInferenceId?: string

    /**
     * マウントした学習名
     * @type {string}
     * @memberof InferenceApiApiV2InferencesGet
     */
    readonly parentName?: string

    /**
     * マウントした推論名
     * @type {string}
     * @memberof InferenceApiApiV2InferencesGet
     */
    readonly parentInferenceName?: string

    /**
     * 表示件数。指定がない場合は上限(1000件)。
     * @type {number}
     * @memberof InferenceApiApiV2InferencesGet
     */
    readonly perPage?: number

    /**
     * ページ番号。デフォルトは1。
     * @type {number}
     * @memberof InferenceApiApiV2InferencesGet
     */
    readonly page?: number

    /**
     * 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
     * @type {boolean}
     * @memberof InferenceApiApiV2InferencesGet
     */
    readonly withTotal?: boolean
}

/**
 * Request parameters for apiV2InferencesIdCompletePost operation in InferenceApi.
 * @export
 * @interface InferenceApiApiV2InferencesIdCompletePostRequest
 */
export interface InferenceApiApiV2InferencesIdCompletePostRequest {
    /**
     * 推論履歴ID
     * @type {number}
     * @memberof InferenceApiApiV2InferencesIdCompletePost
     */
    readonly id: number
}

/**
 * Request parameters for apiV2InferencesIdContainerFilesGet operation in InferenceApi.
 * @export
 * @interface InferenceApiApiV2InferencesIdContainerFilesGetRequest
 */
export interface InferenceApiApiV2InferencesIdContainerFilesGetRequest {
    /**
     * 対象の推論履歴ID
     * @type {number}
     * @memberof InferenceApiApiV2InferencesIdContainerFilesGet
     */
    readonly id: number

    /**
     * 検索対象ディレクトリ。使用可能文字は「-_1-9a-zA-Z/」
     * @type {string}
     * @memberof InferenceApiApiV2InferencesIdContainerFilesGet
     */
    readonly path?: string

    /**
     * 結果にダウンロード用のURLを含めるか
     * @type {boolean}
     * @memberof InferenceApiApiV2InferencesIdContainerFilesGet
     */
    readonly withUrl?: boolean
}

/**
 * Request parameters for apiV2InferencesIdDelete operation in InferenceApi.
 * @export
 * @interface InferenceApiApiV2InferencesIdDeleteRequest
 */
export interface InferenceApiApiV2InferencesIdDeleteRequest {
    /**
     * 推論履歴ID
     * @type {number}
     * @memberof InferenceApiApiV2InferencesIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiV2InferencesIdEventsGet operation in InferenceApi.
 * @export
 * @interface InferenceApiApiV2InferencesIdEventsGetRequest
 */
export interface InferenceApiApiV2InferencesIdEventsGetRequest {
    /**
     * 推論履歴ID
     * @type {number}
     * @memberof InferenceApiApiV2InferencesIdEventsGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV2InferencesIdFilesFileIdDelete operation in InferenceApi.
 * @export
 * @interface InferenceApiApiV2InferencesIdFilesFileIdDeleteRequest
 */
export interface InferenceApiApiV2InferencesIdFilesFileIdDeleteRequest {
    /**
     * 対象の推論履歴ID
     * @type {number}
     * @memberof InferenceApiApiV2InferencesIdFilesFileIdDelete
     */
    readonly id: number

    /**
     * 削除するファイルのID
     * @type {number}
     * @memberof InferenceApiApiV2InferencesIdFilesFileIdDelete
     */
    readonly fileId: number
}

/**
 * Request parameters for apiV2InferencesIdFilesGet operation in InferenceApi.
 * @export
 * @interface InferenceApiApiV2InferencesIdFilesGetRequest
 */
export interface InferenceApiApiV2InferencesIdFilesGetRequest {
    /**
     * 対象の推論履歴ID
     * @type {number}
     * @memberof InferenceApiApiV2InferencesIdFilesGet
     */
    readonly id: number

    /**
     * 結果にダウンロード用のURLを含めるか
     * @type {boolean}
     * @memberof InferenceApiApiV2InferencesIdFilesGet
     */
    readonly withUrl?: boolean
}

/**
 * Request parameters for apiV2InferencesIdFilesNameSizeGet operation in InferenceApi.
 * @export
 * @interface InferenceApiApiV2InferencesIdFilesNameSizeGetRequest
 */
export interface InferenceApiApiV2InferencesIdFilesNameSizeGetRequest {
    /**
     * 対象の推論履歴ID
     * @type {number}
     * @memberof InferenceApiApiV2InferencesIdFilesNameSizeGet
     */
    readonly id: number

    /**
     * 対象ファイル名
     * @type {string}
     * @memberof InferenceApiApiV2InferencesIdFilesNameSizeGet
     */
    readonly name: string
}

/**
 * Request parameters for apiV2InferencesIdFilesPost operation in InferenceApi.
 * @export
 * @interface InferenceApiApiV2InferencesIdFilesPostRequest
 */
export interface InferenceApiApiV2InferencesIdFilesPostRequest {
    /**
     * 対象の推論履歴ID
     * @type {number}
     * @memberof InferenceApiApiV2InferencesIdFilesPost
     */
    readonly id: number

    /**
     * 追加するファイル情報
     * @type {NssolPlatypusApiModelsComponentsAddFileInputModel}
     * @memberof InferenceApiApiV2InferencesIdFilesPost
     */
    readonly nssolPlatypusApiModelsComponentsAddFileInputModel?: NssolPlatypusApiModelsComponentsAddFileInputModel
}

/**
 * Request parameters for apiV2InferencesIdGet operation in InferenceApi.
 * @export
 * @interface InferenceApiApiV2InferencesIdGetRequest
 */
export interface InferenceApiApiV2InferencesIdGetRequest {
    /**
     * 推論履歴ID
     * @type {number}
     * @memberof InferenceApiApiV2InferencesIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV2InferencesIdHaltPost operation in InferenceApi.
 * @export
 * @interface InferenceApiApiV2InferencesIdHaltPostRequest
 */
export interface InferenceApiApiV2InferencesIdHaltPostRequest {
    /**
     * 推論履歴ID
     * @type {number}
     * @memberof InferenceApiApiV2InferencesIdHaltPost
     */
    readonly id: number
}

/**
 * Request parameters for apiV2InferencesIdPut operation in InferenceApi.
 * @export
 * @interface InferenceApiApiV2InferencesIdPutRequest
 */
export interface InferenceApiApiV2InferencesIdPutRequest {
    /**
     * 変更対象の推論履歴ID
     * @type {number}
     * @memberof InferenceApiApiV2InferencesIdPut
     */
    readonly id: number

    /**
     * 変更内容
     * @type {NssolPlatypusApiModelsTrainingApiModelsEditInputModel}
     * @memberof InferenceApiApiV2InferencesIdPut
     */
    readonly nssolPlatypusApiModelsTrainingApiModelsEditInputModel?: NssolPlatypusApiModelsTrainingApiModelsEditInputModel
}

/**
 * Request parameters for apiV2InferencesIdUserCancelPost operation in InferenceApi.
 * @export
 * @interface InferenceApiApiV2InferencesIdUserCancelPostRequest
 */
export interface InferenceApiApiV2InferencesIdUserCancelPostRequest {
    /**
     * 推論履歴ID
     * @type {number}
     * @memberof InferenceApiApiV2InferencesIdUserCancelPost
     */
    readonly id: number
}

/**
 * Request parameters for apiV2InferencesMountGet operation in InferenceApi.
 * @export
 * @interface InferenceApiApiV2InferencesMountGetRequest
 */
export interface InferenceApiApiV2InferencesMountGetRequest {
    /**
     * ステータス
     * @type {Array<string>}
     * @memberof InferenceApiApiV2InferencesMountGet
     */
    readonly status?: Array<string>
}

/**
 * Request parameters for apiV2InferencesRunPost operation in InferenceApi.
 * @export
 * @interface InferenceApiApiV2InferencesRunPostRequest
 */
export interface InferenceApiApiV2InferencesRunPostRequest {
    /**
     * 新規推論実行内容
     * @type {NssolPlatypusApiModelsInferenceApiModelsCreateInputModel}
     * @memberof InferenceApiApiV2InferencesRunPost
     */
    readonly nssolPlatypusApiModelsInferenceApiModelsCreateInputModel?: NssolPlatypusApiModelsInferenceApiModelsCreateInputModel
}

/**
 * InferenceApi - object-oriented interface
 * @export
 * @class InferenceApi
 * @extends {BaseAPI}
 */
export class InferenceApi extends BaseAPI {
    /**
     * 
     * @summary 指定された条件でページングされた状態で、全推論履歴を取得
     * @param {InferenceApiApiV2InferencesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InferenceApi
     */
    public apiV2InferencesGet(requestParameters: InferenceApiApiV2InferencesGetRequest = {}, options?: AxiosRequestConfig) {
        return InferenceApiFp(this.configuration).apiV2InferencesGet(requestParameters.id, requestParameters.name, requestParameters.startedAt, requestParameters.startedBy, requestParameters.dataSet, requestParameters.memo, requestParameters.status, requestParameters.entryPoint, requestParameters.parentId, requestParameters.parentInferenceId, requestParameters.parentName, requestParameters.parentInferenceName, requestParameters.perPage, requestParameters.page, requestParameters.withTotal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 推論を正常終了
     * @param {InferenceApiApiV2InferencesIdCompletePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InferenceApi
     */
    public apiV2InferencesIdCompletePost(requestParameters: InferenceApiApiV2InferencesIdCompletePostRequest, options?: AxiosRequestConfig) {
        return InferenceApiFp(this.configuration).apiV2InferencesIdCompletePost(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * コンテナの/output/配下から指定ディレクトリパスの直下を検索する  検索対象ディレクトリが見つからない場合もファイル・ディレクトリが空の結果を返す
     * @summary コンテナの出力ファイルの一覧を取得
     * @param {InferenceApiApiV2InferencesIdContainerFilesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InferenceApi
     */
    public apiV2InferencesIdContainerFilesGet(requestParameters: InferenceApiApiV2InferencesIdContainerFilesGetRequest, options?: AxiosRequestConfig) {
        return InferenceApiFp(this.configuration).apiV2InferencesIdContainerFilesGet(requestParameters.id, requestParameters.path, requestParameters.withUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 推論履歴を削除
     * @param {InferenceApiApiV2InferencesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InferenceApi
     */
    public apiV2InferencesIdDelete(requestParameters: InferenceApiApiV2InferencesIdDeleteRequest, options?: AxiosRequestConfig) {
        return InferenceApiFp(this.configuration).apiV2InferencesIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定された推論履歴のエラーイベントを取得
     * @param {InferenceApiApiV2InferencesIdEventsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InferenceApi
     */
    public apiV2InferencesIdEventsGet(requestParameters: InferenceApiApiV2InferencesIdEventsGetRequest, options?: AxiosRequestConfig) {
        return InferenceApiFp(this.configuration).apiV2InferencesIdEventsGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 推論履歴添付ファイルを削除
     * @param {InferenceApiApiV2InferencesIdFilesFileIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InferenceApi
     */
    public apiV2InferencesIdFilesFileIdDelete(requestParameters: InferenceApiApiV2InferencesIdFilesFileIdDeleteRequest, options?: AxiosRequestConfig) {
        return InferenceApiFp(this.configuration).apiV2InferencesIdFilesFileIdDelete(requestParameters.id, requestParameters.fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 推論履歴添付ファイルの一覧を取得
     * @param {InferenceApiApiV2InferencesIdFilesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InferenceApi
     */
    public apiV2InferencesIdFilesGet(requestParameters: InferenceApiApiV2InferencesIdFilesGetRequest, options?: AxiosRequestConfig) {
        return InferenceApiFp(this.configuration).apiV2InferencesIdFilesGet(requestParameters.id, requestParameters.withUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 推論履歴添付ファイルのサイズ(Byte)を取得する
     * @param {InferenceApiApiV2InferencesIdFilesNameSizeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InferenceApi
     */
    public apiV2InferencesIdFilesNameSizeGet(requestParameters: InferenceApiApiV2InferencesIdFilesNameSizeGetRequest, options?: AxiosRequestConfig) {
        return InferenceApiFp(this.configuration).apiV2InferencesIdFilesNameSizeGet(requestParameters.id, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 推論履歴添付ファイルを登録
     * @param {InferenceApiApiV2InferencesIdFilesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InferenceApi
     */
    public apiV2InferencesIdFilesPost(requestParameters: InferenceApiApiV2InferencesIdFilesPostRequest, options?: AxiosRequestConfig) {
        return InferenceApiFp(this.configuration).apiV2InferencesIdFilesPost(requestParameters.id, requestParameters.nssolPlatypusApiModelsComponentsAddFileInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定されたIDの推論履歴の詳細情報を取得
     * @param {InferenceApiApiV2InferencesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InferenceApi
     */
    public apiV2InferencesIdGet(requestParameters: InferenceApiApiV2InferencesIdGetRequest, options?: AxiosRequestConfig) {
        return InferenceApiFp(this.configuration).apiV2InferencesIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 推論を途中で強制終了
     * @param {InferenceApiApiV2InferencesIdHaltPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InferenceApi
     */
    public apiV2InferencesIdHaltPost(requestParameters: InferenceApiApiV2InferencesIdHaltPostRequest, options?: AxiosRequestConfig) {
        return InferenceApiFp(this.configuration).apiV2InferencesIdHaltPost(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 推論履歴の編集
     * @param {InferenceApiApiV2InferencesIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InferenceApi
     */
    public apiV2InferencesIdPut(requestParameters: InferenceApiApiV2InferencesIdPutRequest, options?: AxiosRequestConfig) {
        return InferenceApiFp(this.configuration).apiV2InferencesIdPut(requestParameters.id, requestParameters.nssolPlatypusApiModelsTrainingApiModelsEditInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 推論を途中で強制終了させる。  ユーザ自身がジョブを停止させた場合。
     * @param {InferenceApiApiV2InferencesIdUserCancelPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InferenceApi
     */
    public apiV2InferencesIdUserCancelPost(requestParameters: InferenceApiApiV2InferencesIdUserCancelPostRequest, options?: AxiosRequestConfig) {
        return InferenceApiFp(this.configuration).apiV2InferencesIdUserCancelPost(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary マウントする推論履歴を取得
     * @param {InferenceApiApiV2InferencesMountGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InferenceApi
     */
    public apiV2InferencesMountGet(requestParameters: InferenceApiApiV2InferencesMountGetRequest = {}, options?: AxiosRequestConfig) {
        return InferenceApiFp(this.configuration).apiV2InferencesMountGet(requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新規に推論を開始
     * @param {InferenceApiApiV2InferencesRunPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InferenceApi
     */
    public apiV2InferencesRunPost(requestParameters: InferenceApiApiV2InferencesRunPostRequest = {}, options?: AxiosRequestConfig) {
        return InferenceApiFp(this.configuration).apiV2InferencesRunPost(requestParameters.nssolPlatypusApiModelsInferenceApiModelsCreateInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 全推論履歴のIDと名前を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InferenceApi
     */
    public apiV2InferencesSimpleGet(options?: AxiosRequestConfig) {
        return InferenceApiFp(this.configuration).apiV2InferencesSimpleGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MenuApi - axios parameter creator
 * @export
 */
export const MenuApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 管理者向けメニュー種別一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminMenuTypesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/menu-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 管理者向けに、メニューとロールのマッピング情報一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminMenusGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/menus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 管理者向けの、メニューとロールのマッピング情報を更新
         * @param {NssolPlatypusInfrastructureMenuCode} id 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminMenusIdPut: async (id: NssolPlatypusInfrastructureMenuCode, requestBody?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminMenusIdPut', 'id', id)
            const localVarPath = `/api/v2/admin/menus/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary テナント向けのメニュー種別一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantMenuTypesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/tenant/menu-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary テナント向けに、メニューとロールのマッピング情報一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantMenusGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/tenant/menus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary テナント向けの、メニューとロールのマッピング情報を更新
         * @param {NssolPlatypusInfrastructureMenuCode} id 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantMenusIdPut: async (id: NssolPlatypusInfrastructureMenuCode, requestBody?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2TenantMenusIdPut', 'id', id)
            const localVarPath = `/api/v2/tenant/menus/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MenuApi - functional programming interface
 * @export
 */
export const MenuApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MenuApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 管理者向けメニュー種別一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminMenuTypesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusInfrastructureInfosEnumInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminMenuTypesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 管理者向けに、メニューとロールのマッピング情報一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminMenusGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsMenuApiModelsMenuForAdminOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminMenusGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 管理者向けの、メニューとロールのマッピング情報を更新
         * @param {NssolPlatypusInfrastructureMenuCode} id 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminMenusIdPut(id: NssolPlatypusInfrastructureMenuCode, requestBody?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsMenuApiModelsMenuForAdminOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminMenusIdPut(id, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary テナント向けのメニュー種別一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TenantMenuTypesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusInfrastructureInfosEnumInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TenantMenuTypesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary テナント向けに、メニューとロールのマッピング情報一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TenantMenusGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsMenuApiModelsMenuForTenantOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TenantMenusGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary テナント向けの、メニューとロールのマッピング情報を更新
         * @param {NssolPlatypusInfrastructureMenuCode} id 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TenantMenusIdPut(id: NssolPlatypusInfrastructureMenuCode, requestBody?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsMenuApiModelsMenuForTenantOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TenantMenusIdPut(id, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MenuApi - factory interface
 * @export
 */
export const MenuApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MenuApiFp(configuration)
    return {
        /**
         * 
         * @summary 管理者向けメニュー種別一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminMenuTypesGet(options?: any): AxiosPromise<Array<NssolPlatypusInfrastructureInfosEnumInfo>> {
            return localVarFp.apiV2AdminMenuTypesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 管理者向けに、メニューとロールのマッピング情報一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminMenusGet(options?: any): AxiosPromise<Array<NssolPlatypusApiModelsMenuApiModelsMenuForAdminOutputModel>> {
            return localVarFp.apiV2AdminMenusGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 管理者向けの、メニューとロールのマッピング情報を更新
         * @param {NssolPlatypusInfrastructureMenuCode} id 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminMenusIdPut(id: NssolPlatypusInfrastructureMenuCode, requestBody?: Array<number>, options?: any): AxiosPromise<NssolPlatypusApiModelsMenuApiModelsMenuForAdminOutputModel> {
            return localVarFp.apiV2AdminMenusIdPut(id, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary テナント向けのメニュー種別一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantMenuTypesGet(options?: any): AxiosPromise<Array<NssolPlatypusInfrastructureInfosEnumInfo>> {
            return localVarFp.apiV2TenantMenuTypesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary テナント向けに、メニューとロールのマッピング情報一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantMenusGet(options?: any): AxiosPromise<Array<NssolPlatypusApiModelsMenuApiModelsMenuForTenantOutputModel>> {
            return localVarFp.apiV2TenantMenusGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary テナント向けの、メニューとロールのマッピング情報を更新
         * @param {NssolPlatypusInfrastructureMenuCode} id 
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantMenusIdPut(id: NssolPlatypusInfrastructureMenuCode, requestBody?: Array<number>, options?: any): AxiosPromise<NssolPlatypusApiModelsMenuApiModelsMenuForTenantOutputModel> {
            return localVarFp.apiV2TenantMenusIdPut(id, requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV2AdminMenusIdPut operation in MenuApi.
 * @export
 * @interface MenuApiApiV2AdminMenusIdPutRequest
 */
export interface MenuApiApiV2AdminMenusIdPutRequest {
    /**
     * 
     * @type {NssolPlatypusInfrastructureMenuCode}
     * @memberof MenuApiApiV2AdminMenusIdPut
     */
    readonly id: NssolPlatypusInfrastructureMenuCode

    /**
     * 
     * @type {Array<number>}
     * @memberof MenuApiApiV2AdminMenusIdPut
     */
    readonly requestBody?: Array<number>
}

/**
 * Request parameters for apiV2TenantMenusIdPut operation in MenuApi.
 * @export
 * @interface MenuApiApiV2TenantMenusIdPutRequest
 */
export interface MenuApiApiV2TenantMenusIdPutRequest {
    /**
     * 
     * @type {NssolPlatypusInfrastructureMenuCode}
     * @memberof MenuApiApiV2TenantMenusIdPut
     */
    readonly id: NssolPlatypusInfrastructureMenuCode

    /**
     * 
     * @type {Array<number>}
     * @memberof MenuApiApiV2TenantMenusIdPut
     */
    readonly requestBody?: Array<number>
}

/**
 * MenuApi - object-oriented interface
 * @export
 * @class MenuApi
 * @extends {BaseAPI}
 */
export class MenuApi extends BaseAPI {
    /**
     * 
     * @summary 管理者向けメニュー種別一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public apiV2AdminMenuTypesGet(options?: AxiosRequestConfig) {
        return MenuApiFp(this.configuration).apiV2AdminMenuTypesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 管理者向けに、メニューとロールのマッピング情報一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public apiV2AdminMenusGet(options?: AxiosRequestConfig) {
        return MenuApiFp(this.configuration).apiV2AdminMenusGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 管理者向けの、メニューとロールのマッピング情報を更新
     * @param {MenuApiApiV2AdminMenusIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public apiV2AdminMenusIdPut(requestParameters: MenuApiApiV2AdminMenusIdPutRequest, options?: AxiosRequestConfig) {
        return MenuApiFp(this.configuration).apiV2AdminMenusIdPut(requestParameters.id, requestParameters.requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary テナント向けのメニュー種別一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public apiV2TenantMenuTypesGet(options?: AxiosRequestConfig) {
        return MenuApiFp(this.configuration).apiV2TenantMenuTypesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary テナント向けに、メニューとロールのマッピング情報一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public apiV2TenantMenusGet(options?: AxiosRequestConfig) {
        return MenuApiFp(this.configuration).apiV2TenantMenusGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary テナント向けの、メニューとロールのマッピング情報を更新
     * @param {MenuApiApiV2TenantMenusIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public apiV2TenantMenusIdPut(requestParameters: MenuApiApiV2TenantMenusIdPutRequest, options?: AxiosRequestConfig) {
        return MenuApiFp(this.configuration).apiV2TenantMenusIdPut(requestParameters.id, requestParameters.requestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NodeApi - axios parameter creator
 * @export
 */
export const NodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ノードアクセスレベルの一覧を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminNodeAccessLevelsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/node-access-levels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 全ノード一覧を取得
         * @param {string} [name] 
         * @param {number} [perPage] 
         * @param {number} [page] 
         * @param {boolean} [withTotal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminNodesGet: async (name?: string, perPage?: number, page?: number, withTotal?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/nodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (withTotal !== undefined) {
                localVarQueryParameter['withTotal'] = withTotal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ノードを削除する。
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminNodesIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminNodesIdDelete', 'id', id)
            const localVarPath = `/api/v2/admin/nodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定されたIDのノード情報を取得。
         * @param {number} id ノードID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminNodesIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminNodesIdGet', 'id', id)
            const localVarPath = `/api/v2/admin/nodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ノード情報の編集
         * @param {number} id 
         * @param {NssolPlatypusApiModelsNodeApiModelsCreateInputModel} [nssolPlatypusApiModelsNodeApiModelsCreateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminNodesIdPut: async (id: number, nssolPlatypusApiModelsNodeApiModelsCreateInputModel?: NssolPlatypusApiModelsNodeApiModelsCreateInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminNodesIdPut', 'id', id)
            const localVarPath = `/api/v2/admin/nodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsNodeApiModelsCreateInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新規にノードを登録する
         * @param {NssolPlatypusApiModelsNodeApiModelsCreateInputModel} [nssolPlatypusApiModelsNodeApiModelsCreateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminNodesPost: async (nssolPlatypusApiModelsNodeApiModelsCreateInputModel?: NssolPlatypusApiModelsNodeApiModelsCreateInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/nodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsNodeApiModelsCreateInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ノード情報をDBからClusterへ同期させる
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminNodesSyncClusterFromDbPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/nodes/sync-cluster-from-db`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NodeApi - functional programming interface
 * @export
 */
export const NodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NodeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary ノードアクセスレベルの一覧を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminNodeAccessLevelsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusInfrastructureInfosEnumInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminNodeAccessLevelsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 全ノード一覧を取得
         * @param {string} [name] 
         * @param {number} [perPage] 
         * @param {number} [page] 
         * @param {boolean} [withTotal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminNodesGet(name?: string, perPage?: number, page?: number, withTotal?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsNodeApiModelsIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminNodesGet(name, perPage, page, withTotal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ノードを削除する。
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminNodesIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminNodesIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定されたIDのノード情報を取得。
         * @param {number} id ノードID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminNodesIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsNodeApiModelsDetailsOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminNodesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ノード情報の編集
         * @param {number} id 
         * @param {NssolPlatypusApiModelsNodeApiModelsCreateInputModel} [nssolPlatypusApiModelsNodeApiModelsCreateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminNodesIdPut(id: number, nssolPlatypusApiModelsNodeApiModelsCreateInputModel?: NssolPlatypusApiModelsNodeApiModelsCreateInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsNodeApiModelsIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminNodesIdPut(id, nssolPlatypusApiModelsNodeApiModelsCreateInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新規にノードを登録する
         * @param {NssolPlatypusApiModelsNodeApiModelsCreateInputModel} [nssolPlatypusApiModelsNodeApiModelsCreateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminNodesPost(nssolPlatypusApiModelsNodeApiModelsCreateInputModel?: NssolPlatypusApiModelsNodeApiModelsCreateInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsNodeApiModelsIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminNodesPost(nssolPlatypusApiModelsNodeApiModelsCreateInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ノード情報をDBからClusterへ同期させる
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminNodesSyncClusterFromDbPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsNodeApiModelsIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminNodesSyncClusterFromDbPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NodeApi - factory interface
 * @export
 */
export const NodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NodeApiFp(configuration)
    return {
        /**
         * 
         * @summary ノードアクセスレベルの一覧を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminNodeAccessLevelsGet(options?: any): AxiosPromise<Array<NssolPlatypusInfrastructureInfosEnumInfo>> {
            return localVarFp.apiV2AdminNodeAccessLevelsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 全ノード一覧を取得
         * @param {string} [name] 
         * @param {number} [perPage] 
         * @param {number} [page] 
         * @param {boolean} [withTotal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminNodesGet(name?: string, perPage?: number, page?: number, withTotal?: boolean, options?: any): AxiosPromise<Array<NssolPlatypusApiModelsNodeApiModelsIndexOutputModel>> {
            return localVarFp.apiV2AdminNodesGet(name, perPage, page, withTotal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ノードを削除する。
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminNodesIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2AdminNodesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定されたIDのノード情報を取得。
         * @param {number} id ノードID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminNodesIdGet(id: number, options?: any): AxiosPromise<NssolPlatypusApiModelsNodeApiModelsDetailsOutputModel> {
            return localVarFp.apiV2AdminNodesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ノード情報の編集
         * @param {number} id 
         * @param {NssolPlatypusApiModelsNodeApiModelsCreateInputModel} [nssolPlatypusApiModelsNodeApiModelsCreateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminNodesIdPut(id: number, nssolPlatypusApiModelsNodeApiModelsCreateInputModel?: NssolPlatypusApiModelsNodeApiModelsCreateInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsNodeApiModelsIndexOutputModel> {
            return localVarFp.apiV2AdminNodesIdPut(id, nssolPlatypusApiModelsNodeApiModelsCreateInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新規にノードを登録する
         * @param {NssolPlatypusApiModelsNodeApiModelsCreateInputModel} [nssolPlatypusApiModelsNodeApiModelsCreateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminNodesPost(nssolPlatypusApiModelsNodeApiModelsCreateInputModel?: NssolPlatypusApiModelsNodeApiModelsCreateInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsNodeApiModelsIndexOutputModel> {
            return localVarFp.apiV2AdminNodesPost(nssolPlatypusApiModelsNodeApiModelsCreateInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ノード情報をDBからClusterへ同期させる
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminNodesSyncClusterFromDbPost(options?: any): AxiosPromise<Array<NssolPlatypusApiModelsNodeApiModelsIndexOutputModel>> {
            return localVarFp.apiV2AdminNodesSyncClusterFromDbPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV2AdminNodesGet operation in NodeApi.
 * @export
 * @interface NodeApiApiV2AdminNodesGetRequest
 */
export interface NodeApiApiV2AdminNodesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof NodeApiApiV2AdminNodesGet
     */
    readonly name?: string

    /**
     * 
     * @type {number}
     * @memberof NodeApiApiV2AdminNodesGet
     */
    readonly perPage?: number

    /**
     * 
     * @type {number}
     * @memberof NodeApiApiV2AdminNodesGet
     */
    readonly page?: number

    /**
     * 
     * @type {boolean}
     * @memberof NodeApiApiV2AdminNodesGet
     */
    readonly withTotal?: boolean
}

/**
 * Request parameters for apiV2AdminNodesIdDelete operation in NodeApi.
 * @export
 * @interface NodeApiApiV2AdminNodesIdDeleteRequest
 */
export interface NodeApiApiV2AdminNodesIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof NodeApiApiV2AdminNodesIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiV2AdminNodesIdGet operation in NodeApi.
 * @export
 * @interface NodeApiApiV2AdminNodesIdGetRequest
 */
export interface NodeApiApiV2AdminNodesIdGetRequest {
    /**
     * ノードID
     * @type {number}
     * @memberof NodeApiApiV2AdminNodesIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV2AdminNodesIdPut operation in NodeApi.
 * @export
 * @interface NodeApiApiV2AdminNodesIdPutRequest
 */
export interface NodeApiApiV2AdminNodesIdPutRequest {
    /**
     * 
     * @type {number}
     * @memberof NodeApiApiV2AdminNodesIdPut
     */
    readonly id: number

    /**
     * 
     * @type {NssolPlatypusApiModelsNodeApiModelsCreateInputModel}
     * @memberof NodeApiApiV2AdminNodesIdPut
     */
    readonly nssolPlatypusApiModelsNodeApiModelsCreateInputModel?: NssolPlatypusApiModelsNodeApiModelsCreateInputModel
}

/**
 * Request parameters for apiV2AdminNodesPost operation in NodeApi.
 * @export
 * @interface NodeApiApiV2AdminNodesPostRequest
 */
export interface NodeApiApiV2AdminNodesPostRequest {
    /**
     * 
     * @type {NssolPlatypusApiModelsNodeApiModelsCreateInputModel}
     * @memberof NodeApiApiV2AdminNodesPost
     */
    readonly nssolPlatypusApiModelsNodeApiModelsCreateInputModel?: NssolPlatypusApiModelsNodeApiModelsCreateInputModel
}

/**
 * NodeApi - object-oriented interface
 * @export
 * @class NodeApi
 * @extends {BaseAPI}
 */
export class NodeApi extends BaseAPI {
    /**
     * 
     * @summary ノードアクセスレベルの一覧を取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public apiV2AdminNodeAccessLevelsGet(options?: AxiosRequestConfig) {
        return NodeApiFp(this.configuration).apiV2AdminNodeAccessLevelsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 全ノード一覧を取得
     * @param {NodeApiApiV2AdminNodesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public apiV2AdminNodesGet(requestParameters: NodeApiApiV2AdminNodesGetRequest = {}, options?: AxiosRequestConfig) {
        return NodeApiFp(this.configuration).apiV2AdminNodesGet(requestParameters.name, requestParameters.perPage, requestParameters.page, requestParameters.withTotal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ノードを削除する。
     * @param {NodeApiApiV2AdminNodesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public apiV2AdminNodesIdDelete(requestParameters: NodeApiApiV2AdminNodesIdDeleteRequest, options?: AxiosRequestConfig) {
        return NodeApiFp(this.configuration).apiV2AdminNodesIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定されたIDのノード情報を取得。
     * @param {NodeApiApiV2AdminNodesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public apiV2AdminNodesIdGet(requestParameters: NodeApiApiV2AdminNodesIdGetRequest, options?: AxiosRequestConfig) {
        return NodeApiFp(this.configuration).apiV2AdminNodesIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ノード情報の編集
     * @param {NodeApiApiV2AdminNodesIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public apiV2AdminNodesIdPut(requestParameters: NodeApiApiV2AdminNodesIdPutRequest, options?: AxiosRequestConfig) {
        return NodeApiFp(this.configuration).apiV2AdminNodesIdPut(requestParameters.id, requestParameters.nssolPlatypusApiModelsNodeApiModelsCreateInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新規にノードを登録する
     * @param {NodeApiApiV2AdminNodesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public apiV2AdminNodesPost(requestParameters: NodeApiApiV2AdminNodesPostRequest = {}, options?: AxiosRequestConfig) {
        return NodeApiFp(this.configuration).apiV2AdminNodesPost(requestParameters.nssolPlatypusApiModelsNodeApiModelsCreateInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ノード情報をDBからClusterへ同期させる
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public apiV2AdminNodesSyncClusterFromDbPost(options?: AxiosRequestConfig) {
        return NodeApiFp(this.configuration).apiV2AdminNodesSyncClusterFromDbPost(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NotebookApi - axios parameter creator
 * @export
 */
export const NotebookApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 選択中のテナントのノートブック無期限利用可否フラグを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NotebookAvailableInfiniteTimeGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/notebook/available-infinite-time`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定された条件でページングされた状態で、全ノートブック履歴を取得
         * @param {string} [id] IDの検索条件。  比較文字列＋数値の形式。
         * @param {string} [name] 名前
         * @param {string} [createdAt] 作成日時
         * @param {string} [createdBy] 作成者
         * @param {string} [memo] メモ
         * @param {string} [status] ステータス
         * @param {number} [perPage] 表示件数。指定がない場合は上限(1000件)。
         * @param {number} [page] ページ番号。デフォルトは1。
         * @param {boolean} [withTotal] 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NotebookGet: async (id?: string, name?: string, createdAt?: string, createdBy?: string, memo?: string, status?: string, perPage?: number, page?: number, withTotal?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/notebook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (createdAt !== undefined) {
                localVarQueryParameter['CreatedAt'] = createdAt;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['CreatedBy'] = createdBy;
            }

            if (memo !== undefined) {
                localVarQueryParameter['Memo'] = memo;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (withTotal !== undefined) {
                localVarQueryParameter['withTotal'] = withTotal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * コンテナの/output/配下から指定ディレクトリパスの直下を検索する  検索対象ディレクトリが見つからない場合もファイル・ディレクトリが空の結果を返す
         * @summary コンテナの出力ファイルの一覧を取得する。
         * @param {number} id 対象のノートブック履歴ID
         * @param {string} [path] 検索対象ディレクトリ。使用可能文字は「-_1-9a-zA-Z/」
         * @param {boolean} [withUrl] 結果にダウンロード用のURLを含めるか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NotebookIdContainerFilesGet: async (id: number, path?: string, withUrl?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2NotebookIdContainerFilesGet', 'id', id)
            const localVarPath = `/api/v2/notebook/{id}/container-files`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            if (withUrl !== undefined) {
                localVarQueryParameter['withUrl'] = withUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ノートブック履歴を削除する。
         * @param {number} id ノートブック履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NotebookIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2NotebookIdDelete', 'id', id)
            const localVarPath = `/api/v2/notebook/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定されたノートブック履歴のエンドポイントを取得します。
         * @param {number} id ノートブック履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NotebookIdEndpointGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2NotebookIdEndpointGet', 'id', id)
            const localVarPath = `/api/v2/notebook/{id}/endpoint`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定されたノートブック履歴のエラーイベントを取得します。
         * @param {number} id ノートブック履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NotebookIdEventsGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2NotebookIdEventsGet', 'id', id)
            const localVarPath = `/api/v2/notebook/{id}/events`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定されたIDのノートブック履歴の詳細情報を取得。
         * @param {number} id ノートブック履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NotebookIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2NotebookIdGet', 'id', id)
            const localVarPath = `/api/v2/notebook/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ノートブックコンテナを途中で強制終了させる。
         * @param {number} id ノートブック履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NotebookIdHaltPost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2NotebookIdHaltPost', 'id', id)
            const localVarPath = `/api/v2/notebook/{id}/halt`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ノートブック履歴の編集
         * @param {number} id 変更対象のノートブック履歴ID
         * @param {NssolPlatypusApiModelsNotebookApiModelsEditInputModel} [nssolPlatypusApiModelsNotebookApiModelsEditInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NotebookIdPut: async (id: number, nssolPlatypusApiModelsNotebookApiModelsEditInputModel?: NssolPlatypusApiModelsNotebookApiModelsEditInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2NotebookIdPut', 'id', id)
            const localVarPath = `/api/v2/notebook/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsNotebookApiModelsEditInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定されたノートブック履歴のコンテナを再起動する
         * @param {number} id ノートブック履歴ID
         * @param {NssolPlatypusApiModelsNotebookApiModelsRerunInputModel} [nssolPlatypusApiModelsNotebookApiModelsRerunInputModel] 再起動内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NotebookIdRerunPost: async (id: number, nssolPlatypusApiModelsNotebookApiModelsRerunInputModel?: NssolPlatypusApiModelsNotebookApiModelsRerunInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2NotebookIdRerunPost', 'id', id)
            const localVarPath = `/api/v2/notebook/{id}/rerun`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsNotebookApiModelsRerunInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新規にノートブックコンテナを開始する
         * @param {NssolPlatypusApiModelsNotebookApiModelsCreateInputModel} [nssolPlatypusApiModelsNotebookApiModelsCreateInputModel] 新規実行内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NotebookRunPost: async (nssolPlatypusApiModelsNotebookApiModelsCreateInputModel?: NssolPlatypusApiModelsNotebookApiModelsCreateInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/notebook/run`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsNotebookApiModelsCreateInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 全ノートブック履歴のIDと名前を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NotebookSimpleGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/notebook/simple`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotebookApi - functional programming interface
 * @export
 */
export const NotebookApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotebookApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 選択中のテナントのノートブック無期限利用可否フラグを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2NotebookAvailableInfiniteTimeGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2NotebookAvailableInfiniteTimeGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定された条件でページングされた状態で、全ノートブック履歴を取得
         * @param {string} [id] IDの検索条件。  比較文字列＋数値の形式。
         * @param {string} [name] 名前
         * @param {string} [createdAt] 作成日時
         * @param {string} [createdBy] 作成者
         * @param {string} [memo] メモ
         * @param {string} [status] ステータス
         * @param {number} [perPage] 表示件数。指定がない場合は上限(1000件)。
         * @param {number} [page] ページ番号。デフォルトは1。
         * @param {boolean} [withTotal] 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2NotebookGet(id?: string, name?: string, createdAt?: string, createdBy?: string, memo?: string, status?: string, perPage?: number, page?: number, withTotal?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsNotebookApiModelsIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2NotebookGet(id, name, createdAt, createdBy, memo, status, perPage, page, withTotal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * コンテナの/output/配下から指定ディレクトリパスの直下を検索する  検索対象ディレクトリが見つからない場合もファイル・ディレクトリが空の結果を返す
         * @summary コンテナの出力ファイルの一覧を取得する。
         * @param {number} id 対象のノートブック履歴ID
         * @param {string} [path] 検索対象ディレクトリ。使用可能文字は「-_1-9a-zA-Z/」
         * @param {boolean} [withUrl] 結果にダウンロード用のURLを含めるか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2NotebookIdContainerFilesGet(id: number, path?: string, withUrl?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusInfrastructureStorageListResultInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2NotebookIdContainerFilesGet(id, path, withUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ノートブック履歴を削除する。
         * @param {number} id ノートブック履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2NotebookIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2NotebookIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定されたノートブック履歴のエンドポイントを取得します。
         * @param {number} id ノートブック履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2NotebookIdEndpointGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsNotebookApiModelsEndPointOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2NotebookIdEndpointGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定されたノートブック履歴のエラーイベントを取得します。
         * @param {number} id ノートブック履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2NotebookIdEventsGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusInfrastructureInfosContainerEventInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2NotebookIdEventsGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定されたIDのノートブック履歴の詳細情報を取得。
         * @param {number} id ノートブック履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2NotebookIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2NotebookIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ノートブックコンテナを途中で強制終了させる。
         * @param {number} id ノートブック履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2NotebookIdHaltPost(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsNotebookApiModelsSimpleOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2NotebookIdHaltPost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ノートブック履歴の編集
         * @param {number} id 変更対象のノートブック履歴ID
         * @param {NssolPlatypusApiModelsNotebookApiModelsEditInputModel} [nssolPlatypusApiModelsNotebookApiModelsEditInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2NotebookIdPut(id: number, nssolPlatypusApiModelsNotebookApiModelsEditInputModel?: NssolPlatypusApiModelsNotebookApiModelsEditInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsNotebookApiModelsSimpleOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2NotebookIdPut(id, nssolPlatypusApiModelsNotebookApiModelsEditInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定されたノートブック履歴のコンテナを再起動する
         * @param {number} id ノートブック履歴ID
         * @param {NssolPlatypusApiModelsNotebookApiModelsRerunInputModel} [nssolPlatypusApiModelsNotebookApiModelsRerunInputModel] 再起動内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2NotebookIdRerunPost(id: number, nssolPlatypusApiModelsNotebookApiModelsRerunInputModel?: NssolPlatypusApiModelsNotebookApiModelsRerunInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsNotebookApiModelsSimpleOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2NotebookIdRerunPost(id, nssolPlatypusApiModelsNotebookApiModelsRerunInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新規にノートブックコンテナを開始する
         * @param {NssolPlatypusApiModelsNotebookApiModelsCreateInputModel} [nssolPlatypusApiModelsNotebookApiModelsCreateInputModel] 新規実行内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2NotebookRunPost(nssolPlatypusApiModelsNotebookApiModelsCreateInputModel?: NssolPlatypusApiModelsNotebookApiModelsCreateInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsNotebookApiModelsSimpleOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2NotebookRunPost(nssolPlatypusApiModelsNotebookApiModelsCreateInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 全ノートブック履歴のIDと名前を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2NotebookSimpleGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsNotebookApiModelsSimpleOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2NotebookSimpleGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotebookApi - factory interface
 * @export
 */
export const NotebookApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotebookApiFp(configuration)
    return {
        /**
         * 
         * @summary 選択中のテナントのノートブック無期限利用可否フラグを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NotebookAvailableInfiniteTimeGet(options?: any): AxiosPromise<boolean> {
            return localVarFp.apiV2NotebookAvailableInfiniteTimeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定された条件でページングされた状態で、全ノートブック履歴を取得
         * @param {string} [id] IDの検索条件。  比較文字列＋数値の形式。
         * @param {string} [name] 名前
         * @param {string} [createdAt] 作成日時
         * @param {string} [createdBy] 作成者
         * @param {string} [memo] メモ
         * @param {string} [status] ステータス
         * @param {number} [perPage] 表示件数。指定がない場合は上限(1000件)。
         * @param {number} [page] ページ番号。デフォルトは1。
         * @param {boolean} [withTotal] 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NotebookGet(id?: string, name?: string, createdAt?: string, createdBy?: string, memo?: string, status?: string, perPage?: number, page?: number, withTotal?: boolean, options?: any): AxiosPromise<Array<NssolPlatypusApiModelsNotebookApiModelsIndexOutputModel>> {
            return localVarFp.apiV2NotebookGet(id, name, createdAt, createdBy, memo, status, perPage, page, withTotal, options).then((request) => request(axios, basePath));
        },
        /**
         * コンテナの/output/配下から指定ディレクトリパスの直下を検索する  検索対象ディレクトリが見つからない場合もファイル・ディレクトリが空の結果を返す
         * @summary コンテナの出力ファイルの一覧を取得する。
         * @param {number} id 対象のノートブック履歴ID
         * @param {string} [path] 検索対象ディレクトリ。使用可能文字は「-_1-9a-zA-Z/」
         * @param {boolean} [withUrl] 結果にダウンロード用のURLを含めるか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NotebookIdContainerFilesGet(id: number, path?: string, withUrl?: boolean, options?: any): AxiosPromise<NssolPlatypusInfrastructureStorageListResultInfo> {
            return localVarFp.apiV2NotebookIdContainerFilesGet(id, path, withUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ノートブック履歴を削除する。
         * @param {number} id ノートブック履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NotebookIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2NotebookIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定されたノートブック履歴のエンドポイントを取得します。
         * @param {number} id ノートブック履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NotebookIdEndpointGet(id: number, options?: any): AxiosPromise<NssolPlatypusApiModelsNotebookApiModelsEndPointOutputModel> {
            return localVarFp.apiV2NotebookIdEndpointGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定されたノートブック履歴のエラーイベントを取得します。
         * @param {number} id ノートブック履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NotebookIdEventsGet(id: number, options?: any): AxiosPromise<NssolPlatypusInfrastructureInfosContainerEventInfo> {
            return localVarFp.apiV2NotebookIdEventsGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定されたIDのノートブック履歴の詳細情報を取得。
         * @param {number} id ノートブック履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NotebookIdGet(id: number, options?: any): AxiosPromise<NssolPlatypusApiModelsNotebookApiModelsDetailsOutputModel> {
            return localVarFp.apiV2NotebookIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ノートブックコンテナを途中で強制終了させる。
         * @param {number} id ノートブック履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NotebookIdHaltPost(id: number, options?: any): AxiosPromise<NssolPlatypusApiModelsNotebookApiModelsSimpleOutputModel> {
            return localVarFp.apiV2NotebookIdHaltPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ノートブック履歴の編集
         * @param {number} id 変更対象のノートブック履歴ID
         * @param {NssolPlatypusApiModelsNotebookApiModelsEditInputModel} [nssolPlatypusApiModelsNotebookApiModelsEditInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NotebookIdPut(id: number, nssolPlatypusApiModelsNotebookApiModelsEditInputModel?: NssolPlatypusApiModelsNotebookApiModelsEditInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsNotebookApiModelsSimpleOutputModel> {
            return localVarFp.apiV2NotebookIdPut(id, nssolPlatypusApiModelsNotebookApiModelsEditInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定されたノートブック履歴のコンテナを再起動する
         * @param {number} id ノートブック履歴ID
         * @param {NssolPlatypusApiModelsNotebookApiModelsRerunInputModel} [nssolPlatypusApiModelsNotebookApiModelsRerunInputModel] 再起動内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NotebookIdRerunPost(id: number, nssolPlatypusApiModelsNotebookApiModelsRerunInputModel?: NssolPlatypusApiModelsNotebookApiModelsRerunInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsNotebookApiModelsSimpleOutputModel> {
            return localVarFp.apiV2NotebookIdRerunPost(id, nssolPlatypusApiModelsNotebookApiModelsRerunInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新規にノートブックコンテナを開始する
         * @param {NssolPlatypusApiModelsNotebookApiModelsCreateInputModel} [nssolPlatypusApiModelsNotebookApiModelsCreateInputModel] 新規実行内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NotebookRunPost(nssolPlatypusApiModelsNotebookApiModelsCreateInputModel?: NssolPlatypusApiModelsNotebookApiModelsCreateInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsNotebookApiModelsSimpleOutputModel> {
            return localVarFp.apiV2NotebookRunPost(nssolPlatypusApiModelsNotebookApiModelsCreateInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 全ノートブック履歴のIDと名前を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NotebookSimpleGet(options?: any): AxiosPromise<Array<NssolPlatypusApiModelsNotebookApiModelsSimpleOutputModel>> {
            return localVarFp.apiV2NotebookSimpleGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV2NotebookGet operation in NotebookApi.
 * @export
 * @interface NotebookApiApiV2NotebookGetRequest
 */
export interface NotebookApiApiV2NotebookGetRequest {
    /**
     * IDの検索条件。  比較文字列＋数値の形式。
     * @type {string}
     * @memberof NotebookApiApiV2NotebookGet
     */
    readonly id?: string

    /**
     * 名前
     * @type {string}
     * @memberof NotebookApiApiV2NotebookGet
     */
    readonly name?: string

    /**
     * 作成日時
     * @type {string}
     * @memberof NotebookApiApiV2NotebookGet
     */
    readonly createdAt?: string

    /**
     * 作成者
     * @type {string}
     * @memberof NotebookApiApiV2NotebookGet
     */
    readonly createdBy?: string

    /**
     * メモ
     * @type {string}
     * @memberof NotebookApiApiV2NotebookGet
     */
    readonly memo?: string

    /**
     * ステータス
     * @type {string}
     * @memberof NotebookApiApiV2NotebookGet
     */
    readonly status?: string

    /**
     * 表示件数。指定がない場合は上限(1000件)。
     * @type {number}
     * @memberof NotebookApiApiV2NotebookGet
     */
    readonly perPage?: number

    /**
     * ページ番号。デフォルトは1。
     * @type {number}
     * @memberof NotebookApiApiV2NotebookGet
     */
    readonly page?: number

    /**
     * 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
     * @type {boolean}
     * @memberof NotebookApiApiV2NotebookGet
     */
    readonly withTotal?: boolean
}

/**
 * Request parameters for apiV2NotebookIdContainerFilesGet operation in NotebookApi.
 * @export
 * @interface NotebookApiApiV2NotebookIdContainerFilesGetRequest
 */
export interface NotebookApiApiV2NotebookIdContainerFilesGetRequest {
    /**
     * 対象のノートブック履歴ID
     * @type {number}
     * @memberof NotebookApiApiV2NotebookIdContainerFilesGet
     */
    readonly id: number

    /**
     * 検索対象ディレクトリ。使用可能文字は「-_1-9a-zA-Z/」
     * @type {string}
     * @memberof NotebookApiApiV2NotebookIdContainerFilesGet
     */
    readonly path?: string

    /**
     * 結果にダウンロード用のURLを含めるか
     * @type {boolean}
     * @memberof NotebookApiApiV2NotebookIdContainerFilesGet
     */
    readonly withUrl?: boolean
}

/**
 * Request parameters for apiV2NotebookIdDelete operation in NotebookApi.
 * @export
 * @interface NotebookApiApiV2NotebookIdDeleteRequest
 */
export interface NotebookApiApiV2NotebookIdDeleteRequest {
    /**
     * ノートブック履歴ID
     * @type {number}
     * @memberof NotebookApiApiV2NotebookIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiV2NotebookIdEndpointGet operation in NotebookApi.
 * @export
 * @interface NotebookApiApiV2NotebookIdEndpointGetRequest
 */
export interface NotebookApiApiV2NotebookIdEndpointGetRequest {
    /**
     * ノートブック履歴ID
     * @type {number}
     * @memberof NotebookApiApiV2NotebookIdEndpointGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV2NotebookIdEventsGet operation in NotebookApi.
 * @export
 * @interface NotebookApiApiV2NotebookIdEventsGetRequest
 */
export interface NotebookApiApiV2NotebookIdEventsGetRequest {
    /**
     * ノートブック履歴ID
     * @type {number}
     * @memberof NotebookApiApiV2NotebookIdEventsGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV2NotebookIdGet operation in NotebookApi.
 * @export
 * @interface NotebookApiApiV2NotebookIdGetRequest
 */
export interface NotebookApiApiV2NotebookIdGetRequest {
    /**
     * ノートブック履歴ID
     * @type {number}
     * @memberof NotebookApiApiV2NotebookIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV2NotebookIdHaltPost operation in NotebookApi.
 * @export
 * @interface NotebookApiApiV2NotebookIdHaltPostRequest
 */
export interface NotebookApiApiV2NotebookIdHaltPostRequest {
    /**
     * ノートブック履歴ID
     * @type {number}
     * @memberof NotebookApiApiV2NotebookIdHaltPost
     */
    readonly id: number
}

/**
 * Request parameters for apiV2NotebookIdPut operation in NotebookApi.
 * @export
 * @interface NotebookApiApiV2NotebookIdPutRequest
 */
export interface NotebookApiApiV2NotebookIdPutRequest {
    /**
     * 変更対象のノートブック履歴ID
     * @type {number}
     * @memberof NotebookApiApiV2NotebookIdPut
     */
    readonly id: number

    /**
     * 変更内容
     * @type {NssolPlatypusApiModelsNotebookApiModelsEditInputModel}
     * @memberof NotebookApiApiV2NotebookIdPut
     */
    readonly nssolPlatypusApiModelsNotebookApiModelsEditInputModel?: NssolPlatypusApiModelsNotebookApiModelsEditInputModel
}

/**
 * Request parameters for apiV2NotebookIdRerunPost operation in NotebookApi.
 * @export
 * @interface NotebookApiApiV2NotebookIdRerunPostRequest
 */
export interface NotebookApiApiV2NotebookIdRerunPostRequest {
    /**
     * ノートブック履歴ID
     * @type {number}
     * @memberof NotebookApiApiV2NotebookIdRerunPost
     */
    readonly id: number

    /**
     * 再起動内容
     * @type {NssolPlatypusApiModelsNotebookApiModelsRerunInputModel}
     * @memberof NotebookApiApiV2NotebookIdRerunPost
     */
    readonly nssolPlatypusApiModelsNotebookApiModelsRerunInputModel?: NssolPlatypusApiModelsNotebookApiModelsRerunInputModel
}

/**
 * Request parameters for apiV2NotebookRunPost operation in NotebookApi.
 * @export
 * @interface NotebookApiApiV2NotebookRunPostRequest
 */
export interface NotebookApiApiV2NotebookRunPostRequest {
    /**
     * 新規実行内容
     * @type {NssolPlatypusApiModelsNotebookApiModelsCreateInputModel}
     * @memberof NotebookApiApiV2NotebookRunPost
     */
    readonly nssolPlatypusApiModelsNotebookApiModelsCreateInputModel?: NssolPlatypusApiModelsNotebookApiModelsCreateInputModel
}

/**
 * NotebookApi - object-oriented interface
 * @export
 * @class NotebookApi
 * @extends {BaseAPI}
 */
export class NotebookApi extends BaseAPI {
    /**
     * 
     * @summary 選択中のテナントのノートブック無期限利用可否フラグを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotebookApi
     */
    public apiV2NotebookAvailableInfiniteTimeGet(options?: AxiosRequestConfig) {
        return NotebookApiFp(this.configuration).apiV2NotebookAvailableInfiniteTimeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定された条件でページングされた状態で、全ノートブック履歴を取得
     * @param {NotebookApiApiV2NotebookGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotebookApi
     */
    public apiV2NotebookGet(requestParameters: NotebookApiApiV2NotebookGetRequest = {}, options?: AxiosRequestConfig) {
        return NotebookApiFp(this.configuration).apiV2NotebookGet(requestParameters.id, requestParameters.name, requestParameters.createdAt, requestParameters.createdBy, requestParameters.memo, requestParameters.status, requestParameters.perPage, requestParameters.page, requestParameters.withTotal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * コンテナの/output/配下から指定ディレクトリパスの直下を検索する  検索対象ディレクトリが見つからない場合もファイル・ディレクトリが空の結果を返す
     * @summary コンテナの出力ファイルの一覧を取得する。
     * @param {NotebookApiApiV2NotebookIdContainerFilesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotebookApi
     */
    public apiV2NotebookIdContainerFilesGet(requestParameters: NotebookApiApiV2NotebookIdContainerFilesGetRequest, options?: AxiosRequestConfig) {
        return NotebookApiFp(this.configuration).apiV2NotebookIdContainerFilesGet(requestParameters.id, requestParameters.path, requestParameters.withUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ノートブック履歴を削除する。
     * @param {NotebookApiApiV2NotebookIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotebookApi
     */
    public apiV2NotebookIdDelete(requestParameters: NotebookApiApiV2NotebookIdDeleteRequest, options?: AxiosRequestConfig) {
        return NotebookApiFp(this.configuration).apiV2NotebookIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定されたノートブック履歴のエンドポイントを取得します。
     * @param {NotebookApiApiV2NotebookIdEndpointGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotebookApi
     */
    public apiV2NotebookIdEndpointGet(requestParameters: NotebookApiApiV2NotebookIdEndpointGetRequest, options?: AxiosRequestConfig) {
        return NotebookApiFp(this.configuration).apiV2NotebookIdEndpointGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定されたノートブック履歴のエラーイベントを取得します。
     * @param {NotebookApiApiV2NotebookIdEventsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotebookApi
     */
    public apiV2NotebookIdEventsGet(requestParameters: NotebookApiApiV2NotebookIdEventsGetRequest, options?: AxiosRequestConfig) {
        return NotebookApiFp(this.configuration).apiV2NotebookIdEventsGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定されたIDのノートブック履歴の詳細情報を取得。
     * @param {NotebookApiApiV2NotebookIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotebookApi
     */
    public apiV2NotebookIdGet(requestParameters: NotebookApiApiV2NotebookIdGetRequest, options?: AxiosRequestConfig) {
        return NotebookApiFp(this.configuration).apiV2NotebookIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ノートブックコンテナを途中で強制終了させる。
     * @param {NotebookApiApiV2NotebookIdHaltPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotebookApi
     */
    public apiV2NotebookIdHaltPost(requestParameters: NotebookApiApiV2NotebookIdHaltPostRequest, options?: AxiosRequestConfig) {
        return NotebookApiFp(this.configuration).apiV2NotebookIdHaltPost(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ノートブック履歴の編集
     * @param {NotebookApiApiV2NotebookIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotebookApi
     */
    public apiV2NotebookIdPut(requestParameters: NotebookApiApiV2NotebookIdPutRequest, options?: AxiosRequestConfig) {
        return NotebookApiFp(this.configuration).apiV2NotebookIdPut(requestParameters.id, requestParameters.nssolPlatypusApiModelsNotebookApiModelsEditInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定されたノートブック履歴のコンテナを再起動する
     * @param {NotebookApiApiV2NotebookIdRerunPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotebookApi
     */
    public apiV2NotebookIdRerunPost(requestParameters: NotebookApiApiV2NotebookIdRerunPostRequest, options?: AxiosRequestConfig) {
        return NotebookApiFp(this.configuration).apiV2NotebookIdRerunPost(requestParameters.id, requestParameters.nssolPlatypusApiModelsNotebookApiModelsRerunInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新規にノートブックコンテナを開始する
     * @param {NotebookApiApiV2NotebookRunPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotebookApi
     */
    public apiV2NotebookRunPost(requestParameters: NotebookApiApiV2NotebookRunPostRequest = {}, options?: AxiosRequestConfig) {
        return NotebookApiFp(this.configuration).apiV2NotebookRunPost(requestParameters.nssolPlatypusApiModelsNotebookApiModelsCreateInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 全ノートブック履歴のIDと名前を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotebookApi
     */
    public apiV2NotebookSimpleGet(options?: AxiosRequestConfig) {
        return NotebookApiFp(this.configuration).apiV2NotebookSimpleGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PreprocessingApi - axios parameter creator
 * @export
 */
export const PreprocessingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 指定された条件でページングされた状態で、全前処理を取得
         * @param {string} [id] IDの検索条件。  比較文字列＋数値の形式。
         * @param {string} [name] 名前
         * @param {string} [createdAt] 実行時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
         * @param {string} [memo] メモ
         * @param {number} [perPage] 表示件数。指定がない場合は全件。
         * @param {number} [page] ページ番号。デフォルトは1。
         * @param {boolean} [withTotal] 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsGet: async (id?: string, name?: string, createdAt?: string, memo?: string, perPage?: number, page?: number, withTotal?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/preprocessings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (createdAt !== undefined) {
                localVarQueryParameter['CreatedAt'] = createdAt;
            }

            if (memo !== undefined) {
                localVarQueryParameter['Memo'] = memo;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (withTotal !== undefined) {
                localVarQueryParameter['withTotal'] = withTotal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 一度でも前処理が実行されていた場合、削除不可
         * @summary 前処理を削除する。
         * @param {number} id 前処理ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2PreprocessingsIdDelete', 'id', id)
            const localVarPath = `/api/v2/preprocessings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定されたIDの前処理の詳細情報を取得。
         * @param {number} id 前処理ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2PreprocessingsIdGet', 'id', id)
            const localVarPath = `/api/v2/preprocessings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 前処理履歴の登録を完了する。  前処理履歴は完了のステータスとなり、前処理結果の追加が不可能な状態になる。
         * @param {number} id 前処理ID
         * @param {number} dataId 入力データID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsIdHistoriesDataIdCompletePost: async (id: number, dataId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2PreprocessingsIdHistoriesDataIdCompletePost', 'id', id)
            // verify required parameter 'dataId' is not null or undefined
            assertParamExists('apiV2PreprocessingsIdHistoriesDataIdCompletePost', 'dataId', dataId)
            const localVarPath = `/api/v2/preprocessings/{id}/histories/{dataId}/complete`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"dataId"}}`, encodeURIComponent(String(dataId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 前処理履歴に出力データを追加する。  追加する対象の前処理履歴は実行中のステータスのみ許可される。
         * @param {number} id 前処理ID
         * @param {number} dataId 入力データID
         * @param {NssolPlatypusApiModelsPreprocessingApiModelsAddOutputDataInputModel} [nssolPlatypusApiModelsPreprocessingApiModelsAddOutputDataInputModel] データ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsIdHistoriesDataIdDataPost: async (id: number, dataId: number, nssolPlatypusApiModelsPreprocessingApiModelsAddOutputDataInputModel?: NssolPlatypusApiModelsPreprocessingApiModelsAddOutputDataInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2PreprocessingsIdHistoriesDataIdDataPost', 'id', id)
            // verify required parameter 'dataId' is not null or undefined
            assertParamExists('apiV2PreprocessingsIdHistoriesDataIdDataPost', 'dataId', dataId)
            const localVarPath = `/api/v2/preprocessings/{id}/histories/{dataId}/data`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"dataId"}}`, encodeURIComponent(String(dataId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsPreprocessingApiModelsAddOutputDataInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 前処理履歴を削除する。生成された前処理済みデータもまとめて削除する。
         * @param {number} id 前処理ID
         * @param {number} dataId 入力データID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsIdHistoriesDataIdDelete: async (id: number, dataId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2PreprocessingsIdHistoriesDataIdDelete', 'id', id)
            // verify required parameter 'dataId' is not null or undefined
            assertParamExists('apiV2PreprocessingsIdHistoriesDataIdDelete', 'dataId', dataId)
            const localVarPath = `/api/v2/preprocessings/{id}/histories/{dataId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"dataId"}}`, encodeURIComponent(String(dataId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 前処理履歴のイベントを取得する
         * @param {number} id 前処理ID
         * @param {number} dataId 入力データID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsIdHistoriesDataIdEventsGet: async (id: number, dataId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2PreprocessingsIdHistoriesDataIdEventsGet', 'id', id)
            // verify required parameter 'dataId' is not null or undefined
            assertParamExists('apiV2PreprocessingsIdHistoriesDataIdEventsGet', 'dataId', dataId)
            const localVarPath = `/api/v2/preprocessings/{id}/histories/{dataId}/events`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"dataId"}}`, encodeURIComponent(String(dataId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 前処理履歴添付ファイルの一覧を取得する。
         * @param {number} id 対象の前処理履歴ID
         * @param {number} dataId 入力データID
         * @param {boolean} [withUrl] 結果にダウンロード用のURLを含めるか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsIdHistoriesDataIdFilesGet: async (id: number, dataId: number, withUrl?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2PreprocessingsIdHistoriesDataIdFilesGet', 'id', id)
            // verify required parameter 'dataId' is not null or undefined
            assertParamExists('apiV2PreprocessingsIdHistoriesDataIdFilesGet', 'dataId', dataId)
            const localVarPath = `/api/v2/preprocessings/{id}/histories/{dataId}/files`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"dataId"}}`, encodeURIComponent(String(dataId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (withUrl !== undefined) {
                localVarQueryParameter['withUrl'] = withUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定されたデータに対する前処理の履歴を取得。
         * @param {number} id 前処理ID
         * @param {number} dataId データID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsIdHistoriesDataIdGet: async (id: number, dataId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2PreprocessingsIdHistoriesDataIdGet', 'id', id)
            // verify required parameter 'dataId' is not null or undefined
            assertParamExists('apiV2PreprocessingsIdHistoriesDataIdGet', 'dataId', dataId)
            const localVarPath = `/api/v2/preprocessings/{id}/histories/{dataId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"dataId"}}`, encodeURIComponent(String(dataId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 前処理履歴の登録を異常終了させる。  前処理履歴はエラーのステータスとなり、前処理結果の追加が不可能な状態になる。
         * @param {number} id 前処理ID
         * @param {number} dataId 入力データID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsIdHistoriesDataIdHaltPost: async (id: number, dataId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2PreprocessingsIdHistoriesDataIdHaltPost', 'id', id)
            // verify required parameter 'dataId' is not null or undefined
            assertParamExists('apiV2PreprocessingsIdHistoriesDataIdHaltPost', 'dataId', dataId)
            const localVarPath = `/api/v2/preprocessings/{id}/histories/{dataId}/halt`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"dataId"}}`, encodeURIComponent(String(dataId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 前処理実行用のコンテナなどは起動しない。ローカル環境など、KAMONOHASHI外で作成した前処理結果をアップロードする際に用いる。  作成された前処理履歴は実行中のステータスとなり、前処理結果の追加が可能な状態になる。
         * @summary 前処理履歴を作成する。
         * @param {number} id 前処理ID
         * @param {number} dataId 入力データID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsIdHistoriesDataIdPost: async (id: number, dataId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2PreprocessingsIdHistoriesDataIdPost', 'id', id)
            // verify required parameter 'dataId' is not null or undefined
            assertParamExists('apiV2PreprocessingsIdHistoriesDataIdPost', 'dataId', dataId)
            const localVarPath = `/api/v2/preprocessings/{id}/histories/{dataId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"dataId"}}`, encodeURIComponent(String(dataId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定した前処理の履歴情報を取得する。
         * @param {number} id 前処理ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsIdHistoriesGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2PreprocessingsIdHistoriesGet', 'id', id)
            const localVarPath = `/api/v2/preprocessings/{id}/histories`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 前処理が実行済みの場合でも編集可能な項目のみ扱う
         * @summary 前処理の編集
         * @param {number} id 変更対象の前処理ID
         * @param {NssolPlatypusApiModelsPreprocessingApiModelsEditInputModel} [nssolPlatypusApiModelsPreprocessingApiModelsEditInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsIdPatch: async (id: number, nssolPlatypusApiModelsPreprocessingApiModelsEditInputModel?: NssolPlatypusApiModelsPreprocessingApiModelsEditInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2PreprocessingsIdPatch', 'id', id)
            const localVarPath = `/api/v2/preprocessings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsPreprocessingApiModelsEditInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 全ての項目が対象だが、一度でも前処理が実行されていた場合、編集不可
         * @summary 前処理の詳細情報編集
         * @param {number} id 変更対象の前処理ID
         * @param {NssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel} [nssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsIdPut: async (id: number, nssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel?: NssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2PreprocessingsIdPut', 'id', id)
            const localVarPath = `/api/v2/preprocessings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 前処理実行用のコンテナを起動する。  作成された前処理履歴は実行中のステータスとなり、前処理結果の追加が可能な状態になる。
         * @summary 前処理を実行し、履歴を作成する。
         * @param {number} id 前処理ID
         * @param {NssolPlatypusApiModelsPreprocessingApiModelsRunPreprocessHistoryInputModel} [nssolPlatypusApiModelsPreprocessingApiModelsRunPreprocessHistoryInputModel] 実行設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsIdRunPost: async (id: number, nssolPlatypusApiModelsPreprocessingApiModelsRunPreprocessHistoryInputModel?: NssolPlatypusApiModelsPreprocessingApiModelsRunPreprocessHistoryInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2PreprocessingsIdRunPost', 'id', id)
            const localVarPath = `/api/v2/preprocessings/{id}/run`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsPreprocessingApiModelsRunPreprocessHistoryInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新規に前処理を登録する
         * @param {NssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel} [nssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel] 新規作成内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsPost: async (nssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel?: NssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/preprocessings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PreprocessingApi - functional programming interface
 * @export
 */
export const PreprocessingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PreprocessingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 指定された条件でページングされた状態で、全前処理を取得
         * @param {string} [id] IDの検索条件。  比較文字列＋数値の形式。
         * @param {string} [name] 名前
         * @param {string} [createdAt] 実行時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
         * @param {string} [memo] メモ
         * @param {number} [perPage] 表示件数。指定がない場合は全件。
         * @param {number} [page] ページ番号。デフォルトは1。
         * @param {boolean} [withTotal] 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2PreprocessingsGet(id?: string, name?: string, createdAt?: string, memo?: string, perPage?: number, page?: number, withTotal?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsPreprocessingApiModelsIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2PreprocessingsGet(id, name, createdAt, memo, perPage, page, withTotal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 一度でも前処理が実行されていた場合、削除不可
         * @summary 前処理を削除する。
         * @param {number} id 前処理ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2PreprocessingsIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2PreprocessingsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定されたIDの前処理の詳細情報を取得。
         * @param {number} id 前処理ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2PreprocessingsIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsPreprocessingApiModelsDetailsOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2PreprocessingsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 前処理履歴の登録を完了する。  前処理履歴は完了のステータスとなり、前処理結果の追加が不可能な状態になる。
         * @param {number} id 前処理ID
         * @param {number} dataId 入力データID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2PreprocessingsIdHistoriesDataIdCompletePost(id: number, dataId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsPreprocessingApiModelsHistoriesOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2PreprocessingsIdHistoriesDataIdCompletePost(id, dataId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 前処理履歴に出力データを追加する。  追加する対象の前処理履歴は実行中のステータスのみ許可される。
         * @param {number} id 前処理ID
         * @param {number} dataId 入力データID
         * @param {NssolPlatypusApiModelsPreprocessingApiModelsAddOutputDataInputModel} [nssolPlatypusApiModelsPreprocessingApiModelsAddOutputDataInputModel] データ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2PreprocessingsIdHistoriesDataIdDataPost(id: number, dataId: number, nssolPlatypusApiModelsPreprocessingApiModelsAddOutputDataInputModel?: NssolPlatypusApiModelsPreprocessingApiModelsAddOutputDataInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsPreprocessingApiModelsHistoriesOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2PreprocessingsIdHistoriesDataIdDataPost(id, dataId, nssolPlatypusApiModelsPreprocessingApiModelsAddOutputDataInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 前処理履歴を削除する。生成された前処理済みデータもまとめて削除する。
         * @param {number} id 前処理ID
         * @param {number} dataId 入力データID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2PreprocessingsIdHistoriesDataIdDelete(id: number, dataId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2PreprocessingsIdHistoriesDataIdDelete(id, dataId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 前処理履歴のイベントを取得する
         * @param {number} id 前処理ID
         * @param {number} dataId 入力データID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2PreprocessingsIdHistoriesDataIdEventsGet(id: number, dataId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsPreprocessingApiModelsHistoriesOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2PreprocessingsIdHistoriesDataIdEventsGet(id, dataId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 前処理履歴添付ファイルの一覧を取得する。
         * @param {number} id 対象の前処理履歴ID
         * @param {number} dataId 入力データID
         * @param {boolean} [withUrl] 結果にダウンロード用のURLを含めるか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2PreprocessingsIdHistoriesDataIdFilesGet(id: number, dataId: number, withUrl?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsPreprocessingApiModelsPreprocessAttachedFileOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2PreprocessingsIdHistoriesDataIdFilesGet(id, dataId, withUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定されたデータに対する前処理の履歴を取得。
         * @param {number} id 前処理ID
         * @param {number} dataId データID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2PreprocessingsIdHistoriesDataIdGet(id: number, dataId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsPreprocessingApiModelsHistoryDetailsOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2PreprocessingsIdHistoriesDataIdGet(id, dataId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 前処理履歴の登録を異常終了させる。  前処理履歴はエラーのステータスとなり、前処理結果の追加が不可能な状態になる。
         * @param {number} id 前処理ID
         * @param {number} dataId 入力データID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2PreprocessingsIdHistoriesDataIdHaltPost(id: number, dataId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsPreprocessingApiModelsHistoriesOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2PreprocessingsIdHistoriesDataIdHaltPost(id, dataId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 前処理実行用のコンテナなどは起動しない。ローカル環境など、KAMONOHASHI外で作成した前処理結果をアップロードする際に用いる。  作成された前処理履歴は実行中のステータスとなり、前処理結果の追加が可能な状態になる。
         * @summary 前処理履歴を作成する。
         * @param {number} id 前処理ID
         * @param {number} dataId 入力データID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2PreprocessingsIdHistoriesDataIdPost(id: number, dataId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsPreprocessingApiModelsHistoriesOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2PreprocessingsIdHistoriesDataIdPost(id, dataId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定した前処理の履歴情報を取得する。
         * @param {number} id 前処理ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2PreprocessingsIdHistoriesGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsPreprocessingApiModelsHistoriesOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2PreprocessingsIdHistoriesGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 前処理が実行済みの場合でも編集可能な項目のみ扱う
         * @summary 前処理の編集
         * @param {number} id 変更対象の前処理ID
         * @param {NssolPlatypusApiModelsPreprocessingApiModelsEditInputModel} [nssolPlatypusApiModelsPreprocessingApiModelsEditInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2PreprocessingsIdPatch(id: number, nssolPlatypusApiModelsPreprocessingApiModelsEditInputModel?: NssolPlatypusApiModelsPreprocessingApiModelsEditInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsPreprocessingApiModelsIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2PreprocessingsIdPatch(id, nssolPlatypusApiModelsPreprocessingApiModelsEditInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 全ての項目が対象だが、一度でも前処理が実行されていた場合、編集不可
         * @summary 前処理の詳細情報編集
         * @param {number} id 変更対象の前処理ID
         * @param {NssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel} [nssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2PreprocessingsIdPut(id: number, nssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel?: NssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsPreprocessingApiModelsIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2PreprocessingsIdPut(id, nssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 前処理実行用のコンテナを起動する。  作成された前処理履歴は実行中のステータスとなり、前処理結果の追加が可能な状態になる。
         * @summary 前処理を実行し、履歴を作成する。
         * @param {number} id 前処理ID
         * @param {NssolPlatypusApiModelsPreprocessingApiModelsRunPreprocessHistoryInputModel} [nssolPlatypusApiModelsPreprocessingApiModelsRunPreprocessHistoryInputModel] 実行設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2PreprocessingsIdRunPost(id: number, nssolPlatypusApiModelsPreprocessingApiModelsRunPreprocessHistoryInputModel?: NssolPlatypusApiModelsPreprocessingApiModelsRunPreprocessHistoryInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsPreprocessingApiModelsHistoriesOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2PreprocessingsIdRunPost(id, nssolPlatypusApiModelsPreprocessingApiModelsRunPreprocessHistoryInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新規に前処理を登録する
         * @param {NssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel} [nssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel] 新規作成内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2PreprocessingsPost(nssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel?: NssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsPreprocessingApiModelsIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2PreprocessingsPost(nssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PreprocessingApi - factory interface
 * @export
 */
export const PreprocessingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PreprocessingApiFp(configuration)
    return {
        /**
         * 
         * @summary 指定された条件でページングされた状態で、全前処理を取得
         * @param {string} [id] IDの検索条件。  比較文字列＋数値の形式。
         * @param {string} [name] 名前
         * @param {string} [createdAt] 実行時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
         * @param {string} [memo] メモ
         * @param {number} [perPage] 表示件数。指定がない場合は全件。
         * @param {number} [page] ページ番号。デフォルトは1。
         * @param {boolean} [withTotal] 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsGet(id?: string, name?: string, createdAt?: string, memo?: string, perPage?: number, page?: number, withTotal?: boolean, options?: any): AxiosPromise<Array<NssolPlatypusApiModelsPreprocessingApiModelsIndexOutputModel>> {
            return localVarFp.apiV2PreprocessingsGet(id, name, createdAt, memo, perPage, page, withTotal, options).then((request) => request(axios, basePath));
        },
        /**
         * 一度でも前処理が実行されていた場合、削除不可
         * @summary 前処理を削除する。
         * @param {number} id 前処理ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2PreprocessingsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定されたIDの前処理の詳細情報を取得。
         * @param {number} id 前処理ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsIdGet(id: number, options?: any): AxiosPromise<NssolPlatypusApiModelsPreprocessingApiModelsDetailsOutputModel> {
            return localVarFp.apiV2PreprocessingsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 前処理履歴の登録を完了する。  前処理履歴は完了のステータスとなり、前処理結果の追加が不可能な状態になる。
         * @param {number} id 前処理ID
         * @param {number} dataId 入力データID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsIdHistoriesDataIdCompletePost(id: number, dataId: number, options?: any): AxiosPromise<NssolPlatypusApiModelsPreprocessingApiModelsHistoriesOutputModel> {
            return localVarFp.apiV2PreprocessingsIdHistoriesDataIdCompletePost(id, dataId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 前処理履歴に出力データを追加する。  追加する対象の前処理履歴は実行中のステータスのみ許可される。
         * @param {number} id 前処理ID
         * @param {number} dataId 入力データID
         * @param {NssolPlatypusApiModelsPreprocessingApiModelsAddOutputDataInputModel} [nssolPlatypusApiModelsPreprocessingApiModelsAddOutputDataInputModel] データ情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsIdHistoriesDataIdDataPost(id: number, dataId: number, nssolPlatypusApiModelsPreprocessingApiModelsAddOutputDataInputModel?: NssolPlatypusApiModelsPreprocessingApiModelsAddOutputDataInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsPreprocessingApiModelsHistoriesOutputModel> {
            return localVarFp.apiV2PreprocessingsIdHistoriesDataIdDataPost(id, dataId, nssolPlatypusApiModelsPreprocessingApiModelsAddOutputDataInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 前処理履歴を削除する。生成された前処理済みデータもまとめて削除する。
         * @param {number} id 前処理ID
         * @param {number} dataId 入力データID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsIdHistoriesDataIdDelete(id: number, dataId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2PreprocessingsIdHistoriesDataIdDelete(id, dataId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 前処理履歴のイベントを取得する
         * @param {number} id 前処理ID
         * @param {number} dataId 入力データID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsIdHistoriesDataIdEventsGet(id: number, dataId: number, options?: any): AxiosPromise<NssolPlatypusApiModelsPreprocessingApiModelsHistoriesOutputModel> {
            return localVarFp.apiV2PreprocessingsIdHistoriesDataIdEventsGet(id, dataId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 前処理履歴添付ファイルの一覧を取得する。
         * @param {number} id 対象の前処理履歴ID
         * @param {number} dataId 入力データID
         * @param {boolean} [withUrl] 結果にダウンロード用のURLを含めるか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsIdHistoriesDataIdFilesGet(id: number, dataId: number, withUrl?: boolean, options?: any): AxiosPromise<NssolPlatypusApiModelsPreprocessingApiModelsPreprocessAttachedFileOutputModel> {
            return localVarFp.apiV2PreprocessingsIdHistoriesDataIdFilesGet(id, dataId, withUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定されたデータに対する前処理の履歴を取得。
         * @param {number} id 前処理ID
         * @param {number} dataId データID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsIdHistoriesDataIdGet(id: number, dataId: number, options?: any): AxiosPromise<NssolPlatypusApiModelsPreprocessingApiModelsHistoryDetailsOutputModel> {
            return localVarFp.apiV2PreprocessingsIdHistoriesDataIdGet(id, dataId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 前処理履歴の登録を異常終了させる。  前処理履歴はエラーのステータスとなり、前処理結果の追加が不可能な状態になる。
         * @param {number} id 前処理ID
         * @param {number} dataId 入力データID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsIdHistoriesDataIdHaltPost(id: number, dataId: number, options?: any): AxiosPromise<NssolPlatypusApiModelsPreprocessingApiModelsHistoriesOutputModel> {
            return localVarFp.apiV2PreprocessingsIdHistoriesDataIdHaltPost(id, dataId, options).then((request) => request(axios, basePath));
        },
        /**
         * 前処理実行用のコンテナなどは起動しない。ローカル環境など、KAMONOHASHI外で作成した前処理結果をアップロードする際に用いる。  作成された前処理履歴は実行中のステータスとなり、前処理結果の追加が可能な状態になる。
         * @summary 前処理履歴を作成する。
         * @param {number} id 前処理ID
         * @param {number} dataId 入力データID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsIdHistoriesDataIdPost(id: number, dataId: number, options?: any): AxiosPromise<NssolPlatypusApiModelsPreprocessingApiModelsHistoriesOutputModel> {
            return localVarFp.apiV2PreprocessingsIdHistoriesDataIdPost(id, dataId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定した前処理の履歴情報を取得する。
         * @param {number} id 前処理ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsIdHistoriesGet(id: number, options?: any): AxiosPromise<Array<NssolPlatypusApiModelsPreprocessingApiModelsHistoriesOutputModel>> {
            return localVarFp.apiV2PreprocessingsIdHistoriesGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 前処理が実行済みの場合でも編集可能な項目のみ扱う
         * @summary 前処理の編集
         * @param {number} id 変更対象の前処理ID
         * @param {NssolPlatypusApiModelsPreprocessingApiModelsEditInputModel} [nssolPlatypusApiModelsPreprocessingApiModelsEditInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsIdPatch(id: number, nssolPlatypusApiModelsPreprocessingApiModelsEditInputModel?: NssolPlatypusApiModelsPreprocessingApiModelsEditInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsPreprocessingApiModelsIndexOutputModel> {
            return localVarFp.apiV2PreprocessingsIdPatch(id, nssolPlatypusApiModelsPreprocessingApiModelsEditInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 全ての項目が対象だが、一度でも前処理が実行されていた場合、編集不可
         * @summary 前処理の詳細情報編集
         * @param {number} id 変更対象の前処理ID
         * @param {NssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel} [nssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsIdPut(id: number, nssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel?: NssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsPreprocessingApiModelsIndexOutputModel> {
            return localVarFp.apiV2PreprocessingsIdPut(id, nssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 前処理実行用のコンテナを起動する。  作成された前処理履歴は実行中のステータスとなり、前処理結果の追加が可能な状態になる。
         * @summary 前処理を実行し、履歴を作成する。
         * @param {number} id 前処理ID
         * @param {NssolPlatypusApiModelsPreprocessingApiModelsRunPreprocessHistoryInputModel} [nssolPlatypusApiModelsPreprocessingApiModelsRunPreprocessHistoryInputModel] 実行設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsIdRunPost(id: number, nssolPlatypusApiModelsPreprocessingApiModelsRunPreprocessHistoryInputModel?: NssolPlatypusApiModelsPreprocessingApiModelsRunPreprocessHistoryInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsPreprocessingApiModelsHistoriesOutputModel> {
            return localVarFp.apiV2PreprocessingsIdRunPost(id, nssolPlatypusApiModelsPreprocessingApiModelsRunPreprocessHistoryInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新規に前処理を登録する
         * @param {NssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel} [nssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel] 新規作成内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreprocessingsPost(nssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel?: NssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsPreprocessingApiModelsIndexOutputModel> {
            return localVarFp.apiV2PreprocessingsPost(nssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV2PreprocessingsGet operation in PreprocessingApi.
 * @export
 * @interface PreprocessingApiApiV2PreprocessingsGetRequest
 */
export interface PreprocessingApiApiV2PreprocessingsGetRequest {
    /**
     * IDの検索条件。  比較文字列＋数値の形式。
     * @type {string}
     * @memberof PreprocessingApiApiV2PreprocessingsGet
     */
    readonly id?: string

    /**
     * 名前
     * @type {string}
     * @memberof PreprocessingApiApiV2PreprocessingsGet
     */
    readonly name?: string

    /**
     * 実行時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
     * @type {string}
     * @memberof PreprocessingApiApiV2PreprocessingsGet
     */
    readonly createdAt?: string

    /**
     * メモ
     * @type {string}
     * @memberof PreprocessingApiApiV2PreprocessingsGet
     */
    readonly memo?: string

    /**
     * 表示件数。指定がない場合は全件。
     * @type {number}
     * @memberof PreprocessingApiApiV2PreprocessingsGet
     */
    readonly perPage?: number

    /**
     * ページ番号。デフォルトは1。
     * @type {number}
     * @memberof PreprocessingApiApiV2PreprocessingsGet
     */
    readonly page?: number

    /**
     * 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
     * @type {boolean}
     * @memberof PreprocessingApiApiV2PreprocessingsGet
     */
    readonly withTotal?: boolean
}

/**
 * Request parameters for apiV2PreprocessingsIdDelete operation in PreprocessingApi.
 * @export
 * @interface PreprocessingApiApiV2PreprocessingsIdDeleteRequest
 */
export interface PreprocessingApiApiV2PreprocessingsIdDeleteRequest {
    /**
     * 前処理ID
     * @type {number}
     * @memberof PreprocessingApiApiV2PreprocessingsIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiV2PreprocessingsIdGet operation in PreprocessingApi.
 * @export
 * @interface PreprocessingApiApiV2PreprocessingsIdGetRequest
 */
export interface PreprocessingApiApiV2PreprocessingsIdGetRequest {
    /**
     * 前処理ID
     * @type {number}
     * @memberof PreprocessingApiApiV2PreprocessingsIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV2PreprocessingsIdHistoriesDataIdCompletePost operation in PreprocessingApi.
 * @export
 * @interface PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdCompletePostRequest
 */
export interface PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdCompletePostRequest {
    /**
     * 前処理ID
     * @type {number}
     * @memberof PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdCompletePost
     */
    readonly id: number

    /**
     * 入力データID
     * @type {number}
     * @memberof PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdCompletePost
     */
    readonly dataId: number
}

/**
 * Request parameters for apiV2PreprocessingsIdHistoriesDataIdDataPost operation in PreprocessingApi.
 * @export
 * @interface PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdDataPostRequest
 */
export interface PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdDataPostRequest {
    /**
     * 前処理ID
     * @type {number}
     * @memberof PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdDataPost
     */
    readonly id: number

    /**
     * 入力データID
     * @type {number}
     * @memberof PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdDataPost
     */
    readonly dataId: number

    /**
     * データ情報
     * @type {NssolPlatypusApiModelsPreprocessingApiModelsAddOutputDataInputModel}
     * @memberof PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdDataPost
     */
    readonly nssolPlatypusApiModelsPreprocessingApiModelsAddOutputDataInputModel?: NssolPlatypusApiModelsPreprocessingApiModelsAddOutputDataInputModel
}

/**
 * Request parameters for apiV2PreprocessingsIdHistoriesDataIdDelete operation in PreprocessingApi.
 * @export
 * @interface PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdDeleteRequest
 */
export interface PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdDeleteRequest {
    /**
     * 前処理ID
     * @type {number}
     * @memberof PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdDelete
     */
    readonly id: number

    /**
     * 入力データID
     * @type {number}
     * @memberof PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdDelete
     */
    readonly dataId: number
}

/**
 * Request parameters for apiV2PreprocessingsIdHistoriesDataIdEventsGet operation in PreprocessingApi.
 * @export
 * @interface PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdEventsGetRequest
 */
export interface PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdEventsGetRequest {
    /**
     * 前処理ID
     * @type {number}
     * @memberof PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdEventsGet
     */
    readonly id: number

    /**
     * 入力データID
     * @type {number}
     * @memberof PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdEventsGet
     */
    readonly dataId: number
}

/**
 * Request parameters for apiV2PreprocessingsIdHistoriesDataIdFilesGet operation in PreprocessingApi.
 * @export
 * @interface PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdFilesGetRequest
 */
export interface PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdFilesGetRequest {
    /**
     * 対象の前処理履歴ID
     * @type {number}
     * @memberof PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdFilesGet
     */
    readonly id: number

    /**
     * 入力データID
     * @type {number}
     * @memberof PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdFilesGet
     */
    readonly dataId: number

    /**
     * 結果にダウンロード用のURLを含めるか
     * @type {boolean}
     * @memberof PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdFilesGet
     */
    readonly withUrl?: boolean
}

/**
 * Request parameters for apiV2PreprocessingsIdHistoriesDataIdGet operation in PreprocessingApi.
 * @export
 * @interface PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdGetRequest
 */
export interface PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdGetRequest {
    /**
     * 前処理ID
     * @type {number}
     * @memberof PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdGet
     */
    readonly id: number

    /**
     * データID
     * @type {number}
     * @memberof PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdGet
     */
    readonly dataId: number
}

/**
 * Request parameters for apiV2PreprocessingsIdHistoriesDataIdHaltPost operation in PreprocessingApi.
 * @export
 * @interface PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdHaltPostRequest
 */
export interface PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdHaltPostRequest {
    /**
     * 前処理ID
     * @type {number}
     * @memberof PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdHaltPost
     */
    readonly id: number

    /**
     * 入力データID
     * @type {number}
     * @memberof PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdHaltPost
     */
    readonly dataId: number
}

/**
 * Request parameters for apiV2PreprocessingsIdHistoriesDataIdPost operation in PreprocessingApi.
 * @export
 * @interface PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdPostRequest
 */
export interface PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdPostRequest {
    /**
     * 前処理ID
     * @type {number}
     * @memberof PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdPost
     */
    readonly id: number

    /**
     * 入力データID
     * @type {number}
     * @memberof PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdPost
     */
    readonly dataId: number
}

/**
 * Request parameters for apiV2PreprocessingsIdHistoriesGet operation in PreprocessingApi.
 * @export
 * @interface PreprocessingApiApiV2PreprocessingsIdHistoriesGetRequest
 */
export interface PreprocessingApiApiV2PreprocessingsIdHistoriesGetRequest {
    /**
     * 前処理ID
     * @type {number}
     * @memberof PreprocessingApiApiV2PreprocessingsIdHistoriesGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV2PreprocessingsIdPatch operation in PreprocessingApi.
 * @export
 * @interface PreprocessingApiApiV2PreprocessingsIdPatchRequest
 */
export interface PreprocessingApiApiV2PreprocessingsIdPatchRequest {
    /**
     * 変更対象の前処理ID
     * @type {number}
     * @memberof PreprocessingApiApiV2PreprocessingsIdPatch
     */
    readonly id: number

    /**
     * 変更内容
     * @type {NssolPlatypusApiModelsPreprocessingApiModelsEditInputModel}
     * @memberof PreprocessingApiApiV2PreprocessingsIdPatch
     */
    readonly nssolPlatypusApiModelsPreprocessingApiModelsEditInputModel?: NssolPlatypusApiModelsPreprocessingApiModelsEditInputModel
}

/**
 * Request parameters for apiV2PreprocessingsIdPut operation in PreprocessingApi.
 * @export
 * @interface PreprocessingApiApiV2PreprocessingsIdPutRequest
 */
export interface PreprocessingApiApiV2PreprocessingsIdPutRequest {
    /**
     * 変更対象の前処理ID
     * @type {number}
     * @memberof PreprocessingApiApiV2PreprocessingsIdPut
     */
    readonly id: number

    /**
     * 変更内容
     * @type {NssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel}
     * @memberof PreprocessingApiApiV2PreprocessingsIdPut
     */
    readonly nssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel?: NssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel
}

/**
 * Request parameters for apiV2PreprocessingsIdRunPost operation in PreprocessingApi.
 * @export
 * @interface PreprocessingApiApiV2PreprocessingsIdRunPostRequest
 */
export interface PreprocessingApiApiV2PreprocessingsIdRunPostRequest {
    /**
     * 前処理ID
     * @type {number}
     * @memberof PreprocessingApiApiV2PreprocessingsIdRunPost
     */
    readonly id: number

    /**
     * 実行設定
     * @type {NssolPlatypusApiModelsPreprocessingApiModelsRunPreprocessHistoryInputModel}
     * @memberof PreprocessingApiApiV2PreprocessingsIdRunPost
     */
    readonly nssolPlatypusApiModelsPreprocessingApiModelsRunPreprocessHistoryInputModel?: NssolPlatypusApiModelsPreprocessingApiModelsRunPreprocessHistoryInputModel
}

/**
 * Request parameters for apiV2PreprocessingsPost operation in PreprocessingApi.
 * @export
 * @interface PreprocessingApiApiV2PreprocessingsPostRequest
 */
export interface PreprocessingApiApiV2PreprocessingsPostRequest {
    /**
     * 新規作成内容
     * @type {NssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel}
     * @memberof PreprocessingApiApiV2PreprocessingsPost
     */
    readonly nssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel?: NssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel
}

/**
 * PreprocessingApi - object-oriented interface
 * @export
 * @class PreprocessingApi
 * @extends {BaseAPI}
 */
export class PreprocessingApi extends BaseAPI {
    /**
     * 
     * @summary 指定された条件でページングされた状態で、全前処理を取得
     * @param {PreprocessingApiApiV2PreprocessingsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreprocessingApi
     */
    public apiV2PreprocessingsGet(requestParameters: PreprocessingApiApiV2PreprocessingsGetRequest = {}, options?: AxiosRequestConfig) {
        return PreprocessingApiFp(this.configuration).apiV2PreprocessingsGet(requestParameters.id, requestParameters.name, requestParameters.createdAt, requestParameters.memo, requestParameters.perPage, requestParameters.page, requestParameters.withTotal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 一度でも前処理が実行されていた場合、削除不可
     * @summary 前処理を削除する。
     * @param {PreprocessingApiApiV2PreprocessingsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreprocessingApi
     */
    public apiV2PreprocessingsIdDelete(requestParameters: PreprocessingApiApiV2PreprocessingsIdDeleteRequest, options?: AxiosRequestConfig) {
        return PreprocessingApiFp(this.configuration).apiV2PreprocessingsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定されたIDの前処理の詳細情報を取得。
     * @param {PreprocessingApiApiV2PreprocessingsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreprocessingApi
     */
    public apiV2PreprocessingsIdGet(requestParameters: PreprocessingApiApiV2PreprocessingsIdGetRequest, options?: AxiosRequestConfig) {
        return PreprocessingApiFp(this.configuration).apiV2PreprocessingsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 前処理履歴の登録を完了する。  前処理履歴は完了のステータスとなり、前処理結果の追加が不可能な状態になる。
     * @param {PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdCompletePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreprocessingApi
     */
    public apiV2PreprocessingsIdHistoriesDataIdCompletePost(requestParameters: PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdCompletePostRequest, options?: AxiosRequestConfig) {
        return PreprocessingApiFp(this.configuration).apiV2PreprocessingsIdHistoriesDataIdCompletePost(requestParameters.id, requestParameters.dataId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 前処理履歴に出力データを追加する。  追加する対象の前処理履歴は実行中のステータスのみ許可される。
     * @param {PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdDataPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreprocessingApi
     */
    public apiV2PreprocessingsIdHistoriesDataIdDataPost(requestParameters: PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdDataPostRequest, options?: AxiosRequestConfig) {
        return PreprocessingApiFp(this.configuration).apiV2PreprocessingsIdHistoriesDataIdDataPost(requestParameters.id, requestParameters.dataId, requestParameters.nssolPlatypusApiModelsPreprocessingApiModelsAddOutputDataInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 前処理履歴を削除する。生成された前処理済みデータもまとめて削除する。
     * @param {PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreprocessingApi
     */
    public apiV2PreprocessingsIdHistoriesDataIdDelete(requestParameters: PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdDeleteRequest, options?: AxiosRequestConfig) {
        return PreprocessingApiFp(this.configuration).apiV2PreprocessingsIdHistoriesDataIdDelete(requestParameters.id, requestParameters.dataId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 前処理履歴のイベントを取得する
     * @param {PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdEventsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreprocessingApi
     */
    public apiV2PreprocessingsIdHistoriesDataIdEventsGet(requestParameters: PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdEventsGetRequest, options?: AxiosRequestConfig) {
        return PreprocessingApiFp(this.configuration).apiV2PreprocessingsIdHistoriesDataIdEventsGet(requestParameters.id, requestParameters.dataId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 前処理履歴添付ファイルの一覧を取得する。
     * @param {PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdFilesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreprocessingApi
     */
    public apiV2PreprocessingsIdHistoriesDataIdFilesGet(requestParameters: PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdFilesGetRequest, options?: AxiosRequestConfig) {
        return PreprocessingApiFp(this.configuration).apiV2PreprocessingsIdHistoriesDataIdFilesGet(requestParameters.id, requestParameters.dataId, requestParameters.withUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定されたデータに対する前処理の履歴を取得。
     * @param {PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreprocessingApi
     */
    public apiV2PreprocessingsIdHistoriesDataIdGet(requestParameters: PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdGetRequest, options?: AxiosRequestConfig) {
        return PreprocessingApiFp(this.configuration).apiV2PreprocessingsIdHistoriesDataIdGet(requestParameters.id, requestParameters.dataId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 前処理履歴の登録を異常終了させる。  前処理履歴はエラーのステータスとなり、前処理結果の追加が不可能な状態になる。
     * @param {PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdHaltPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreprocessingApi
     */
    public apiV2PreprocessingsIdHistoriesDataIdHaltPost(requestParameters: PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdHaltPostRequest, options?: AxiosRequestConfig) {
        return PreprocessingApiFp(this.configuration).apiV2PreprocessingsIdHistoriesDataIdHaltPost(requestParameters.id, requestParameters.dataId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 前処理実行用のコンテナなどは起動しない。ローカル環境など、KAMONOHASHI外で作成した前処理結果をアップロードする際に用いる。  作成された前処理履歴は実行中のステータスとなり、前処理結果の追加が可能な状態になる。
     * @summary 前処理履歴を作成する。
     * @param {PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreprocessingApi
     */
    public apiV2PreprocessingsIdHistoriesDataIdPost(requestParameters: PreprocessingApiApiV2PreprocessingsIdHistoriesDataIdPostRequest, options?: AxiosRequestConfig) {
        return PreprocessingApiFp(this.configuration).apiV2PreprocessingsIdHistoriesDataIdPost(requestParameters.id, requestParameters.dataId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定した前処理の履歴情報を取得する。
     * @param {PreprocessingApiApiV2PreprocessingsIdHistoriesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreprocessingApi
     */
    public apiV2PreprocessingsIdHistoriesGet(requestParameters: PreprocessingApiApiV2PreprocessingsIdHistoriesGetRequest, options?: AxiosRequestConfig) {
        return PreprocessingApiFp(this.configuration).apiV2PreprocessingsIdHistoriesGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 前処理が実行済みの場合でも編集可能な項目のみ扱う
     * @summary 前処理の編集
     * @param {PreprocessingApiApiV2PreprocessingsIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreprocessingApi
     */
    public apiV2PreprocessingsIdPatch(requestParameters: PreprocessingApiApiV2PreprocessingsIdPatchRequest, options?: AxiosRequestConfig) {
        return PreprocessingApiFp(this.configuration).apiV2PreprocessingsIdPatch(requestParameters.id, requestParameters.nssolPlatypusApiModelsPreprocessingApiModelsEditInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 全ての項目が対象だが、一度でも前処理が実行されていた場合、編集不可
     * @summary 前処理の詳細情報編集
     * @param {PreprocessingApiApiV2PreprocessingsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreprocessingApi
     */
    public apiV2PreprocessingsIdPut(requestParameters: PreprocessingApiApiV2PreprocessingsIdPutRequest, options?: AxiosRequestConfig) {
        return PreprocessingApiFp(this.configuration).apiV2PreprocessingsIdPut(requestParameters.id, requestParameters.nssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 前処理実行用のコンテナを起動する。  作成された前処理履歴は実行中のステータスとなり、前処理結果の追加が可能な状態になる。
     * @summary 前処理を実行し、履歴を作成する。
     * @param {PreprocessingApiApiV2PreprocessingsIdRunPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreprocessingApi
     */
    public apiV2PreprocessingsIdRunPost(requestParameters: PreprocessingApiApiV2PreprocessingsIdRunPostRequest, options?: AxiosRequestConfig) {
        return PreprocessingApiFp(this.configuration).apiV2PreprocessingsIdRunPost(requestParameters.id, requestParameters.nssolPlatypusApiModelsPreprocessingApiModelsRunPreprocessHistoryInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新規に前処理を登録する
     * @param {PreprocessingApiApiV2PreprocessingsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreprocessingApi
     */
    public apiV2PreprocessingsPost(requestParameters: PreprocessingApiApiV2PreprocessingsPostRequest = {}, options?: AxiosRequestConfig) {
        return PreprocessingApiFp(this.configuration).apiV2PreprocessingsPost(requestParameters.nssolPlatypusApiModelsPreprocessingApiModelsCreateInputModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RegistryApi - axios parameter creator
 * @export
 */
export const RegistryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 登録済みのDockerレジストリ エンドポイント一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminRegistryEndpointsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/registry/endpoints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Dockerレジストリ エンドポイント情報の削除
         * @param {number} id 削除対象レジストリID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminRegistryEndpointsIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminRegistryEndpointsIdDelete', 'id', id)
            const localVarPath = `/api/v2/admin/registry/endpoints/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定されたIDのDockerレジストリ エンドポイント情報を取得
         * @param {number} id レジストリID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminRegistryEndpointsIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminRegistryEndpointsIdGet', 'id', id)
            const localVarPath = `/api/v2/admin/registry/endpoints/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Dockerレジストリ エンドポイント情報の編集
         * @param {number} id 編集対象レジストリID
         * @param {NssolPlatypusApiModelsRegistryApiModelsCreateInputModel} [nssolPlatypusApiModelsRegistryApiModelsCreateInputModel] 編集モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminRegistryEndpointsIdPut: async (id: number, nssolPlatypusApiModelsRegistryApiModelsCreateInputModel?: NssolPlatypusApiModelsRegistryApiModelsCreateInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminRegistryEndpointsIdPut', 'id', id)
            const localVarPath = `/api/v2/admin/registry/endpoints/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsRegistryApiModelsCreateInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新規にDockerレジストリ エンドポイントを登録する
         * @param {NssolPlatypusApiModelsRegistryApiModelsCreateInputModel} [nssolPlatypusApiModelsRegistryApiModelsCreateInputModel] 新規作成モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminRegistryEndpointsPost: async (nssolPlatypusApiModelsRegistryApiModelsCreateInputModel?: NssolPlatypusApiModelsRegistryApiModelsCreateInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/registry/endpoints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsRegistryApiModelsCreateInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Dockerレジストリ種別一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminRegistryTypesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/registry/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary レジストリに存在する全イメージの取得
         * @param {number} registryId レジストリID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RegistriesRegistryIdImagesGet: async (registryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registryId' is not null or undefined
            assertParamExists('apiV2RegistriesRegistryIdImagesGet', 'registryId', registryId)
            const localVarPath = `/api/v2/registries/{registryId}/images`
                .replace(`{${"registryId"}}`, encodeURIComponent(String(registryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary イメージ名に対応するタグ一覧を取得
         * @param {number} registryId レジストリID
         * @param {string} image イメージ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RegistriesRegistryIdImagesImageTagsGet: async (registryId: number, image: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registryId' is not null or undefined
            assertParamExists('apiV2RegistriesRegistryIdImagesImageTagsGet', 'registryId', registryId)
            // verify required parameter 'image' is not null or undefined
            assertParamExists('apiV2RegistriesRegistryIdImagesImageTagsGet', 'image', image)
            const localVarPath = `/api/v2/registries/{registryId}/images/{image}/tags`
                .replace(`{${"registryId"}}`, encodeURIComponent(String(registryId)))
                .replace(`{${"image"}}`, encodeURIComponent(String(image)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 階層化されたURLを吸収するためのダミーAPI。  製品版のSwaggerからは削除する。
         * @param {number} registryId 
         * @param {string} segments 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RegistriesRegistryIdImagesSegmentsGet: async (registryId: number, segments: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registryId' is not null or undefined
            assertParamExists('apiV2RegistriesRegistryIdImagesSegmentsGet', 'registryId', registryId)
            // verify required parameter 'segments' is not null or undefined
            assertParamExists('apiV2RegistriesRegistryIdImagesSegmentsGet', 'segments', segments)
            const localVarPath = `/api/v2/registries/{registryId}/images/{segments}`
                .replace(`{${"registryId"}}`, encodeURIComponent(String(registryId)))
                .replace(`{${"segments"}}`, encodeURIComponent(String(segments)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary テナント管理者が選択可能な登録済みのDockerレジストリ エンドポイント一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantRegistryEndpointsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/tenant/registry/endpoints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegistryApi - functional programming interface
 * @export
 */
export const RegistryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RegistryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 登録済みのDockerレジストリ エンドポイント一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminRegistryEndpointsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsRegistryApiModelsIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminRegistryEndpointsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Dockerレジストリ エンドポイント情報の削除
         * @param {number} id 削除対象レジストリID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminRegistryEndpointsIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminRegistryEndpointsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定されたIDのDockerレジストリ エンドポイント情報を取得
         * @param {number} id レジストリID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminRegistryEndpointsIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsRegistryApiModelsDetailsOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminRegistryEndpointsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Dockerレジストリ エンドポイント情報の編集
         * @param {number} id 編集対象レジストリID
         * @param {NssolPlatypusApiModelsRegistryApiModelsCreateInputModel} [nssolPlatypusApiModelsRegistryApiModelsCreateInputModel] 編集モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminRegistryEndpointsIdPut(id: number, nssolPlatypusApiModelsRegistryApiModelsCreateInputModel?: NssolPlatypusApiModelsRegistryApiModelsCreateInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsRegistryApiModelsIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminRegistryEndpointsIdPut(id, nssolPlatypusApiModelsRegistryApiModelsCreateInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新規にDockerレジストリ エンドポイントを登録する
         * @param {NssolPlatypusApiModelsRegistryApiModelsCreateInputModel} [nssolPlatypusApiModelsRegistryApiModelsCreateInputModel] 新規作成モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminRegistryEndpointsPost(nssolPlatypusApiModelsRegistryApiModelsCreateInputModel?: NssolPlatypusApiModelsRegistryApiModelsCreateInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsRegistryApiModelsIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminRegistryEndpointsPost(nssolPlatypusApiModelsRegistryApiModelsCreateInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Dockerレジストリ種別一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminRegistryTypesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusInfrastructureInfosEnumInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminRegistryTypesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary レジストリに存在する全イメージの取得
         * @param {number} registryId レジストリID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2RegistriesRegistryIdImagesGet(registryId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2RegistriesRegistryIdImagesGet(registryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary イメージ名に対応するタグ一覧を取得
         * @param {number} registryId レジストリID
         * @param {string} image イメージ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2RegistriesRegistryIdImagesImageTagsGet(registryId: number, image: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2RegistriesRegistryIdImagesImageTagsGet(registryId, image, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 階層化されたURLを吸収するためのダミーAPI。  製品版のSwaggerからは削除する。
         * @param {number} registryId 
         * @param {string} segments 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2RegistriesRegistryIdImagesSegmentsGet(registryId: number, segments: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2RegistriesRegistryIdImagesSegmentsGet(registryId, segments, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary テナント管理者が選択可能な登録済みのDockerレジストリ エンドポイント一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TenantRegistryEndpointsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsRegistryApiModelsIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TenantRegistryEndpointsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RegistryApi - factory interface
 * @export
 */
export const RegistryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RegistryApiFp(configuration)
    return {
        /**
         * 
         * @summary 登録済みのDockerレジストリ エンドポイント一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminRegistryEndpointsGet(options?: any): AxiosPromise<Array<NssolPlatypusApiModelsRegistryApiModelsIndexOutputModel>> {
            return localVarFp.apiV2AdminRegistryEndpointsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Dockerレジストリ エンドポイント情報の削除
         * @param {number} id 削除対象レジストリID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminRegistryEndpointsIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2AdminRegistryEndpointsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定されたIDのDockerレジストリ エンドポイント情報を取得
         * @param {number} id レジストリID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminRegistryEndpointsIdGet(id: number, options?: any): AxiosPromise<NssolPlatypusApiModelsRegistryApiModelsDetailsOutputModel> {
            return localVarFp.apiV2AdminRegistryEndpointsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Dockerレジストリ エンドポイント情報の編集
         * @param {number} id 編集対象レジストリID
         * @param {NssolPlatypusApiModelsRegistryApiModelsCreateInputModel} [nssolPlatypusApiModelsRegistryApiModelsCreateInputModel] 編集モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminRegistryEndpointsIdPut(id: number, nssolPlatypusApiModelsRegistryApiModelsCreateInputModel?: NssolPlatypusApiModelsRegistryApiModelsCreateInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsRegistryApiModelsIndexOutputModel> {
            return localVarFp.apiV2AdminRegistryEndpointsIdPut(id, nssolPlatypusApiModelsRegistryApiModelsCreateInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新規にDockerレジストリ エンドポイントを登録する
         * @param {NssolPlatypusApiModelsRegistryApiModelsCreateInputModel} [nssolPlatypusApiModelsRegistryApiModelsCreateInputModel] 新規作成モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminRegistryEndpointsPost(nssolPlatypusApiModelsRegistryApiModelsCreateInputModel?: NssolPlatypusApiModelsRegistryApiModelsCreateInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsRegistryApiModelsIndexOutputModel> {
            return localVarFp.apiV2AdminRegistryEndpointsPost(nssolPlatypusApiModelsRegistryApiModelsCreateInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Dockerレジストリ種別一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminRegistryTypesGet(options?: any): AxiosPromise<Array<NssolPlatypusInfrastructureInfosEnumInfo>> {
            return localVarFp.apiV2AdminRegistryTypesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary レジストリに存在する全イメージの取得
         * @param {number} registryId レジストリID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RegistriesRegistryIdImagesGet(registryId: number, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.apiV2RegistriesRegistryIdImagesGet(registryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary イメージ名に対応するタグ一覧を取得
         * @param {number} registryId レジストリID
         * @param {string} image イメージ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RegistriesRegistryIdImagesImageTagsGet(registryId: number, image: string, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.apiV2RegistriesRegistryIdImagesImageTagsGet(registryId, image, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 階層化されたURLを吸収するためのダミーAPI。  製品版のSwaggerからは削除する。
         * @param {number} registryId 
         * @param {string} segments 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2RegistriesRegistryIdImagesSegmentsGet(registryId: number, segments: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2RegistriesRegistryIdImagesSegmentsGet(registryId, segments, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary テナント管理者が選択可能な登録済みのDockerレジストリ エンドポイント一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantRegistryEndpointsGet(options?: any): AxiosPromise<Array<NssolPlatypusApiModelsRegistryApiModelsIndexOutputModel>> {
            return localVarFp.apiV2TenantRegistryEndpointsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV2AdminRegistryEndpointsIdDelete operation in RegistryApi.
 * @export
 * @interface RegistryApiApiV2AdminRegistryEndpointsIdDeleteRequest
 */
export interface RegistryApiApiV2AdminRegistryEndpointsIdDeleteRequest {
    /**
     * 削除対象レジストリID
     * @type {number}
     * @memberof RegistryApiApiV2AdminRegistryEndpointsIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiV2AdminRegistryEndpointsIdGet operation in RegistryApi.
 * @export
 * @interface RegistryApiApiV2AdminRegistryEndpointsIdGetRequest
 */
export interface RegistryApiApiV2AdminRegistryEndpointsIdGetRequest {
    /**
     * レジストリID
     * @type {number}
     * @memberof RegistryApiApiV2AdminRegistryEndpointsIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV2AdminRegistryEndpointsIdPut operation in RegistryApi.
 * @export
 * @interface RegistryApiApiV2AdminRegistryEndpointsIdPutRequest
 */
export interface RegistryApiApiV2AdminRegistryEndpointsIdPutRequest {
    /**
     * 編集対象レジストリID
     * @type {number}
     * @memberof RegistryApiApiV2AdminRegistryEndpointsIdPut
     */
    readonly id: number

    /**
     * 編集モデル
     * @type {NssolPlatypusApiModelsRegistryApiModelsCreateInputModel}
     * @memberof RegistryApiApiV2AdminRegistryEndpointsIdPut
     */
    readonly nssolPlatypusApiModelsRegistryApiModelsCreateInputModel?: NssolPlatypusApiModelsRegistryApiModelsCreateInputModel
}

/**
 * Request parameters for apiV2AdminRegistryEndpointsPost operation in RegistryApi.
 * @export
 * @interface RegistryApiApiV2AdminRegistryEndpointsPostRequest
 */
export interface RegistryApiApiV2AdminRegistryEndpointsPostRequest {
    /**
     * 新規作成モデル
     * @type {NssolPlatypusApiModelsRegistryApiModelsCreateInputModel}
     * @memberof RegistryApiApiV2AdminRegistryEndpointsPost
     */
    readonly nssolPlatypusApiModelsRegistryApiModelsCreateInputModel?: NssolPlatypusApiModelsRegistryApiModelsCreateInputModel
}

/**
 * Request parameters for apiV2RegistriesRegistryIdImagesGet operation in RegistryApi.
 * @export
 * @interface RegistryApiApiV2RegistriesRegistryIdImagesGetRequest
 */
export interface RegistryApiApiV2RegistriesRegistryIdImagesGetRequest {
    /**
     * レジストリID
     * @type {number}
     * @memberof RegistryApiApiV2RegistriesRegistryIdImagesGet
     */
    readonly registryId: number
}

/**
 * Request parameters for apiV2RegistriesRegistryIdImagesImageTagsGet operation in RegistryApi.
 * @export
 * @interface RegistryApiApiV2RegistriesRegistryIdImagesImageTagsGetRequest
 */
export interface RegistryApiApiV2RegistriesRegistryIdImagesImageTagsGetRequest {
    /**
     * レジストリID
     * @type {number}
     * @memberof RegistryApiApiV2RegistriesRegistryIdImagesImageTagsGet
     */
    readonly registryId: number

    /**
     * イメージ名
     * @type {string}
     * @memberof RegistryApiApiV2RegistriesRegistryIdImagesImageTagsGet
     */
    readonly image: string
}

/**
 * Request parameters for apiV2RegistriesRegistryIdImagesSegmentsGet operation in RegistryApi.
 * @export
 * @interface RegistryApiApiV2RegistriesRegistryIdImagesSegmentsGetRequest
 */
export interface RegistryApiApiV2RegistriesRegistryIdImagesSegmentsGetRequest {
    /**
     * 
     * @type {number}
     * @memberof RegistryApiApiV2RegistriesRegistryIdImagesSegmentsGet
     */
    readonly registryId: number

    /**
     * 
     * @type {string}
     * @memberof RegistryApiApiV2RegistriesRegistryIdImagesSegmentsGet
     */
    readonly segments: string
}

/**
 * RegistryApi - object-oriented interface
 * @export
 * @class RegistryApi
 * @extends {BaseAPI}
 */
export class RegistryApi extends BaseAPI {
    /**
     * 
     * @summary 登録済みのDockerレジストリ エンドポイント一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public apiV2AdminRegistryEndpointsGet(options?: AxiosRequestConfig) {
        return RegistryApiFp(this.configuration).apiV2AdminRegistryEndpointsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Dockerレジストリ エンドポイント情報の削除
     * @param {RegistryApiApiV2AdminRegistryEndpointsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public apiV2AdminRegistryEndpointsIdDelete(requestParameters: RegistryApiApiV2AdminRegistryEndpointsIdDeleteRequest, options?: AxiosRequestConfig) {
        return RegistryApiFp(this.configuration).apiV2AdminRegistryEndpointsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定されたIDのDockerレジストリ エンドポイント情報を取得
     * @param {RegistryApiApiV2AdminRegistryEndpointsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public apiV2AdminRegistryEndpointsIdGet(requestParameters: RegistryApiApiV2AdminRegistryEndpointsIdGetRequest, options?: AxiosRequestConfig) {
        return RegistryApiFp(this.configuration).apiV2AdminRegistryEndpointsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Dockerレジストリ エンドポイント情報の編集
     * @param {RegistryApiApiV2AdminRegistryEndpointsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public apiV2AdminRegistryEndpointsIdPut(requestParameters: RegistryApiApiV2AdminRegistryEndpointsIdPutRequest, options?: AxiosRequestConfig) {
        return RegistryApiFp(this.configuration).apiV2AdminRegistryEndpointsIdPut(requestParameters.id, requestParameters.nssolPlatypusApiModelsRegistryApiModelsCreateInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新規にDockerレジストリ エンドポイントを登録する
     * @param {RegistryApiApiV2AdminRegistryEndpointsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public apiV2AdminRegistryEndpointsPost(requestParameters: RegistryApiApiV2AdminRegistryEndpointsPostRequest = {}, options?: AxiosRequestConfig) {
        return RegistryApiFp(this.configuration).apiV2AdminRegistryEndpointsPost(requestParameters.nssolPlatypusApiModelsRegistryApiModelsCreateInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Dockerレジストリ種別一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public apiV2AdminRegistryTypesGet(options?: AxiosRequestConfig) {
        return RegistryApiFp(this.configuration).apiV2AdminRegistryTypesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary レジストリに存在する全イメージの取得
     * @param {RegistryApiApiV2RegistriesRegistryIdImagesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public apiV2RegistriesRegistryIdImagesGet(requestParameters: RegistryApiApiV2RegistriesRegistryIdImagesGetRequest, options?: AxiosRequestConfig) {
        return RegistryApiFp(this.configuration).apiV2RegistriesRegistryIdImagesGet(requestParameters.registryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary イメージ名に対応するタグ一覧を取得
     * @param {RegistryApiApiV2RegistriesRegistryIdImagesImageTagsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public apiV2RegistriesRegistryIdImagesImageTagsGet(requestParameters: RegistryApiApiV2RegistriesRegistryIdImagesImageTagsGetRequest, options?: AxiosRequestConfig) {
        return RegistryApiFp(this.configuration).apiV2RegistriesRegistryIdImagesImageTagsGet(requestParameters.registryId, requestParameters.image, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 階層化されたURLを吸収するためのダミーAPI。  製品版のSwaggerからは削除する。
     * @param {RegistryApiApiV2RegistriesRegistryIdImagesSegmentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public apiV2RegistriesRegistryIdImagesSegmentsGet(requestParameters: RegistryApiApiV2RegistriesRegistryIdImagesSegmentsGetRequest, options?: AxiosRequestConfig) {
        return RegistryApiFp(this.configuration).apiV2RegistriesRegistryIdImagesSegmentsGet(requestParameters.registryId, requestParameters.segments, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary テナント管理者が選択可能な登録済みのDockerレジストリ エンドポイント一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistryApi
     */
    public apiV2TenantRegistryEndpointsGet(options?: AxiosRequestConfig) {
        return RegistryApiFp(this.configuration).apiV2TenantRegistryEndpointsGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ResourceApi - axios parameter creator
 * @export
 */
export const ResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary コンテナ種別一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminResourceContainerTypesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/resource/container-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 起動中のコンテナ一覧を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminResourceContainersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/resource/containers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定コンテナを削除する
         * @param {number} tenantId テナントID
         * @param {string} name コンテナ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminResourceContainersTenantIdNameDelete: async (tenantId: number, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('apiV2AdminResourceContainersTenantIdNameDelete', 'tenantId', tenantId)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiV2AdminResourceContainersTenantIdNameDelete', 'name', name)
            const localVarPath = `/api/v2/admin/resource/containers/{tenantId}/{name}`
                .replace(`{${"tenantId"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定コンテナのイベントを取得する
         * @param {number} tenantId テナントID
         * @param {string} name コンテナ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminResourceContainersTenantIdNameEventsGet: async (tenantId: number, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('apiV2AdminResourceContainersTenantIdNameEventsGet', 'tenantId', tenantId)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiV2AdminResourceContainersTenantIdNameEventsGet', 'name', name)
            const localVarPath = `/api/v2/admin/resource/containers/{tenantId}/{name}/events`
                .replace(`{${"tenantId"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定コンテナのリソースデータを取得する
         * @param {number} tenantId テナントID
         * @param {string} name コンテナ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminResourceContainersTenantIdNameGet: async (tenantId: number, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('apiV2AdminResourceContainersTenantIdNameGet', 'tenantId', tenantId)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiV2AdminResourceContainersTenantIdNameGet', 'name', name)
            const localVarPath = `/api/v2/admin/resource/containers/{tenantId}/{name}`
                .replace(`{${"tenantId"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定コンテナのログを取得する
         * @param {number} tenantId テナントID
         * @param {string} name コンテナ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminResourceContainersTenantIdNameLogGet: async (tenantId: number, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('apiV2AdminResourceContainersTenantIdNameLogGet', 'tenantId', tenantId)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiV2AdminResourceContainersTenantIdNameLogGet', 'name', name)
            const localVarPath = `/api/v2/admin/resource/containers/{tenantId}/{name}/log`
                .replace(`{${"tenantId"}}`, encodeURIComponent(String(tenantId)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary コンテナリソース履歴のデータを取得する
         * @param {string} [startDate] 開始日
         * @param {string} [endDate] 終了日
         * @param {boolean} [withHeader] ヘッダ情報を付与するか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminResourceHistoriesContainersDataGet: async (startDate?: string, endDate?: string, withHeader?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/resource/histories/containers/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (withHeader !== undefined) {
                localVarQueryParameter['withHeader'] = withHeader;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary コンテナリソース履歴のメタデータを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminResourceHistoriesContainersMetadataGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/resource/histories/containers/metadata`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary コンテナリソース履歴を削除する
         * @param {NssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel} [nssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel] 削除対象の入力モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminResourceHistoriesContainersPatch: async (nssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel?: NssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/resource/histories/containers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ジョブ実行履歴のデータを取得する
         * @param {string} [startDate] 開始日
         * @param {string} [endDate] 終了日
         * @param {boolean} [withHeader] ヘッダ情報を付与するか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminResourceHistoriesJobsDataGet: async (startDate?: string, endDate?: string, withHeader?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/resource/histories/jobs/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (withHeader !== undefined) {
                localVarQueryParameter['withHeader'] = withHeader;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ジョブ実行履歴のメタデータを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminResourceHistoriesJobsMetadataGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/resource/histories/jobs/metadata`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ジョブ実行履歴を削除する
         * @param {NssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel} [nssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel] 削除対象の入力モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminResourceHistoriesJobsPatch: async (nssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel?: NssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/resource/histories/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ノード単位のリソースデータを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminResourceNodesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/resource/nodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary テナント単位のリソースデータを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminResourceTenantsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/resource/tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 特定テナント向けに起動中のコンテナ一覧を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantResourceContainersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/tenant/resource/containers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定コンテナを削除する
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantResourceContainersNameDelete: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiV2TenantResourceContainersNameDelete', 'name', name)
            const localVarPath = `/api/v2/tenant/resource/containers/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定コンテナのリソースデータを取得する
         * @param {string} name コンテナ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantResourceContainersNameGet: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiV2TenantResourceContainersNameGet', 'name', name)
            const localVarPath = `/api/v2/tenant/resource/containers/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定コンテナのログを取得する
         * @param {string} name コンテナ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantResourceContainersNameLogGet: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiV2TenantResourceContainersNameLogGet', 'name', name)
            const localVarPath = `/api/v2/tenant/resource/containers/{name}/log`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 特定テナントに紐づくノード単位のリソースデータを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantResourceNodesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/tenant/resource/nodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResourceApi - functional programming interface
 * @export
 */
export const ResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary コンテナ種別一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminResourceContainerTypesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusInfrastructureInfosEnumInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminResourceContainerTypesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 起動中のコンテナ一覧を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminResourceContainersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsResourceApiModelsContainerDetailsOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminResourceContainersGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定コンテナを削除する
         * @param {number} tenantId テナントID
         * @param {string} name コンテナ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminResourceContainersTenantIdNameDelete(tenantId: number, name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminResourceContainersTenantIdNameDelete(tenantId, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定コンテナのイベントを取得する
         * @param {number} tenantId テナントID
         * @param {string} name コンテナ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminResourceContainersTenantIdNameEventsGet(tenantId: number, name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemIOStream>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminResourceContainersTenantIdNameEventsGet(tenantId, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定コンテナのリソースデータを取得する
         * @param {number} tenantId テナントID
         * @param {string} name コンテナ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminResourceContainersTenantIdNameGet(tenantId: number, name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsResourceApiModelsContainerDetailsOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminResourceContainersTenantIdNameGet(tenantId, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定コンテナのログを取得する
         * @param {number} tenantId テナントID
         * @param {string} name コンテナ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminResourceContainersTenantIdNameLogGet(tenantId: number, name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemIOStream>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminResourceContainersTenantIdNameLogGet(tenantId, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary コンテナリソース履歴のデータを取得する
         * @param {string} [startDate] 開始日
         * @param {string} [endDate] 終了日
         * @param {boolean} [withHeader] ヘッダ情報を付与するか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminResourceHistoriesContainersDataGet(startDate?: string, endDate?: string, withHeader?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminResourceHistoriesContainersDataGet(startDate, endDate, withHeader, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary コンテナリソース履歴のメタデータを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminResourceHistoriesContainersMetadataGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsResourceApiModelsHistoryMetadataOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminResourceHistoriesContainersMetadataGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary コンテナリソース履歴を削除する
         * @param {NssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel} [nssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel] 削除対象の入力モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminResourceHistoriesContainersPatch(nssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel?: NssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminResourceHistoriesContainersPatch(nssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ジョブ実行履歴のデータを取得する
         * @param {string} [startDate] 開始日
         * @param {string} [endDate] 終了日
         * @param {boolean} [withHeader] ヘッダ情報を付与するか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminResourceHistoriesJobsDataGet(startDate?: string, endDate?: string, withHeader?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminResourceHistoriesJobsDataGet(startDate, endDate, withHeader, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ジョブ実行履歴のメタデータを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminResourceHistoriesJobsMetadataGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsResourceApiModelsHistoryMetadataOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminResourceHistoriesJobsMetadataGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ジョブ実行履歴を削除する
         * @param {NssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel} [nssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel] 削除対象の入力モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminResourceHistoriesJobsPatch(nssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel?: NssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminResourceHistoriesJobsPatch(nssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ノード単位のリソースデータを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminResourceNodesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsResourceApiModelsNodeResourceOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminResourceNodesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary テナント単位のリソースデータを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminResourceTenantsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsResourceApiModelsTenantResourceOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminResourceTenantsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 特定テナント向けに起動中のコンテナ一覧を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TenantResourceContainersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsResourceApiModelsContainerDetailsForTenantOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TenantResourceContainersGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定コンテナを削除する
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TenantResourceContainersNameDelete(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TenantResourceContainersNameDelete(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定コンテナのリソースデータを取得する
         * @param {string} name コンテナ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TenantResourceContainersNameGet(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsResourceApiModelsContainerDetailsForTenantOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TenantResourceContainersNameGet(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定コンテナのログを取得する
         * @param {string} name コンテナ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TenantResourceContainersNameLogGet(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemIOStream>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TenantResourceContainersNameLogGet(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 特定テナントに紐づくノード単位のリソースデータを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TenantResourceNodesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsResourceApiModelsNodeResourceOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TenantResourceNodesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ResourceApi - factory interface
 * @export
 */
export const ResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ResourceApiFp(configuration)
    return {
        /**
         * 
         * @summary コンテナ種別一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminResourceContainerTypesGet(options?: any): AxiosPromise<Array<NssolPlatypusInfrastructureInfosEnumInfo>> {
            return localVarFp.apiV2AdminResourceContainerTypesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 起動中のコンテナ一覧を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminResourceContainersGet(options?: any): AxiosPromise<Array<NssolPlatypusApiModelsResourceApiModelsContainerDetailsOutputModel>> {
            return localVarFp.apiV2AdminResourceContainersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定コンテナを削除する
         * @param {number} tenantId テナントID
         * @param {string} name コンテナ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminResourceContainersTenantIdNameDelete(tenantId: number, name: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2AdminResourceContainersTenantIdNameDelete(tenantId, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定コンテナのイベントを取得する
         * @param {number} tenantId テナントID
         * @param {string} name コンテナ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminResourceContainersTenantIdNameEventsGet(tenantId: number, name: string, options?: any): AxiosPromise<SystemIOStream> {
            return localVarFp.apiV2AdminResourceContainersTenantIdNameEventsGet(tenantId, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定コンテナのリソースデータを取得する
         * @param {number} tenantId テナントID
         * @param {string} name コンテナ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminResourceContainersTenantIdNameGet(tenantId: number, name: string, options?: any): AxiosPromise<NssolPlatypusApiModelsResourceApiModelsContainerDetailsOutputModel> {
            return localVarFp.apiV2AdminResourceContainersTenantIdNameGet(tenantId, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定コンテナのログを取得する
         * @param {number} tenantId テナントID
         * @param {string} name コンテナ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminResourceContainersTenantIdNameLogGet(tenantId: number, name: string, options?: any): AxiosPromise<SystemIOStream> {
            return localVarFp.apiV2AdminResourceContainersTenantIdNameLogGet(tenantId, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary コンテナリソース履歴のデータを取得する
         * @param {string} [startDate] 開始日
         * @param {string} [endDate] 終了日
         * @param {boolean} [withHeader] ヘッダ情報を付与するか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminResourceHistoriesContainersDataGet(startDate?: string, endDate?: string, withHeader?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2AdminResourceHistoriesContainersDataGet(startDate, endDate, withHeader, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary コンテナリソース履歴のメタデータを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminResourceHistoriesContainersMetadataGet(options?: any): AxiosPromise<NssolPlatypusApiModelsResourceApiModelsHistoryMetadataOutputModel> {
            return localVarFp.apiV2AdminResourceHistoriesContainersMetadataGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary コンテナリソース履歴を削除する
         * @param {NssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel} [nssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel] 削除対象の入力モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminResourceHistoriesContainersPatch(nssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel?: NssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2AdminResourceHistoriesContainersPatch(nssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ジョブ実行履歴のデータを取得する
         * @param {string} [startDate] 開始日
         * @param {string} [endDate] 終了日
         * @param {boolean} [withHeader] ヘッダ情報を付与するか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminResourceHistoriesJobsDataGet(startDate?: string, endDate?: string, withHeader?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2AdminResourceHistoriesJobsDataGet(startDate, endDate, withHeader, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ジョブ実行履歴のメタデータを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminResourceHistoriesJobsMetadataGet(options?: any): AxiosPromise<NssolPlatypusApiModelsResourceApiModelsHistoryMetadataOutputModel> {
            return localVarFp.apiV2AdminResourceHistoriesJobsMetadataGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ジョブ実行履歴を削除する
         * @param {NssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel} [nssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel] 削除対象の入力モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminResourceHistoriesJobsPatch(nssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel?: NssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2AdminResourceHistoriesJobsPatch(nssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ノード単位のリソースデータを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminResourceNodesGet(options?: any): AxiosPromise<Array<NssolPlatypusApiModelsResourceApiModelsNodeResourceOutputModel>> {
            return localVarFp.apiV2AdminResourceNodesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary テナント単位のリソースデータを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminResourceTenantsGet(options?: any): AxiosPromise<Array<NssolPlatypusApiModelsResourceApiModelsTenantResourceOutputModel>> {
            return localVarFp.apiV2AdminResourceTenantsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 特定テナント向けに起動中のコンテナ一覧を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantResourceContainersGet(options?: any): AxiosPromise<Array<NssolPlatypusApiModelsResourceApiModelsContainerDetailsForTenantOutputModel>> {
            return localVarFp.apiV2TenantResourceContainersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定コンテナを削除する
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantResourceContainersNameDelete(name: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2TenantResourceContainersNameDelete(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定コンテナのリソースデータを取得する
         * @param {string} name コンテナ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantResourceContainersNameGet(name: string, options?: any): AxiosPromise<NssolPlatypusApiModelsResourceApiModelsContainerDetailsForTenantOutputModel> {
            return localVarFp.apiV2TenantResourceContainersNameGet(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定コンテナのログを取得する
         * @param {string} name コンテナ名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantResourceContainersNameLogGet(name: string, options?: any): AxiosPromise<SystemIOStream> {
            return localVarFp.apiV2TenantResourceContainersNameLogGet(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 特定テナントに紐づくノード単位のリソースデータを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantResourceNodesGet(options?: any): AxiosPromise<Array<NssolPlatypusApiModelsResourceApiModelsNodeResourceOutputModel>> {
            return localVarFp.apiV2TenantResourceNodesGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV2AdminResourceContainersTenantIdNameDelete operation in ResourceApi.
 * @export
 * @interface ResourceApiApiV2AdminResourceContainersTenantIdNameDeleteRequest
 */
export interface ResourceApiApiV2AdminResourceContainersTenantIdNameDeleteRequest {
    /**
     * テナントID
     * @type {number}
     * @memberof ResourceApiApiV2AdminResourceContainersTenantIdNameDelete
     */
    readonly tenantId: number

    /**
     * コンテナ名
     * @type {string}
     * @memberof ResourceApiApiV2AdminResourceContainersTenantIdNameDelete
     */
    readonly name: string
}

/**
 * Request parameters for apiV2AdminResourceContainersTenantIdNameEventsGet operation in ResourceApi.
 * @export
 * @interface ResourceApiApiV2AdminResourceContainersTenantIdNameEventsGetRequest
 */
export interface ResourceApiApiV2AdminResourceContainersTenantIdNameEventsGetRequest {
    /**
     * テナントID
     * @type {number}
     * @memberof ResourceApiApiV2AdminResourceContainersTenantIdNameEventsGet
     */
    readonly tenantId: number

    /**
     * コンテナ名
     * @type {string}
     * @memberof ResourceApiApiV2AdminResourceContainersTenantIdNameEventsGet
     */
    readonly name: string
}

/**
 * Request parameters for apiV2AdminResourceContainersTenantIdNameGet operation in ResourceApi.
 * @export
 * @interface ResourceApiApiV2AdminResourceContainersTenantIdNameGetRequest
 */
export interface ResourceApiApiV2AdminResourceContainersTenantIdNameGetRequest {
    /**
     * テナントID
     * @type {number}
     * @memberof ResourceApiApiV2AdminResourceContainersTenantIdNameGet
     */
    readonly tenantId: number

    /**
     * コンテナ名
     * @type {string}
     * @memberof ResourceApiApiV2AdminResourceContainersTenantIdNameGet
     */
    readonly name: string
}

/**
 * Request parameters for apiV2AdminResourceContainersTenantIdNameLogGet operation in ResourceApi.
 * @export
 * @interface ResourceApiApiV2AdminResourceContainersTenantIdNameLogGetRequest
 */
export interface ResourceApiApiV2AdminResourceContainersTenantIdNameLogGetRequest {
    /**
     * テナントID
     * @type {number}
     * @memberof ResourceApiApiV2AdminResourceContainersTenantIdNameLogGet
     */
    readonly tenantId: number

    /**
     * コンテナ名
     * @type {string}
     * @memberof ResourceApiApiV2AdminResourceContainersTenantIdNameLogGet
     */
    readonly name: string
}

/**
 * Request parameters for apiV2AdminResourceHistoriesContainersDataGet operation in ResourceApi.
 * @export
 * @interface ResourceApiApiV2AdminResourceHistoriesContainersDataGetRequest
 */
export interface ResourceApiApiV2AdminResourceHistoriesContainersDataGetRequest {
    /**
     * 開始日
     * @type {string}
     * @memberof ResourceApiApiV2AdminResourceHistoriesContainersDataGet
     */
    readonly startDate?: string

    /**
     * 終了日
     * @type {string}
     * @memberof ResourceApiApiV2AdminResourceHistoriesContainersDataGet
     */
    readonly endDate?: string

    /**
     * ヘッダ情報を付与するか
     * @type {boolean}
     * @memberof ResourceApiApiV2AdminResourceHistoriesContainersDataGet
     */
    readonly withHeader?: boolean
}

/**
 * Request parameters for apiV2AdminResourceHistoriesContainersPatch operation in ResourceApi.
 * @export
 * @interface ResourceApiApiV2AdminResourceHistoriesContainersPatchRequest
 */
export interface ResourceApiApiV2AdminResourceHistoriesContainersPatchRequest {
    /**
     * 削除対象の入力モデル
     * @type {NssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel}
     * @memberof ResourceApiApiV2AdminResourceHistoriesContainersPatch
     */
    readonly nssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel?: NssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel
}

/**
 * Request parameters for apiV2AdminResourceHistoriesJobsDataGet operation in ResourceApi.
 * @export
 * @interface ResourceApiApiV2AdminResourceHistoriesJobsDataGetRequest
 */
export interface ResourceApiApiV2AdminResourceHistoriesJobsDataGetRequest {
    /**
     * 開始日
     * @type {string}
     * @memberof ResourceApiApiV2AdminResourceHistoriesJobsDataGet
     */
    readonly startDate?: string

    /**
     * 終了日
     * @type {string}
     * @memberof ResourceApiApiV2AdminResourceHistoriesJobsDataGet
     */
    readonly endDate?: string

    /**
     * ヘッダ情報を付与するか
     * @type {boolean}
     * @memberof ResourceApiApiV2AdminResourceHistoriesJobsDataGet
     */
    readonly withHeader?: boolean
}

/**
 * Request parameters for apiV2AdminResourceHistoriesJobsPatch operation in ResourceApi.
 * @export
 * @interface ResourceApiApiV2AdminResourceHistoriesJobsPatchRequest
 */
export interface ResourceApiApiV2AdminResourceHistoriesJobsPatchRequest {
    /**
     * 削除対象の入力モデル
     * @type {NssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel}
     * @memberof ResourceApiApiV2AdminResourceHistoriesJobsPatch
     */
    readonly nssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel?: NssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel
}

/**
 * Request parameters for apiV2TenantResourceContainersNameDelete operation in ResourceApi.
 * @export
 * @interface ResourceApiApiV2TenantResourceContainersNameDeleteRequest
 */
export interface ResourceApiApiV2TenantResourceContainersNameDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ResourceApiApiV2TenantResourceContainersNameDelete
     */
    readonly name: string
}

/**
 * Request parameters for apiV2TenantResourceContainersNameGet operation in ResourceApi.
 * @export
 * @interface ResourceApiApiV2TenantResourceContainersNameGetRequest
 */
export interface ResourceApiApiV2TenantResourceContainersNameGetRequest {
    /**
     * コンテナ名
     * @type {string}
     * @memberof ResourceApiApiV2TenantResourceContainersNameGet
     */
    readonly name: string
}

/**
 * Request parameters for apiV2TenantResourceContainersNameLogGet operation in ResourceApi.
 * @export
 * @interface ResourceApiApiV2TenantResourceContainersNameLogGetRequest
 */
export interface ResourceApiApiV2TenantResourceContainersNameLogGetRequest {
    /**
     * コンテナ名
     * @type {string}
     * @memberof ResourceApiApiV2TenantResourceContainersNameLogGet
     */
    readonly name: string
}

/**
 * ResourceApi - object-oriented interface
 * @export
 * @class ResourceApi
 * @extends {BaseAPI}
 */
export class ResourceApi extends BaseAPI {
    /**
     * 
     * @summary コンテナ種別一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public apiV2AdminResourceContainerTypesGet(options?: AxiosRequestConfig) {
        return ResourceApiFp(this.configuration).apiV2AdminResourceContainerTypesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 起動中のコンテナ一覧を取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public apiV2AdminResourceContainersGet(options?: AxiosRequestConfig) {
        return ResourceApiFp(this.configuration).apiV2AdminResourceContainersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定コンテナを削除する
     * @param {ResourceApiApiV2AdminResourceContainersTenantIdNameDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public apiV2AdminResourceContainersTenantIdNameDelete(requestParameters: ResourceApiApiV2AdminResourceContainersTenantIdNameDeleteRequest, options?: AxiosRequestConfig) {
        return ResourceApiFp(this.configuration).apiV2AdminResourceContainersTenantIdNameDelete(requestParameters.tenantId, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定コンテナのイベントを取得する
     * @param {ResourceApiApiV2AdminResourceContainersTenantIdNameEventsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public apiV2AdminResourceContainersTenantIdNameEventsGet(requestParameters: ResourceApiApiV2AdminResourceContainersTenantIdNameEventsGetRequest, options?: AxiosRequestConfig) {
        return ResourceApiFp(this.configuration).apiV2AdminResourceContainersTenantIdNameEventsGet(requestParameters.tenantId, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定コンテナのリソースデータを取得する
     * @param {ResourceApiApiV2AdminResourceContainersTenantIdNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public apiV2AdminResourceContainersTenantIdNameGet(requestParameters: ResourceApiApiV2AdminResourceContainersTenantIdNameGetRequest, options?: AxiosRequestConfig) {
        return ResourceApiFp(this.configuration).apiV2AdminResourceContainersTenantIdNameGet(requestParameters.tenantId, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定コンテナのログを取得する
     * @param {ResourceApiApiV2AdminResourceContainersTenantIdNameLogGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public apiV2AdminResourceContainersTenantIdNameLogGet(requestParameters: ResourceApiApiV2AdminResourceContainersTenantIdNameLogGetRequest, options?: AxiosRequestConfig) {
        return ResourceApiFp(this.configuration).apiV2AdminResourceContainersTenantIdNameLogGet(requestParameters.tenantId, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary コンテナリソース履歴のデータを取得する
     * @param {ResourceApiApiV2AdminResourceHistoriesContainersDataGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public apiV2AdminResourceHistoriesContainersDataGet(requestParameters: ResourceApiApiV2AdminResourceHistoriesContainersDataGetRequest = {}, options?: AxiosRequestConfig) {
        return ResourceApiFp(this.configuration).apiV2AdminResourceHistoriesContainersDataGet(requestParameters.startDate, requestParameters.endDate, requestParameters.withHeader, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary コンテナリソース履歴のメタデータを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public apiV2AdminResourceHistoriesContainersMetadataGet(options?: AxiosRequestConfig) {
        return ResourceApiFp(this.configuration).apiV2AdminResourceHistoriesContainersMetadataGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary コンテナリソース履歴を削除する
     * @param {ResourceApiApiV2AdminResourceHistoriesContainersPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public apiV2AdminResourceHistoriesContainersPatch(requestParameters: ResourceApiApiV2AdminResourceHistoriesContainersPatchRequest = {}, options?: AxiosRequestConfig) {
        return ResourceApiFp(this.configuration).apiV2AdminResourceHistoriesContainersPatch(requestParameters.nssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ジョブ実行履歴のデータを取得する
     * @param {ResourceApiApiV2AdminResourceHistoriesJobsDataGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public apiV2AdminResourceHistoriesJobsDataGet(requestParameters: ResourceApiApiV2AdminResourceHistoriesJobsDataGetRequest = {}, options?: AxiosRequestConfig) {
        return ResourceApiFp(this.configuration).apiV2AdminResourceHistoriesJobsDataGet(requestParameters.startDate, requestParameters.endDate, requestParameters.withHeader, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ジョブ実行履歴のメタデータを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public apiV2AdminResourceHistoriesJobsMetadataGet(options?: AxiosRequestConfig) {
        return ResourceApiFp(this.configuration).apiV2AdminResourceHistoriesJobsMetadataGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ジョブ実行履歴を削除する
     * @param {ResourceApiApiV2AdminResourceHistoriesJobsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public apiV2AdminResourceHistoriesJobsPatch(requestParameters: ResourceApiApiV2AdminResourceHistoriesJobsPatchRequest = {}, options?: AxiosRequestConfig) {
        return ResourceApiFp(this.configuration).apiV2AdminResourceHistoriesJobsPatch(requestParameters.nssolPlatypusApiModelsResourceApiModelsHistoryDeleteInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ノード単位のリソースデータを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public apiV2AdminResourceNodesGet(options?: AxiosRequestConfig) {
        return ResourceApiFp(this.configuration).apiV2AdminResourceNodesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary テナント単位のリソースデータを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public apiV2AdminResourceTenantsGet(options?: AxiosRequestConfig) {
        return ResourceApiFp(this.configuration).apiV2AdminResourceTenantsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 特定テナント向けに起動中のコンテナ一覧を取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public apiV2TenantResourceContainersGet(options?: AxiosRequestConfig) {
        return ResourceApiFp(this.configuration).apiV2TenantResourceContainersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定コンテナを削除する
     * @param {ResourceApiApiV2TenantResourceContainersNameDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public apiV2TenantResourceContainersNameDelete(requestParameters: ResourceApiApiV2TenantResourceContainersNameDeleteRequest, options?: AxiosRequestConfig) {
        return ResourceApiFp(this.configuration).apiV2TenantResourceContainersNameDelete(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定コンテナのリソースデータを取得する
     * @param {ResourceApiApiV2TenantResourceContainersNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public apiV2TenantResourceContainersNameGet(requestParameters: ResourceApiApiV2TenantResourceContainersNameGetRequest, options?: AxiosRequestConfig) {
        return ResourceApiFp(this.configuration).apiV2TenantResourceContainersNameGet(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定コンテナのログを取得する
     * @param {ResourceApiApiV2TenantResourceContainersNameLogGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public apiV2TenantResourceContainersNameLogGet(requestParameters: ResourceApiApiV2TenantResourceContainersNameLogGetRequest, options?: AxiosRequestConfig) {
        return ResourceApiFp(this.configuration).apiV2TenantResourceContainersNameLogGet(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 特定テナントに紐づくノード単位のリソースデータを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public apiV2TenantResourceNodesGet(options?: AxiosRequestConfig) {
        return ResourceApiFp(this.configuration).apiV2TenantResourceNodesGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RoleApi - axios parameter creator
 * @export
 */
export const RoleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 全ロール一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminRolesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ロールを削除する。
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminRolesIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminRolesIdDelete', 'id', id)
            const localVarPath = `/api/v2/admin/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定されたIDのロール情報を取得。
         * @param {number} id ロールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminRolesIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminRolesIdGet', 'id', id)
            const localVarPath = `/api/v2/admin/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ロール情報の編集
         * @param {number} id 
         * @param {NssolPlatypusApiModelsRoleApiModelsEditInputModel} [nssolPlatypusApiModelsRoleApiModelsEditInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminRolesIdPut: async (id: number, nssolPlatypusApiModelsRoleApiModelsEditInputModel?: NssolPlatypusApiModelsRoleApiModelsEditInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminRolesIdPut', 'id', id)
            const localVarPath = `/api/v2/admin/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsRoleApiModelsEditInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新規にロールを登録する
         * @param {NssolPlatypusApiModelsRoleApiModelsCreateInputModel} [nssolPlatypusApiModelsRoleApiModelsCreateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminRolesPost: async (nssolPlatypusApiModelsRoleApiModelsCreateInputModel?: NssolPlatypusApiModelsRoleApiModelsCreateInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsRoleApiModelsCreateInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザグループ管理画面から参照する。  テナント共通ロールが対象。（テナント用カスタムロールは対象外）
         * @summary テナント共通ロール一覧を取得。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTenantCommonRolesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/tenant-common-roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * システムロール以外の共通ロールと、テナント用カスタムロールが対象。
         * @summary 現在選択中のテナントで利用可能なロール一覧を取得。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantRolesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/tenant/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary テナント用カスタムロールを削除する。
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantRolesIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2TenantRolesIdDelete', 'id', id)
            const localVarPath = `/api/v2/tenant/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定されたIDのテナント用カスタムロール情報を取得。
         * @param {number} id ロールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantRolesIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2TenantRolesIdGet', 'id', id)
            const localVarPath = `/api/v2/tenant/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary テナント用カスタムロール情報の編集
         * @param {number} id 
         * @param {NssolPlatypusApiModelsRoleApiModelsEditForTenantInputModel} [nssolPlatypusApiModelsRoleApiModelsEditForTenantInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantRolesIdPut: async (id: number, nssolPlatypusApiModelsRoleApiModelsEditForTenantInputModel?: NssolPlatypusApiModelsRoleApiModelsEditForTenantInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2TenantRolesIdPut', 'id', id)
            const localVarPath = `/api/v2/tenant/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsRoleApiModelsEditForTenantInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新規にロールを登録する
         * @param {NssolPlatypusApiModelsRoleApiModelsCreateForTenantInputModel} [nssolPlatypusApiModelsRoleApiModelsCreateForTenantInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantRolesPost: async (nssolPlatypusApiModelsRoleApiModelsCreateForTenantInputModel?: NssolPlatypusApiModelsRoleApiModelsCreateForTenantInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/tenant/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsRoleApiModelsCreateForTenantInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoleApi - functional programming interface
 * @export
 */
export const RoleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 全ロール一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminRolesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsRoleApiModelsIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminRolesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ロールを削除する。
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminRolesIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminRolesIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定されたIDのロール情報を取得。
         * @param {number} id ロールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminRolesIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsRoleApiModelsDetailsOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminRolesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ロール情報の編集
         * @param {number} id 
         * @param {NssolPlatypusApiModelsRoleApiModelsEditInputModel} [nssolPlatypusApiModelsRoleApiModelsEditInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminRolesIdPut(id: number, nssolPlatypusApiModelsRoleApiModelsEditInputModel?: NssolPlatypusApiModelsRoleApiModelsEditInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsRoleApiModelsIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminRolesIdPut(id, nssolPlatypusApiModelsRoleApiModelsEditInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新規にロールを登録する
         * @param {NssolPlatypusApiModelsRoleApiModelsCreateInputModel} [nssolPlatypusApiModelsRoleApiModelsCreateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminRolesPost(nssolPlatypusApiModelsRoleApiModelsCreateInputModel?: NssolPlatypusApiModelsRoleApiModelsCreateInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsRoleApiModelsIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminRolesPost(nssolPlatypusApiModelsRoleApiModelsCreateInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザグループ管理画面から参照する。  テナント共通ロールが対象。（テナント用カスタムロールは対象外）
         * @summary テナント共通ロール一覧を取得。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminTenantCommonRolesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsRoleApiModelsIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminTenantCommonRolesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * システムロール以外の共通ロールと、テナント用カスタムロールが対象。
         * @summary 現在選択中のテナントで利用可能なロール一覧を取得。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TenantRolesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsRoleApiModelsIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TenantRolesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary テナント用カスタムロールを削除する。
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TenantRolesIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TenantRolesIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定されたIDのテナント用カスタムロール情報を取得。
         * @param {number} id ロールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TenantRolesIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsRoleApiModelsDetailsOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TenantRolesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary テナント用カスタムロール情報の編集
         * @param {number} id 
         * @param {NssolPlatypusApiModelsRoleApiModelsEditForTenantInputModel} [nssolPlatypusApiModelsRoleApiModelsEditForTenantInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TenantRolesIdPut(id: number, nssolPlatypusApiModelsRoleApiModelsEditForTenantInputModel?: NssolPlatypusApiModelsRoleApiModelsEditForTenantInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsRoleApiModelsIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TenantRolesIdPut(id, nssolPlatypusApiModelsRoleApiModelsEditForTenantInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新規にロールを登録する
         * @param {NssolPlatypusApiModelsRoleApiModelsCreateForTenantInputModel} [nssolPlatypusApiModelsRoleApiModelsCreateForTenantInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TenantRolesPost(nssolPlatypusApiModelsRoleApiModelsCreateForTenantInputModel?: NssolPlatypusApiModelsRoleApiModelsCreateForTenantInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsRoleApiModelsIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TenantRolesPost(nssolPlatypusApiModelsRoleApiModelsCreateForTenantInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RoleApi - factory interface
 * @export
 */
export const RoleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoleApiFp(configuration)
    return {
        /**
         * 
         * @summary 全ロール一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminRolesGet(options?: any): AxiosPromise<Array<NssolPlatypusApiModelsRoleApiModelsIndexOutputModel>> {
            return localVarFp.apiV2AdminRolesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ロールを削除する。
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminRolesIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2AdminRolesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定されたIDのロール情報を取得。
         * @param {number} id ロールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminRolesIdGet(id: number, options?: any): AxiosPromise<NssolPlatypusApiModelsRoleApiModelsDetailsOutputModel> {
            return localVarFp.apiV2AdminRolesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ロール情報の編集
         * @param {number} id 
         * @param {NssolPlatypusApiModelsRoleApiModelsEditInputModel} [nssolPlatypusApiModelsRoleApiModelsEditInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminRolesIdPut(id: number, nssolPlatypusApiModelsRoleApiModelsEditInputModel?: NssolPlatypusApiModelsRoleApiModelsEditInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsRoleApiModelsIndexOutputModel> {
            return localVarFp.apiV2AdminRolesIdPut(id, nssolPlatypusApiModelsRoleApiModelsEditInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新規にロールを登録する
         * @param {NssolPlatypusApiModelsRoleApiModelsCreateInputModel} [nssolPlatypusApiModelsRoleApiModelsCreateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminRolesPost(nssolPlatypusApiModelsRoleApiModelsCreateInputModel?: NssolPlatypusApiModelsRoleApiModelsCreateInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsRoleApiModelsIndexOutputModel> {
            return localVarFp.apiV2AdminRolesPost(nssolPlatypusApiModelsRoleApiModelsCreateInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザグループ管理画面から参照する。  テナント共通ロールが対象。（テナント用カスタムロールは対象外）
         * @summary テナント共通ロール一覧を取得。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTenantCommonRolesGet(options?: any): AxiosPromise<Array<NssolPlatypusApiModelsRoleApiModelsIndexOutputModel>> {
            return localVarFp.apiV2AdminTenantCommonRolesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * システムロール以外の共通ロールと、テナント用カスタムロールが対象。
         * @summary 現在選択中のテナントで利用可能なロール一覧を取得。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantRolesGet(options?: any): AxiosPromise<Array<NssolPlatypusApiModelsRoleApiModelsIndexOutputModel>> {
            return localVarFp.apiV2TenantRolesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary テナント用カスタムロールを削除する。
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantRolesIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2TenantRolesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定されたIDのテナント用カスタムロール情報を取得。
         * @param {number} id ロールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantRolesIdGet(id: number, options?: any): AxiosPromise<NssolPlatypusApiModelsRoleApiModelsDetailsOutputModel> {
            return localVarFp.apiV2TenantRolesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary テナント用カスタムロール情報の編集
         * @param {number} id 
         * @param {NssolPlatypusApiModelsRoleApiModelsEditForTenantInputModel} [nssolPlatypusApiModelsRoleApiModelsEditForTenantInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantRolesIdPut(id: number, nssolPlatypusApiModelsRoleApiModelsEditForTenantInputModel?: NssolPlatypusApiModelsRoleApiModelsEditForTenantInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsRoleApiModelsIndexOutputModel> {
            return localVarFp.apiV2TenantRolesIdPut(id, nssolPlatypusApiModelsRoleApiModelsEditForTenantInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新規にロールを登録する
         * @param {NssolPlatypusApiModelsRoleApiModelsCreateForTenantInputModel} [nssolPlatypusApiModelsRoleApiModelsCreateForTenantInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantRolesPost(nssolPlatypusApiModelsRoleApiModelsCreateForTenantInputModel?: NssolPlatypusApiModelsRoleApiModelsCreateForTenantInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsRoleApiModelsIndexOutputModel> {
            return localVarFp.apiV2TenantRolesPost(nssolPlatypusApiModelsRoleApiModelsCreateForTenantInputModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV2AdminRolesIdDelete operation in RoleApi.
 * @export
 * @interface RoleApiApiV2AdminRolesIdDeleteRequest
 */
export interface RoleApiApiV2AdminRolesIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof RoleApiApiV2AdminRolesIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiV2AdminRolesIdGet operation in RoleApi.
 * @export
 * @interface RoleApiApiV2AdminRolesIdGetRequest
 */
export interface RoleApiApiV2AdminRolesIdGetRequest {
    /**
     * ロールID
     * @type {number}
     * @memberof RoleApiApiV2AdminRolesIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV2AdminRolesIdPut operation in RoleApi.
 * @export
 * @interface RoleApiApiV2AdminRolesIdPutRequest
 */
export interface RoleApiApiV2AdminRolesIdPutRequest {
    /**
     * 
     * @type {number}
     * @memberof RoleApiApiV2AdminRolesIdPut
     */
    readonly id: number

    /**
     * 
     * @type {NssolPlatypusApiModelsRoleApiModelsEditInputModel}
     * @memberof RoleApiApiV2AdminRolesIdPut
     */
    readonly nssolPlatypusApiModelsRoleApiModelsEditInputModel?: NssolPlatypusApiModelsRoleApiModelsEditInputModel
}

/**
 * Request parameters for apiV2AdminRolesPost operation in RoleApi.
 * @export
 * @interface RoleApiApiV2AdminRolesPostRequest
 */
export interface RoleApiApiV2AdminRolesPostRequest {
    /**
     * 
     * @type {NssolPlatypusApiModelsRoleApiModelsCreateInputModel}
     * @memberof RoleApiApiV2AdminRolesPost
     */
    readonly nssolPlatypusApiModelsRoleApiModelsCreateInputModel?: NssolPlatypusApiModelsRoleApiModelsCreateInputModel
}

/**
 * Request parameters for apiV2TenantRolesIdDelete operation in RoleApi.
 * @export
 * @interface RoleApiApiV2TenantRolesIdDeleteRequest
 */
export interface RoleApiApiV2TenantRolesIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof RoleApiApiV2TenantRolesIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiV2TenantRolesIdGet operation in RoleApi.
 * @export
 * @interface RoleApiApiV2TenantRolesIdGetRequest
 */
export interface RoleApiApiV2TenantRolesIdGetRequest {
    /**
     * ロールID
     * @type {number}
     * @memberof RoleApiApiV2TenantRolesIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV2TenantRolesIdPut operation in RoleApi.
 * @export
 * @interface RoleApiApiV2TenantRolesIdPutRequest
 */
export interface RoleApiApiV2TenantRolesIdPutRequest {
    /**
     * 
     * @type {number}
     * @memberof RoleApiApiV2TenantRolesIdPut
     */
    readonly id: number

    /**
     * 
     * @type {NssolPlatypusApiModelsRoleApiModelsEditForTenantInputModel}
     * @memberof RoleApiApiV2TenantRolesIdPut
     */
    readonly nssolPlatypusApiModelsRoleApiModelsEditForTenantInputModel?: NssolPlatypusApiModelsRoleApiModelsEditForTenantInputModel
}

/**
 * Request parameters for apiV2TenantRolesPost operation in RoleApi.
 * @export
 * @interface RoleApiApiV2TenantRolesPostRequest
 */
export interface RoleApiApiV2TenantRolesPostRequest {
    /**
     * 
     * @type {NssolPlatypusApiModelsRoleApiModelsCreateForTenantInputModel}
     * @memberof RoleApiApiV2TenantRolesPost
     */
    readonly nssolPlatypusApiModelsRoleApiModelsCreateForTenantInputModel?: NssolPlatypusApiModelsRoleApiModelsCreateForTenantInputModel
}

/**
 * RoleApi - object-oriented interface
 * @export
 * @class RoleApi
 * @extends {BaseAPI}
 */
export class RoleApi extends BaseAPI {
    /**
     * 
     * @summary 全ロール一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public apiV2AdminRolesGet(options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).apiV2AdminRolesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ロールを削除する。
     * @param {RoleApiApiV2AdminRolesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public apiV2AdminRolesIdDelete(requestParameters: RoleApiApiV2AdminRolesIdDeleteRequest, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).apiV2AdminRolesIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定されたIDのロール情報を取得。
     * @param {RoleApiApiV2AdminRolesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public apiV2AdminRolesIdGet(requestParameters: RoleApiApiV2AdminRolesIdGetRequest, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).apiV2AdminRolesIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ロール情報の編集
     * @param {RoleApiApiV2AdminRolesIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public apiV2AdminRolesIdPut(requestParameters: RoleApiApiV2AdminRolesIdPutRequest, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).apiV2AdminRolesIdPut(requestParameters.id, requestParameters.nssolPlatypusApiModelsRoleApiModelsEditInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新規にロールを登録する
     * @param {RoleApiApiV2AdminRolesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public apiV2AdminRolesPost(requestParameters: RoleApiApiV2AdminRolesPostRequest = {}, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).apiV2AdminRolesPost(requestParameters.nssolPlatypusApiModelsRoleApiModelsCreateInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザグループ管理画面から参照する。  テナント共通ロールが対象。（テナント用カスタムロールは対象外）
     * @summary テナント共通ロール一覧を取得。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public apiV2AdminTenantCommonRolesGet(options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).apiV2AdminTenantCommonRolesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * システムロール以外の共通ロールと、テナント用カスタムロールが対象。
     * @summary 現在選択中のテナントで利用可能なロール一覧を取得。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public apiV2TenantRolesGet(options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).apiV2TenantRolesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary テナント用カスタムロールを削除する。
     * @param {RoleApiApiV2TenantRolesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public apiV2TenantRolesIdDelete(requestParameters: RoleApiApiV2TenantRolesIdDeleteRequest, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).apiV2TenantRolesIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定されたIDのテナント用カスタムロール情報を取得。
     * @param {RoleApiApiV2TenantRolesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public apiV2TenantRolesIdGet(requestParameters: RoleApiApiV2TenantRolesIdGetRequest, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).apiV2TenantRolesIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary テナント用カスタムロール情報の編集
     * @param {RoleApiApiV2TenantRolesIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public apiV2TenantRolesIdPut(requestParameters: RoleApiApiV2TenantRolesIdPutRequest, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).apiV2TenantRolesIdPut(requestParameters.id, requestParameters.nssolPlatypusApiModelsRoleApiModelsEditForTenantInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新規にロールを登録する
     * @param {RoleApiApiV2TenantRolesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleApi
     */
    public apiV2TenantRolesPost(requestParameters: RoleApiApiV2TenantRolesPostRequest = {}, options?: AxiosRequestConfig) {
        return RoleApiFp(this.configuration).apiV2TenantRolesPost(requestParameters.nssolPlatypusApiModelsRoleApiModelsCreateForTenantInputModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StorageApi - axios parameter creator
 * @export
 */
export const StorageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 登録済みのStorageエンドポイント一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminStorageEndpointsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/storage/endpoints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Storageエンドポイント情報の削除
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminStorageEndpointsIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminStorageEndpointsIdDelete', 'id', id)
            const localVarPath = `/api/v2/admin/storage/endpoints/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定されたIDのStorageエンドポイント情報を取得。
         * @param {number} id StorageエンドポイントID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminStorageEndpointsIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminStorageEndpointsIdGet', 'id', id)
            const localVarPath = `/api/v2/admin/storage/endpoints/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Storageエンドポイント情報の編集
         * @param {number} id 
         * @param {NssolPlatypusApiModelsStorageApiModelsCreateInputModel} [nssolPlatypusApiModelsStorageApiModelsCreateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminStorageEndpointsIdPut: async (id: number, nssolPlatypusApiModelsStorageApiModelsCreateInputModel?: NssolPlatypusApiModelsStorageApiModelsCreateInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminStorageEndpointsIdPut', 'id', id)
            const localVarPath = `/api/v2/admin/storage/endpoints/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsStorageApiModelsCreateInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新規にStorageエンドポイントを登録する
         * @param {NssolPlatypusApiModelsStorageApiModelsCreateInputModel} [nssolPlatypusApiModelsStorageApiModelsCreateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminStorageEndpointsPost: async (nssolPlatypusApiModelsStorageApiModelsCreateInputModel?: NssolPlatypusApiModelsStorageApiModelsCreateInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/storage/endpoints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsStorageApiModelsCreateInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ダウンロード用の一時署名URLを取得する
         * @param {string} [type] リソース種別
         * @param {string} [storedPath] 保存先パス
         * @param {string} [fileName] ダウンロード時に書き換えるファイル名
         * @param {boolean} [secure] HTTPS化するか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DownloadUrlGet: async (type?: string, storedPath?: string, fileName?: string, secure?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/download/url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (storedPath !== undefined) {
                localVarQueryParameter['storedPath'] = storedPath;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['fileName'] = fileName;
            }

            if (secure !== undefined) {
                localVarQueryParameter['secure'] = secure;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 分割アップロードの処理を完了する
         * @param {NssolPlatypusLogicModelsStorageLogicModelsCompleteMultiplePartUploadInputModel} [nssolPlatypusLogicModelsStorageLogicModelsCompleteMultiplePartUploadInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UploadCompletePost: async (nssolPlatypusLogicModelsStorageLogicModelsCompleteMultiplePartUploadInputModel?: NssolPlatypusLogicModelsStorageLogicModelsCompleteMultiplePartUploadInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/upload/complete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusLogicModelsStorageLogicModelsCompleteMultiplePartUploadInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 分割アップロードを行うためのパラメータを取得する
         * @param {string} fileName ファイル名
         * @param {number} partSum 分割数
         * @param {string} type リソース名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UploadParameterGet: async (fileName: string, partSum: number, type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileName' is not null or undefined
            assertParamExists('apiV2UploadParameterGet', 'fileName', fileName)
            // verify required parameter 'partSum' is not null or undefined
            assertParamExists('apiV2UploadParameterGet', 'partSum', partSum)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('apiV2UploadParameterGet', 'type', type)
            const localVarPath = `/api/v2/upload/parameter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (fileName !== undefined) {
                localVarQueryParameter['fileName'] = fileName;
            }

            if (partSum !== undefined) {
                localVarQueryParameter['partSum'] = partSum;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StorageApi - functional programming interface
 * @export
 */
export const StorageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StorageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 登録済みのStorageエンドポイント一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminStorageEndpointsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsStorageApiModelsIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminStorageEndpointsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Storageエンドポイント情報の削除
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminStorageEndpointsIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminStorageEndpointsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定されたIDのStorageエンドポイント情報を取得。
         * @param {number} id StorageエンドポイントID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminStorageEndpointsIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsStorageApiModelsDetailsOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminStorageEndpointsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Storageエンドポイント情報の編集
         * @param {number} id 
         * @param {NssolPlatypusApiModelsStorageApiModelsCreateInputModel} [nssolPlatypusApiModelsStorageApiModelsCreateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminStorageEndpointsIdPut(id: number, nssolPlatypusApiModelsStorageApiModelsCreateInputModel?: NssolPlatypusApiModelsStorageApiModelsCreateInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsStorageApiModelsIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminStorageEndpointsIdPut(id, nssolPlatypusApiModelsStorageApiModelsCreateInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新規にStorageエンドポイントを登録する
         * @param {NssolPlatypusApiModelsStorageApiModelsCreateInputModel} [nssolPlatypusApiModelsStorageApiModelsCreateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminStorageEndpointsPost(nssolPlatypusApiModelsStorageApiModelsCreateInputModel?: NssolPlatypusApiModelsStorageApiModelsCreateInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsStorageApiModelsIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminStorageEndpointsPost(nssolPlatypusApiModelsStorageApiModelsCreateInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ダウンロード用の一時署名URLを取得する
         * @param {string} [type] リソース種別
         * @param {string} [storedPath] 保存先パス
         * @param {string} [fileName] ダウンロード時に書き換えるファイル名
         * @param {boolean} [secure] HTTPS化するか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2DownloadUrlGet(type?: string, storedPath?: string, fileName?: string, secure?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2DownloadUrlGet(type, storedPath, fileName, secure, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 分割アップロードの処理を完了する
         * @param {NssolPlatypusLogicModelsStorageLogicModelsCompleteMultiplePartUploadInputModel} [nssolPlatypusLogicModelsStorageLogicModelsCompleteMultiplePartUploadInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2UploadCompletePost(nssolPlatypusLogicModelsStorageLogicModelsCompleteMultiplePartUploadInputModel?: NssolPlatypusLogicModelsStorageLogicModelsCompleteMultiplePartUploadInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusLogicModelsStorageLogicModelsCompleteMultiplePartUploadInputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2UploadCompletePost(nssolPlatypusLogicModelsStorageLogicModelsCompleteMultiplePartUploadInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 分割アップロードを行うためのパラメータを取得する
         * @param {string} fileName ファイル名
         * @param {number} partSum 分割数
         * @param {string} type リソース名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2UploadParameterGet(fileName: string, partSum: number, type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusLogicModelsStorageLogicModelsMultiPartUploadModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2UploadParameterGet(fileName, partSum, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StorageApi - factory interface
 * @export
 */
export const StorageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StorageApiFp(configuration)
    return {
        /**
         * 
         * @summary 登録済みのStorageエンドポイント一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminStorageEndpointsGet(options?: any): AxiosPromise<Array<NssolPlatypusApiModelsStorageApiModelsIndexOutputModel>> {
            return localVarFp.apiV2AdminStorageEndpointsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Storageエンドポイント情報の削除
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminStorageEndpointsIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2AdminStorageEndpointsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定されたIDのStorageエンドポイント情報を取得。
         * @param {number} id StorageエンドポイントID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminStorageEndpointsIdGet(id: number, options?: any): AxiosPromise<NssolPlatypusApiModelsStorageApiModelsDetailsOutputModel> {
            return localVarFp.apiV2AdminStorageEndpointsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Storageエンドポイント情報の編集
         * @param {number} id 
         * @param {NssolPlatypusApiModelsStorageApiModelsCreateInputModel} [nssolPlatypusApiModelsStorageApiModelsCreateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminStorageEndpointsIdPut(id: number, nssolPlatypusApiModelsStorageApiModelsCreateInputModel?: NssolPlatypusApiModelsStorageApiModelsCreateInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsStorageApiModelsIndexOutputModel> {
            return localVarFp.apiV2AdminStorageEndpointsIdPut(id, nssolPlatypusApiModelsStorageApiModelsCreateInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新規にStorageエンドポイントを登録する
         * @param {NssolPlatypusApiModelsStorageApiModelsCreateInputModel} [nssolPlatypusApiModelsStorageApiModelsCreateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminStorageEndpointsPost(nssolPlatypusApiModelsStorageApiModelsCreateInputModel?: NssolPlatypusApiModelsStorageApiModelsCreateInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsStorageApiModelsIndexOutputModel> {
            return localVarFp.apiV2AdminStorageEndpointsPost(nssolPlatypusApiModelsStorageApiModelsCreateInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ダウンロード用の一時署名URLを取得する
         * @param {string} [type] リソース種別
         * @param {string} [storedPath] 保存先パス
         * @param {string} [fileName] ダウンロード時に書き換えるファイル名
         * @param {boolean} [secure] HTTPS化するか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DownloadUrlGet(type?: string, storedPath?: string, fileName?: string, secure?: boolean, options?: any): AxiosPromise<string> {
            return localVarFp.apiV2DownloadUrlGet(type, storedPath, fileName, secure, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 分割アップロードの処理を完了する
         * @param {NssolPlatypusLogicModelsStorageLogicModelsCompleteMultiplePartUploadInputModel} [nssolPlatypusLogicModelsStorageLogicModelsCompleteMultiplePartUploadInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UploadCompletePost(nssolPlatypusLogicModelsStorageLogicModelsCompleteMultiplePartUploadInputModel?: NssolPlatypusLogicModelsStorageLogicModelsCompleteMultiplePartUploadInputModel, options?: any): AxiosPromise<NssolPlatypusLogicModelsStorageLogicModelsCompleteMultiplePartUploadInputModel> {
            return localVarFp.apiV2UploadCompletePost(nssolPlatypusLogicModelsStorageLogicModelsCompleteMultiplePartUploadInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 分割アップロードを行うためのパラメータを取得する
         * @param {string} fileName ファイル名
         * @param {number} partSum 分割数
         * @param {string} type リソース名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UploadParameterGet(fileName: string, partSum: number, type: string, options?: any): AxiosPromise<NssolPlatypusLogicModelsStorageLogicModelsMultiPartUploadModel> {
            return localVarFp.apiV2UploadParameterGet(fileName, partSum, type, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV2AdminStorageEndpointsIdDelete operation in StorageApi.
 * @export
 * @interface StorageApiApiV2AdminStorageEndpointsIdDeleteRequest
 */
export interface StorageApiApiV2AdminStorageEndpointsIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof StorageApiApiV2AdminStorageEndpointsIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiV2AdminStorageEndpointsIdGet operation in StorageApi.
 * @export
 * @interface StorageApiApiV2AdminStorageEndpointsIdGetRequest
 */
export interface StorageApiApiV2AdminStorageEndpointsIdGetRequest {
    /**
     * StorageエンドポイントID
     * @type {number}
     * @memberof StorageApiApiV2AdminStorageEndpointsIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV2AdminStorageEndpointsIdPut operation in StorageApi.
 * @export
 * @interface StorageApiApiV2AdminStorageEndpointsIdPutRequest
 */
export interface StorageApiApiV2AdminStorageEndpointsIdPutRequest {
    /**
     * 
     * @type {number}
     * @memberof StorageApiApiV2AdminStorageEndpointsIdPut
     */
    readonly id: number

    /**
     * 
     * @type {NssolPlatypusApiModelsStorageApiModelsCreateInputModel}
     * @memberof StorageApiApiV2AdminStorageEndpointsIdPut
     */
    readonly nssolPlatypusApiModelsStorageApiModelsCreateInputModel?: NssolPlatypusApiModelsStorageApiModelsCreateInputModel
}

/**
 * Request parameters for apiV2AdminStorageEndpointsPost operation in StorageApi.
 * @export
 * @interface StorageApiApiV2AdminStorageEndpointsPostRequest
 */
export interface StorageApiApiV2AdminStorageEndpointsPostRequest {
    /**
     * 
     * @type {NssolPlatypusApiModelsStorageApiModelsCreateInputModel}
     * @memberof StorageApiApiV2AdminStorageEndpointsPost
     */
    readonly nssolPlatypusApiModelsStorageApiModelsCreateInputModel?: NssolPlatypusApiModelsStorageApiModelsCreateInputModel
}

/**
 * Request parameters for apiV2DownloadUrlGet operation in StorageApi.
 * @export
 * @interface StorageApiApiV2DownloadUrlGetRequest
 */
export interface StorageApiApiV2DownloadUrlGetRequest {
    /**
     * リソース種別
     * @type {string}
     * @memberof StorageApiApiV2DownloadUrlGet
     */
    readonly type?: string

    /**
     * 保存先パス
     * @type {string}
     * @memberof StorageApiApiV2DownloadUrlGet
     */
    readonly storedPath?: string

    /**
     * ダウンロード時に書き換えるファイル名
     * @type {string}
     * @memberof StorageApiApiV2DownloadUrlGet
     */
    readonly fileName?: string

    /**
     * HTTPS化するか
     * @type {boolean}
     * @memberof StorageApiApiV2DownloadUrlGet
     */
    readonly secure?: boolean
}

/**
 * Request parameters for apiV2UploadCompletePost operation in StorageApi.
 * @export
 * @interface StorageApiApiV2UploadCompletePostRequest
 */
export interface StorageApiApiV2UploadCompletePostRequest {
    /**
     * 
     * @type {NssolPlatypusLogicModelsStorageLogicModelsCompleteMultiplePartUploadInputModel}
     * @memberof StorageApiApiV2UploadCompletePost
     */
    readonly nssolPlatypusLogicModelsStorageLogicModelsCompleteMultiplePartUploadInputModel?: NssolPlatypusLogicModelsStorageLogicModelsCompleteMultiplePartUploadInputModel
}

/**
 * Request parameters for apiV2UploadParameterGet operation in StorageApi.
 * @export
 * @interface StorageApiApiV2UploadParameterGetRequest
 */
export interface StorageApiApiV2UploadParameterGetRequest {
    /**
     * ファイル名
     * @type {string}
     * @memberof StorageApiApiV2UploadParameterGet
     */
    readonly fileName: string

    /**
     * 分割数
     * @type {number}
     * @memberof StorageApiApiV2UploadParameterGet
     */
    readonly partSum: number

    /**
     * リソース名
     * @type {string}
     * @memberof StorageApiApiV2UploadParameterGet
     */
    readonly type: string
}

/**
 * StorageApi - object-oriented interface
 * @export
 * @class StorageApi
 * @extends {BaseAPI}
 */
export class StorageApi extends BaseAPI {
    /**
     * 
     * @summary 登録済みのStorageエンドポイント一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApi
     */
    public apiV2AdminStorageEndpointsGet(options?: AxiosRequestConfig) {
        return StorageApiFp(this.configuration).apiV2AdminStorageEndpointsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Storageエンドポイント情報の削除
     * @param {StorageApiApiV2AdminStorageEndpointsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApi
     */
    public apiV2AdminStorageEndpointsIdDelete(requestParameters: StorageApiApiV2AdminStorageEndpointsIdDeleteRequest, options?: AxiosRequestConfig) {
        return StorageApiFp(this.configuration).apiV2AdminStorageEndpointsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定されたIDのStorageエンドポイント情報を取得。
     * @param {StorageApiApiV2AdminStorageEndpointsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApi
     */
    public apiV2AdminStorageEndpointsIdGet(requestParameters: StorageApiApiV2AdminStorageEndpointsIdGetRequest, options?: AxiosRequestConfig) {
        return StorageApiFp(this.configuration).apiV2AdminStorageEndpointsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Storageエンドポイント情報の編集
     * @param {StorageApiApiV2AdminStorageEndpointsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApi
     */
    public apiV2AdminStorageEndpointsIdPut(requestParameters: StorageApiApiV2AdminStorageEndpointsIdPutRequest, options?: AxiosRequestConfig) {
        return StorageApiFp(this.configuration).apiV2AdminStorageEndpointsIdPut(requestParameters.id, requestParameters.nssolPlatypusApiModelsStorageApiModelsCreateInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新規にStorageエンドポイントを登録する
     * @param {StorageApiApiV2AdminStorageEndpointsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApi
     */
    public apiV2AdminStorageEndpointsPost(requestParameters: StorageApiApiV2AdminStorageEndpointsPostRequest = {}, options?: AxiosRequestConfig) {
        return StorageApiFp(this.configuration).apiV2AdminStorageEndpointsPost(requestParameters.nssolPlatypusApiModelsStorageApiModelsCreateInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ダウンロード用の一時署名URLを取得する
     * @param {StorageApiApiV2DownloadUrlGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApi
     */
    public apiV2DownloadUrlGet(requestParameters: StorageApiApiV2DownloadUrlGetRequest = {}, options?: AxiosRequestConfig) {
        return StorageApiFp(this.configuration).apiV2DownloadUrlGet(requestParameters.type, requestParameters.storedPath, requestParameters.fileName, requestParameters.secure, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 分割アップロードの処理を完了する
     * @param {StorageApiApiV2UploadCompletePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApi
     */
    public apiV2UploadCompletePost(requestParameters: StorageApiApiV2UploadCompletePostRequest = {}, options?: AxiosRequestConfig) {
        return StorageApiFp(this.configuration).apiV2UploadCompletePost(requestParameters.nssolPlatypusLogicModelsStorageLogicModelsCompleteMultiplePartUploadInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 分割アップロードを行うためのパラメータを取得する
     * @param {StorageApiApiV2UploadParameterGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApi
     */
    public apiV2UploadParameterGet(requestParameters: StorageApiApiV2UploadParameterGetRequest, options?: AxiosRequestConfig) {
        return StorageApiFp(this.configuration).apiV2UploadParameterGet(requestParameters.fileName, requestParameters.partSum, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TemplateApi - axios parameter creator
 * @export
 */
export const TemplateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary テンプレートを削除する
         * @param {number} id テンプレートID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTemplatesIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminTemplatesIdDelete', 'id', id)
            const localVarPath = `/api/v2/admin/templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary テンプレートを取得する
         * @param {number} id テンプレートID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTemplatesIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminTemplatesIdGet', 'id', id)
            const localVarPath = `/api/v2/admin/templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary テンプレートを編集する
         * @param {number} id テンプレートID
         * @param {NssolPlatypusApiModelsTemplateApiModelsEditInputModel} [nssolPlatypusApiModelsTemplateApiModelsEditInputModel] 編集内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTemplatesIdPut: async (id: number, nssolPlatypusApiModelsTemplateApiModelsEditInputModel?: NssolPlatypusApiModelsTemplateApiModelsEditInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminTemplatesIdPut', 'id', id)
            const localVarPath = `/api/v2/admin/templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsTemplateApiModelsEditInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary テンプレートバージョン一覧を取得する
         * @param {number} id テンプレートID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTemplatesIdVersionsGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminTemplatesIdVersionsGet', 'id', id)
            const localVarPath = `/api/v2/admin/templates/{id}/versions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary テンプレートバージョンを作成する
         * @param {number} id テンプレートID
         * @param {NssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel} [nssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel] 作成内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTemplatesIdVersionsPost: async (id: number, nssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel?: NssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminTemplatesIdVersionsPost', 'id', id)
            const localVarPath = `/api/v2/admin/templates/{id}/versions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary テンプレートバージョンを削除する
         * @param {number} id テンプレートID
         * @param {number} versionId テンプレートバージョンID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTemplatesIdVersionsVersionIdDelete: async (id: number, versionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminTemplatesIdVersionsVersionIdDelete', 'id', id)
            // verify required parameter 'versionId' is not null or undefined
            assertParamExists('apiV2AdminTemplatesIdVersionsVersionIdDelete', 'versionId', versionId)
            const localVarPath = `/api/v2/admin/templates/{id}/versions/{versionId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"versionId"}}`, encodeURIComponent(String(versionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary テンプレートバージョンを取得する
         * @param {number} id テンプレートID
         * @param {number} versionId テンプレートバージョンID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTemplatesIdVersionsVersionIdGet: async (id: number, versionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminTemplatesIdVersionsVersionIdGet', 'id', id)
            // verify required parameter 'versionId' is not null or undefined
            assertParamExists('apiV2AdminTemplatesIdVersionsVersionIdGet', 'versionId', versionId)
            const localVarPath = `/api/v2/admin/templates/{id}/versions/{versionId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"versionId"}}`, encodeURIComponent(String(versionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary テンプレートを作成する
         * @param {NssolPlatypusApiModelsTemplateApiModelsCreateInputModel} [nssolPlatypusApiModelsTemplateApiModelsCreateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTemplatesPost: async (nssolPlatypusApiModelsTemplateApiModelsCreateInputModel?: NssolPlatypusApiModelsTemplateApiModelsCreateInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsTemplateApiModelsCreateInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 接続中のテナントで作成されたテンプレート一覧を取得する
         * @param {boolean} [withTotal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TemplatesGet: async (withTotal?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (withTotal !== undefined) {
                localVarQueryParameter['withTotal'] = withTotal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 接続中のテナントに有効なテンプレート一覧を取得する
         * @param {boolean} [withTotal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantTemplatesGet: async (withTotal?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/tenant/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (withTotal !== undefined) {
                localVarQueryParameter['withTotal'] = withTotal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TemplateApi - functional programming interface
 * @export
 */
export const TemplateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TemplateApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary テンプレートを削除する
         * @param {number} id テンプレートID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminTemplatesIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminTemplatesIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary テンプレートを取得する
         * @param {number} id テンプレートID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminTemplatesIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsTemplateApiModelsIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminTemplatesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary テンプレートを編集する
         * @param {number} id テンプレートID
         * @param {NssolPlatypusApiModelsTemplateApiModelsEditInputModel} [nssolPlatypusApiModelsTemplateApiModelsEditInputModel] 編集内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminTemplatesIdPut(id: number, nssolPlatypusApiModelsTemplateApiModelsEditInputModel?: NssolPlatypusApiModelsTemplateApiModelsEditInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsTemplateApiModelsIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminTemplatesIdPut(id, nssolPlatypusApiModelsTemplateApiModelsEditInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary テンプレートバージョン一覧を取得する
         * @param {number} id テンプレートID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminTemplatesIdVersionsGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsTemplateApiModelsVersionIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminTemplatesIdVersionsGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary テンプレートバージョンを作成する
         * @param {number} id テンプレートID
         * @param {NssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel} [nssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel] 作成内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminTemplatesIdVersionsPost(id: number, nssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel?: NssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsTemplateApiModelsVersionIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminTemplatesIdVersionsPost(id, nssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary テンプレートバージョンを削除する
         * @param {number} id テンプレートID
         * @param {number} versionId テンプレートバージョンID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminTemplatesIdVersionsVersionIdDelete(id: number, versionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminTemplatesIdVersionsVersionIdDelete(id, versionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary テンプレートバージョンを取得する
         * @param {number} id テンプレートID
         * @param {number} versionId テンプレートバージョンID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminTemplatesIdVersionsVersionIdGet(id: number, versionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsTemplateApiModelsVersionDetailsOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminTemplatesIdVersionsVersionIdGet(id, versionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary テンプレートを作成する
         * @param {NssolPlatypusApiModelsTemplateApiModelsCreateInputModel} [nssolPlatypusApiModelsTemplateApiModelsCreateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminTemplatesPost(nssolPlatypusApiModelsTemplateApiModelsCreateInputModel?: NssolPlatypusApiModelsTemplateApiModelsCreateInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsTemplateApiModelsIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminTemplatesPost(nssolPlatypusApiModelsTemplateApiModelsCreateInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 接続中のテナントで作成されたテンプレート一覧を取得する
         * @param {boolean} [withTotal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TemplatesGet(withTotal?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsTemplateApiModelsIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TemplatesGet(withTotal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 接続中のテナントに有効なテンプレート一覧を取得する
         * @param {boolean} [withTotal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TenantTemplatesGet(withTotal?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsTemplateApiModelsIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TenantTemplatesGet(withTotal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TemplateApi - factory interface
 * @export
 */
export const TemplateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TemplateApiFp(configuration)
    return {
        /**
         * 
         * @summary テンプレートを削除する
         * @param {number} id テンプレートID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTemplatesIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2AdminTemplatesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary テンプレートを取得する
         * @param {number} id テンプレートID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTemplatesIdGet(id: number, options?: any): AxiosPromise<NssolPlatypusApiModelsTemplateApiModelsIndexOutputModel> {
            return localVarFp.apiV2AdminTemplatesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary テンプレートを編集する
         * @param {number} id テンプレートID
         * @param {NssolPlatypusApiModelsTemplateApiModelsEditInputModel} [nssolPlatypusApiModelsTemplateApiModelsEditInputModel] 編集内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTemplatesIdPut(id: number, nssolPlatypusApiModelsTemplateApiModelsEditInputModel?: NssolPlatypusApiModelsTemplateApiModelsEditInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsTemplateApiModelsIndexOutputModel> {
            return localVarFp.apiV2AdminTemplatesIdPut(id, nssolPlatypusApiModelsTemplateApiModelsEditInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary テンプレートバージョン一覧を取得する
         * @param {number} id テンプレートID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTemplatesIdVersionsGet(id: number, options?: any): AxiosPromise<Array<NssolPlatypusApiModelsTemplateApiModelsVersionIndexOutputModel>> {
            return localVarFp.apiV2AdminTemplatesIdVersionsGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary テンプレートバージョンを作成する
         * @param {number} id テンプレートID
         * @param {NssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel} [nssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel] 作成内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTemplatesIdVersionsPost(id: number, nssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel?: NssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsTemplateApiModelsVersionIndexOutputModel> {
            return localVarFp.apiV2AdminTemplatesIdVersionsPost(id, nssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary テンプレートバージョンを削除する
         * @param {number} id テンプレートID
         * @param {number} versionId テンプレートバージョンID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTemplatesIdVersionsVersionIdDelete(id: number, versionId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2AdminTemplatesIdVersionsVersionIdDelete(id, versionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary テンプレートバージョンを取得する
         * @param {number} id テンプレートID
         * @param {number} versionId テンプレートバージョンID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTemplatesIdVersionsVersionIdGet(id: number, versionId: number, options?: any): AxiosPromise<NssolPlatypusApiModelsTemplateApiModelsVersionDetailsOutputModel> {
            return localVarFp.apiV2AdminTemplatesIdVersionsVersionIdGet(id, versionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary テンプレートを作成する
         * @param {NssolPlatypusApiModelsTemplateApiModelsCreateInputModel} [nssolPlatypusApiModelsTemplateApiModelsCreateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTemplatesPost(nssolPlatypusApiModelsTemplateApiModelsCreateInputModel?: NssolPlatypusApiModelsTemplateApiModelsCreateInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsTemplateApiModelsIndexOutputModel> {
            return localVarFp.apiV2AdminTemplatesPost(nssolPlatypusApiModelsTemplateApiModelsCreateInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 接続中のテナントで作成されたテンプレート一覧を取得する
         * @param {boolean} [withTotal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TemplatesGet(withTotal?: boolean, options?: any): AxiosPromise<Array<NssolPlatypusApiModelsTemplateApiModelsIndexOutputModel>> {
            return localVarFp.apiV2TemplatesGet(withTotal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 接続中のテナントに有効なテンプレート一覧を取得する
         * @param {boolean} [withTotal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantTemplatesGet(withTotal?: boolean, options?: any): AxiosPromise<Array<NssolPlatypusApiModelsTemplateApiModelsIndexOutputModel>> {
            return localVarFp.apiV2TenantTemplatesGet(withTotal, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV2AdminTemplatesIdDelete operation in TemplateApi.
 * @export
 * @interface TemplateApiApiV2AdminTemplatesIdDeleteRequest
 */
export interface TemplateApiApiV2AdminTemplatesIdDeleteRequest {
    /**
     * テンプレートID
     * @type {number}
     * @memberof TemplateApiApiV2AdminTemplatesIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiV2AdminTemplatesIdGet operation in TemplateApi.
 * @export
 * @interface TemplateApiApiV2AdminTemplatesIdGetRequest
 */
export interface TemplateApiApiV2AdminTemplatesIdGetRequest {
    /**
     * テンプレートID
     * @type {number}
     * @memberof TemplateApiApiV2AdminTemplatesIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV2AdminTemplatesIdPut operation in TemplateApi.
 * @export
 * @interface TemplateApiApiV2AdminTemplatesIdPutRequest
 */
export interface TemplateApiApiV2AdminTemplatesIdPutRequest {
    /**
     * テンプレートID
     * @type {number}
     * @memberof TemplateApiApiV2AdminTemplatesIdPut
     */
    readonly id: number

    /**
     * 編集内容
     * @type {NssolPlatypusApiModelsTemplateApiModelsEditInputModel}
     * @memberof TemplateApiApiV2AdminTemplatesIdPut
     */
    readonly nssolPlatypusApiModelsTemplateApiModelsEditInputModel?: NssolPlatypusApiModelsTemplateApiModelsEditInputModel
}

/**
 * Request parameters for apiV2AdminTemplatesIdVersionsGet operation in TemplateApi.
 * @export
 * @interface TemplateApiApiV2AdminTemplatesIdVersionsGetRequest
 */
export interface TemplateApiApiV2AdminTemplatesIdVersionsGetRequest {
    /**
     * テンプレートID
     * @type {number}
     * @memberof TemplateApiApiV2AdminTemplatesIdVersionsGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV2AdminTemplatesIdVersionsPost operation in TemplateApi.
 * @export
 * @interface TemplateApiApiV2AdminTemplatesIdVersionsPostRequest
 */
export interface TemplateApiApiV2AdminTemplatesIdVersionsPostRequest {
    /**
     * テンプレートID
     * @type {number}
     * @memberof TemplateApiApiV2AdminTemplatesIdVersionsPost
     */
    readonly id: number

    /**
     * 作成内容
     * @type {NssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel}
     * @memberof TemplateApiApiV2AdminTemplatesIdVersionsPost
     */
    readonly nssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel?: NssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel
}

/**
 * Request parameters for apiV2AdminTemplatesIdVersionsVersionIdDelete operation in TemplateApi.
 * @export
 * @interface TemplateApiApiV2AdminTemplatesIdVersionsVersionIdDeleteRequest
 */
export interface TemplateApiApiV2AdminTemplatesIdVersionsVersionIdDeleteRequest {
    /**
     * テンプレートID
     * @type {number}
     * @memberof TemplateApiApiV2AdminTemplatesIdVersionsVersionIdDelete
     */
    readonly id: number

    /**
     * テンプレートバージョンID
     * @type {number}
     * @memberof TemplateApiApiV2AdminTemplatesIdVersionsVersionIdDelete
     */
    readonly versionId: number
}

/**
 * Request parameters for apiV2AdminTemplatesIdVersionsVersionIdGet operation in TemplateApi.
 * @export
 * @interface TemplateApiApiV2AdminTemplatesIdVersionsVersionIdGetRequest
 */
export interface TemplateApiApiV2AdminTemplatesIdVersionsVersionIdGetRequest {
    /**
     * テンプレートID
     * @type {number}
     * @memberof TemplateApiApiV2AdminTemplatesIdVersionsVersionIdGet
     */
    readonly id: number

    /**
     * テンプレートバージョンID
     * @type {number}
     * @memberof TemplateApiApiV2AdminTemplatesIdVersionsVersionIdGet
     */
    readonly versionId: number
}

/**
 * Request parameters for apiV2AdminTemplatesPost operation in TemplateApi.
 * @export
 * @interface TemplateApiApiV2AdminTemplatesPostRequest
 */
export interface TemplateApiApiV2AdminTemplatesPostRequest {
    /**
     * 
     * @type {NssolPlatypusApiModelsTemplateApiModelsCreateInputModel}
     * @memberof TemplateApiApiV2AdminTemplatesPost
     */
    readonly nssolPlatypusApiModelsTemplateApiModelsCreateInputModel?: NssolPlatypusApiModelsTemplateApiModelsCreateInputModel
}

/**
 * Request parameters for apiV2TemplatesGet operation in TemplateApi.
 * @export
 * @interface TemplateApiApiV2TemplatesGetRequest
 */
export interface TemplateApiApiV2TemplatesGetRequest {
    /**
     * 
     * @type {boolean}
     * @memberof TemplateApiApiV2TemplatesGet
     */
    readonly withTotal?: boolean
}

/**
 * Request parameters for apiV2TenantTemplatesGet operation in TemplateApi.
 * @export
 * @interface TemplateApiApiV2TenantTemplatesGetRequest
 */
export interface TemplateApiApiV2TenantTemplatesGetRequest {
    /**
     * 
     * @type {boolean}
     * @memberof TemplateApiApiV2TenantTemplatesGet
     */
    readonly withTotal?: boolean
}

/**
 * TemplateApi - object-oriented interface
 * @export
 * @class TemplateApi
 * @extends {BaseAPI}
 */
export class TemplateApi extends BaseAPI {
    /**
     * 
     * @summary テンプレートを削除する
     * @param {TemplateApiApiV2AdminTemplatesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public apiV2AdminTemplatesIdDelete(requestParameters: TemplateApiApiV2AdminTemplatesIdDeleteRequest, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).apiV2AdminTemplatesIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary テンプレートを取得する
     * @param {TemplateApiApiV2AdminTemplatesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public apiV2AdminTemplatesIdGet(requestParameters: TemplateApiApiV2AdminTemplatesIdGetRequest, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).apiV2AdminTemplatesIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary テンプレートを編集する
     * @param {TemplateApiApiV2AdminTemplatesIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public apiV2AdminTemplatesIdPut(requestParameters: TemplateApiApiV2AdminTemplatesIdPutRequest, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).apiV2AdminTemplatesIdPut(requestParameters.id, requestParameters.nssolPlatypusApiModelsTemplateApiModelsEditInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary テンプレートバージョン一覧を取得する
     * @param {TemplateApiApiV2AdminTemplatesIdVersionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public apiV2AdminTemplatesIdVersionsGet(requestParameters: TemplateApiApiV2AdminTemplatesIdVersionsGetRequest, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).apiV2AdminTemplatesIdVersionsGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary テンプレートバージョンを作成する
     * @param {TemplateApiApiV2AdminTemplatesIdVersionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public apiV2AdminTemplatesIdVersionsPost(requestParameters: TemplateApiApiV2AdminTemplatesIdVersionsPostRequest, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).apiV2AdminTemplatesIdVersionsPost(requestParameters.id, requestParameters.nssolPlatypusApiModelsTemplateApiModelsVersionCreateInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary テンプレートバージョンを削除する
     * @param {TemplateApiApiV2AdminTemplatesIdVersionsVersionIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public apiV2AdminTemplatesIdVersionsVersionIdDelete(requestParameters: TemplateApiApiV2AdminTemplatesIdVersionsVersionIdDeleteRequest, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).apiV2AdminTemplatesIdVersionsVersionIdDelete(requestParameters.id, requestParameters.versionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary テンプレートバージョンを取得する
     * @param {TemplateApiApiV2AdminTemplatesIdVersionsVersionIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public apiV2AdminTemplatesIdVersionsVersionIdGet(requestParameters: TemplateApiApiV2AdminTemplatesIdVersionsVersionIdGetRequest, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).apiV2AdminTemplatesIdVersionsVersionIdGet(requestParameters.id, requestParameters.versionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary テンプレートを作成する
     * @param {TemplateApiApiV2AdminTemplatesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public apiV2AdminTemplatesPost(requestParameters: TemplateApiApiV2AdminTemplatesPostRequest = {}, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).apiV2AdminTemplatesPost(requestParameters.nssolPlatypusApiModelsTemplateApiModelsCreateInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 接続中のテナントで作成されたテンプレート一覧を取得する
     * @param {TemplateApiApiV2TemplatesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public apiV2TemplatesGet(requestParameters: TemplateApiApiV2TemplatesGetRequest = {}, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).apiV2TemplatesGet(requestParameters.withTotal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 接続中のテナントに有効なテンプレート一覧を取得する
     * @param {TemplateApiApiV2TenantTemplatesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public apiV2TenantTemplatesGet(requestParameters: TemplateApiApiV2TenantTemplatesGetRequest = {}, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).apiV2TenantTemplatesGet(requestParameters.withTotal, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TenantApi - axios parameter creator
 * @export
 */
export const TenantApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary テナント一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTenantsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary テナントを削除する。(他のユーザが未ログイン状態の時間帯で実施するのが望ましい)
         * @param {number} id テナントID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTenantsIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminTenantsIdDelete', 'id', id)
            const localVarPath = `/api/v2/admin/tenants/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定されたIDのテナント情報を取得。
         * @param {number} id テナントID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTenantsIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminTenantsIdGet', 'id', id)
            const localVarPath = `/api/v2/admin/tenants/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary テナント情報の編集
         * @param {number} id テナントID
         * @param {NssolPlatypusApiModelsTenantApiModelsEditInputModel} [nssolPlatypusApiModelsTenantApiModelsEditInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTenantsIdPut: async (id: number, nssolPlatypusApiModelsTenantApiModelsEditInputModel?: NssolPlatypusApiModelsTenantApiModelsEditInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminTenantsIdPut', 'id', id)
            const localVarPath = `/api/v2/admin/tenants/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsTenantApiModelsEditInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新規にテナントを登録する
         * @param {NssolPlatypusApiModelsTenantApiModelsCreateInputModel} [nssolPlatypusApiModelsTenantApiModelsCreateInputModel] 登録内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTenantsPost: async (nssolPlatypusApiModelsTenantApiModelsCreateInputModel?: NssolPlatypusApiModelsTenantApiModelsCreateInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsTenantApiModelsCreateInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 接続中のテナントの情報を取得。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/tenant`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 接続中のテナントの情報の編集
         * @param {NssolPlatypusApiModelsTenantApiModelsEditInputModel} [nssolPlatypusApiModelsTenantApiModelsEditInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantPut: async (nssolPlatypusApiModelsTenantApiModelsEditInputModel?: NssolPlatypusApiModelsTenantApiModelsEditInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/tenant`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsTenantApiModelsEditInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TenantApi - functional programming interface
 * @export
 */
export const TenantApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TenantApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary テナント一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminTenantsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsTenantApiModelsIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminTenantsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary テナントを削除する。(他のユーザが未ログイン状態の時間帯で実施するのが望ましい)
         * @param {number} id テナントID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminTenantsIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsTenantApiModelsDeleteOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminTenantsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定されたIDのテナント情報を取得。
         * @param {number} id テナントID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminTenantsIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsTenantApiModelsDetailsOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminTenantsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary テナント情報の編集
         * @param {number} id テナントID
         * @param {NssolPlatypusApiModelsTenantApiModelsEditInputModel} [nssolPlatypusApiModelsTenantApiModelsEditInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminTenantsIdPut(id: number, nssolPlatypusApiModelsTenantApiModelsEditInputModel?: NssolPlatypusApiModelsTenantApiModelsEditInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsTenantApiModelsIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminTenantsIdPut(id, nssolPlatypusApiModelsTenantApiModelsEditInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新規にテナントを登録する
         * @param {NssolPlatypusApiModelsTenantApiModelsCreateInputModel} [nssolPlatypusApiModelsTenantApiModelsCreateInputModel] 登録内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminTenantsPost(nssolPlatypusApiModelsTenantApiModelsCreateInputModel?: NssolPlatypusApiModelsTenantApiModelsCreateInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsTenantApiModelsIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminTenantsPost(nssolPlatypusApiModelsTenantApiModelsCreateInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 接続中のテナントの情報を取得。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TenantGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsTenantApiModelsDetailsOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TenantGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 接続中のテナントの情報の編集
         * @param {NssolPlatypusApiModelsTenantApiModelsEditInputModel} [nssolPlatypusApiModelsTenantApiModelsEditInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TenantPut(nssolPlatypusApiModelsTenantApiModelsEditInputModel?: NssolPlatypusApiModelsTenantApiModelsEditInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsTenantApiModelsIndexOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TenantPut(nssolPlatypusApiModelsTenantApiModelsEditInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TenantApi - factory interface
 * @export
 */
export const TenantApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TenantApiFp(configuration)
    return {
        /**
         * 
         * @summary テナント一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTenantsGet(options?: any): AxiosPromise<Array<NssolPlatypusApiModelsTenantApiModelsIndexOutputModel>> {
            return localVarFp.apiV2AdminTenantsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary テナントを削除する。(他のユーザが未ログイン状態の時間帯で実施するのが望ましい)
         * @param {number} id テナントID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTenantsIdDelete(id: number, options?: any): AxiosPromise<NssolPlatypusApiModelsTenantApiModelsDeleteOutputModel> {
            return localVarFp.apiV2AdminTenantsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定されたIDのテナント情報を取得。
         * @param {number} id テナントID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTenantsIdGet(id: number, options?: any): AxiosPromise<NssolPlatypusApiModelsTenantApiModelsDetailsOutputModel> {
            return localVarFp.apiV2AdminTenantsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary テナント情報の編集
         * @param {number} id テナントID
         * @param {NssolPlatypusApiModelsTenantApiModelsEditInputModel} [nssolPlatypusApiModelsTenantApiModelsEditInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTenantsIdPut(id: number, nssolPlatypusApiModelsTenantApiModelsEditInputModel?: NssolPlatypusApiModelsTenantApiModelsEditInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsTenantApiModelsIndexOutputModel> {
            return localVarFp.apiV2AdminTenantsIdPut(id, nssolPlatypusApiModelsTenantApiModelsEditInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新規にテナントを登録する
         * @param {NssolPlatypusApiModelsTenantApiModelsCreateInputModel} [nssolPlatypusApiModelsTenantApiModelsCreateInputModel] 登録内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminTenantsPost(nssolPlatypusApiModelsTenantApiModelsCreateInputModel?: NssolPlatypusApiModelsTenantApiModelsCreateInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsTenantApiModelsIndexOutputModel> {
            return localVarFp.apiV2AdminTenantsPost(nssolPlatypusApiModelsTenantApiModelsCreateInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 接続中のテナントの情報を取得。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantGet(options?: any): AxiosPromise<NssolPlatypusApiModelsTenantApiModelsDetailsOutputModel> {
            return localVarFp.apiV2TenantGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 接続中のテナントの情報の編集
         * @param {NssolPlatypusApiModelsTenantApiModelsEditInputModel} [nssolPlatypusApiModelsTenantApiModelsEditInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantPut(nssolPlatypusApiModelsTenantApiModelsEditInputModel?: NssolPlatypusApiModelsTenantApiModelsEditInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsTenantApiModelsIndexOutputModel> {
            return localVarFp.apiV2TenantPut(nssolPlatypusApiModelsTenantApiModelsEditInputModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV2AdminTenantsIdDelete operation in TenantApi.
 * @export
 * @interface TenantApiApiV2AdminTenantsIdDeleteRequest
 */
export interface TenantApiApiV2AdminTenantsIdDeleteRequest {
    /**
     * テナントID
     * @type {number}
     * @memberof TenantApiApiV2AdminTenantsIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiV2AdminTenantsIdGet operation in TenantApi.
 * @export
 * @interface TenantApiApiV2AdminTenantsIdGetRequest
 */
export interface TenantApiApiV2AdminTenantsIdGetRequest {
    /**
     * テナントID
     * @type {number}
     * @memberof TenantApiApiV2AdminTenantsIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV2AdminTenantsIdPut operation in TenantApi.
 * @export
 * @interface TenantApiApiV2AdminTenantsIdPutRequest
 */
export interface TenantApiApiV2AdminTenantsIdPutRequest {
    /**
     * テナントID
     * @type {number}
     * @memberof TenantApiApiV2AdminTenantsIdPut
     */
    readonly id: number

    /**
     * 変更内容
     * @type {NssolPlatypusApiModelsTenantApiModelsEditInputModel}
     * @memberof TenantApiApiV2AdminTenantsIdPut
     */
    readonly nssolPlatypusApiModelsTenantApiModelsEditInputModel?: NssolPlatypusApiModelsTenantApiModelsEditInputModel
}

/**
 * Request parameters for apiV2AdminTenantsPost operation in TenantApi.
 * @export
 * @interface TenantApiApiV2AdminTenantsPostRequest
 */
export interface TenantApiApiV2AdminTenantsPostRequest {
    /**
     * 登録内容
     * @type {NssolPlatypusApiModelsTenantApiModelsCreateInputModel}
     * @memberof TenantApiApiV2AdminTenantsPost
     */
    readonly nssolPlatypusApiModelsTenantApiModelsCreateInputModel?: NssolPlatypusApiModelsTenantApiModelsCreateInputModel
}

/**
 * Request parameters for apiV2TenantPut operation in TenantApi.
 * @export
 * @interface TenantApiApiV2TenantPutRequest
 */
export interface TenantApiApiV2TenantPutRequest {
    /**
     * 変更内容
     * @type {NssolPlatypusApiModelsTenantApiModelsEditInputModel}
     * @memberof TenantApiApiV2TenantPut
     */
    readonly nssolPlatypusApiModelsTenantApiModelsEditInputModel?: NssolPlatypusApiModelsTenantApiModelsEditInputModel
}

/**
 * TenantApi - object-oriented interface
 * @export
 * @class TenantApi
 * @extends {BaseAPI}
 */
export class TenantApi extends BaseAPI {
    /**
     * 
     * @summary テナント一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public apiV2AdminTenantsGet(options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).apiV2AdminTenantsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary テナントを削除する。(他のユーザが未ログイン状態の時間帯で実施するのが望ましい)
     * @param {TenantApiApiV2AdminTenantsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public apiV2AdminTenantsIdDelete(requestParameters: TenantApiApiV2AdminTenantsIdDeleteRequest, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).apiV2AdminTenantsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定されたIDのテナント情報を取得。
     * @param {TenantApiApiV2AdminTenantsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public apiV2AdminTenantsIdGet(requestParameters: TenantApiApiV2AdminTenantsIdGetRequest, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).apiV2AdminTenantsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary テナント情報の編集
     * @param {TenantApiApiV2AdminTenantsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public apiV2AdminTenantsIdPut(requestParameters: TenantApiApiV2AdminTenantsIdPutRequest, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).apiV2AdminTenantsIdPut(requestParameters.id, requestParameters.nssolPlatypusApiModelsTenantApiModelsEditInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新規にテナントを登録する
     * @param {TenantApiApiV2AdminTenantsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public apiV2AdminTenantsPost(requestParameters: TenantApiApiV2AdminTenantsPostRequest = {}, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).apiV2AdminTenantsPost(requestParameters.nssolPlatypusApiModelsTenantApiModelsCreateInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 接続中のテナントの情報を取得。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public apiV2TenantGet(options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).apiV2TenantGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 接続中のテナントの情報の編集
     * @param {TenantApiApiV2TenantPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    public apiV2TenantPut(requestParameters: TenantApiApiV2TenantPutRequest = {}, options?: AxiosRequestConfig) {
        return TenantApiFp(this.configuration).apiV2TenantPut(requestParameters.nssolPlatypusApiModelsTenantApiModelsEditInputModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TrainingApi - axios parameter creator
 * @export
 */
export const TrainingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 指定された条件でページングされた状態で、全学習履歴を取得
         * @param {string} [id] IDの検索条件。  比較文字列＋数値の形式。
         * @param {string} [name] 名前
         * @param {string} [parentId] 親学習ID
         * @param {string} [parentName] 親学習名
         * @param {string} [startedAt] 実行時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
         * @param {string} [startedBy] 実行者
         * @param {string} [dataSet] データセット名
         * @param {string} [memo] メモ
         * @param {string} [status] ステータス
         * @param {string} [entryPoint] 実行コマンド
         * @param {Array<string>} [tag] タグ
         * @param {number} [perPage] 表示件数。指定がない場合は上限(1000件)。
         * @param {number} [page] ページ番号。デフォルトは1。
         * @param {boolean} [withTotal] 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingGet: async (id?: string, name?: string, parentId?: string, parentName?: string, startedAt?: string, startedBy?: string, dataSet?: string, memo?: string, status?: string, entryPoint?: string, tag?: Array<string>, perPage?: number, page?: number, withTotal?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/training`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (parentId !== undefined) {
                localVarQueryParameter['ParentId'] = parentId;
            }

            if (parentName !== undefined) {
                localVarQueryParameter['ParentName'] = parentName;
            }

            if (startedAt !== undefined) {
                localVarQueryParameter['StartedAt'] = startedAt;
            }

            if (startedBy !== undefined) {
                localVarQueryParameter['StartedBy'] = startedBy;
            }

            if (dataSet !== undefined) {
                localVarQueryParameter['DataSet'] = dataSet;
            }

            if (memo !== undefined) {
                localVarQueryParameter['Memo'] = memo;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (entryPoint !== undefined) {
                localVarQueryParameter['EntryPoint'] = entryPoint;
            }

            if (tag) {
                localVarQueryParameter['tag'] = tag;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (withTotal !== undefined) {
                localVarQueryParameter['withTotal'] = withTotal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 学習を正常終了させる。
         * @param {number} id 学習履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdCompletePost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2TrainingIdCompletePost', 'id', id)
            const localVarPath = `/api/v2/training/{id}/complete`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * コンテナの/output/配下から指定ディレクトリパスの直下を検索する  検索対象ディレクトリが見つからない場合もファイル・ディレクトリが空の結果を返す
         * @summary コンテナの出力ファイルの一覧を取得する。
         * @param {number} id 対象の学習履歴ID
         * @param {string} [path] 検索対象ディレクトリ。使用可能文字は「-_1-9a-zA-Z/」
         * @param {boolean} [withUrl] 結果にダウンロード用のURLを含めるか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdContainerFilesGet: async (id: number, path?: string, withUrl?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2TrainingIdContainerFilesGet', 'id', id)
            const localVarPath = `/api/v2/training/{id}/container-files`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            if (withUrl !== undefined) {
                localVarQueryParameter['withUrl'] = withUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 学習履歴を削除する。
         * @param {number} id 学習履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2TrainingIdDelete', 'id', id)
            const localVarPath = `/api/v2/training/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定された学習履歴のエラーイベントを取得します。
         * @param {number} id 学習履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdEventsGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2TrainingIdEventsGet', 'id', id)
            const localVarPath = `/api/v2/training/{id}/events`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 学習履歴添付ファイルを削除する
         * @param {number} id 対象の学習履歴ID
         * @param {number} fileId 削除するファイルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdFilesFileIdDelete: async (id: number, fileId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2TrainingIdFilesFileIdDelete', 'id', id)
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('apiV2TrainingIdFilesFileIdDelete', 'fileId', fileId)
            const localVarPath = `/api/v2/training/{id}/files/{fileId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 学習履歴添付ファイルの一覧を取得する。
         * @param {number} id 対象の学習履歴ID
         * @param {boolean} [withUrl] 結果にダウンロード用のURLを含めるか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdFilesGet: async (id: number, withUrl?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2TrainingIdFilesGet', 'id', id)
            const localVarPath = `/api/v2/training/{id}/files`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (withUrl !== undefined) {
                localVarQueryParameter['withUrl'] = withUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 学習履歴添付ファイルのサイズ(Byte)を取得する
         * @param {number} id 対象の学習履歴ID
         * @param {string} name 対象ファイル名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdFilesNameSizeGet: async (id: number, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2TrainingIdFilesNameSizeGet', 'id', id)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiV2TrainingIdFilesNameSizeGet', 'name', name)
            const localVarPath = `/api/v2/training/{id}/files/{name}/size`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 学習履歴添付ファイルを登録する。
         * @param {number} id 対象の学習履歴ID
         * @param {NssolPlatypusApiModelsComponentsAddFileInputModel} [nssolPlatypusApiModelsComponentsAddFileInputModel] 追加するファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdFilesPost: async (id: number, nssolPlatypusApiModelsComponentsAddFileInputModel?: NssolPlatypusApiModelsComponentsAddFileInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2TrainingIdFilesPost', 'id', id)
            const localVarPath = `/api/v2/training/{id}/files`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsComponentsAddFileInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定されたIDの学習履歴の詳細情報を取得。
         * @param {number} id 学習履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2TrainingIdGet', 'id', id)
            const localVarPath = `/api/v2/training/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 学習を途中で強制終了させる。
         * @param {number} id 学習履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdHaltPost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2TrainingIdHaltPost', 'id', id)
            const localVarPath = `/api/v2/training/{id}/halt`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 学習履歴の編集
         * @param {number} id 変更対象の学習履歴ID
         * @param {NssolPlatypusApiModelsTrainingApiModelsEditInputModel} [nssolPlatypusApiModelsTrainingApiModelsEditInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdPut: async (id: number, nssolPlatypusApiModelsTrainingApiModelsEditInputModel?: NssolPlatypusApiModelsTrainingApiModelsEditInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2TrainingIdPut', 'id', id)
            const localVarPath = `/api/v2/training/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsTrainingApiModelsEditInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定した学習のTensor Boardを削除する
         * @param {number} id 対象の学習履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdTensorboardDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2TrainingIdTensorboardDelete', 'id', id)
            const localVarPath = `/api/v2/training/{id}/tensorboard`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定したTensorBoardコンテナ情報を取得する
         * @param {number} id 対象の学習履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdTensorboardGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2TrainingIdTensorboardGet', 'id', id)
            const localVarPath = `/api/v2/training/{id}/tensorboard`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定した学習のTensor Boardを立てる
         * @param {number} id 対象の学習履歴ID
         * @param {NssolPlatypusApiModelsTrainingApiModelsTensorBoardInputModel} [nssolPlatypusApiModelsTrainingApiModelsTensorBoardInputModel] 起動モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdTensorboardPut: async (id: number, nssolPlatypusApiModelsTrainingApiModelsTensorBoardInputModel?: NssolPlatypusApiModelsTrainingApiModelsTensorBoardInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2TrainingIdTensorboardPut', 'id', id)
            const localVarPath = `/api/v2/training/{id}/tensorboard`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsTrainingApiModelsTensorBoardInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 学習を途中で強制終了させる。  ユーザ自身がジョブを停止させた場合。
         * @param {number} id 学習履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdUserCancelPost: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2TrainingIdUserCancelPost', 'id', id)
            const localVarPath = `/api/v2/training/{id}/user-cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary マウントする学習履歴を取得
         * @param {Array<string>} [status] ステータス
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingMountGet: async (status?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/training/mount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (status) {
                localVarQueryParameter['Status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新規に学習を開始する
         * @param {NssolPlatypusApiModelsTrainingApiModelsCreateInputModel} [nssolPlatypusApiModelsTrainingApiModelsCreateInputModel] 新規学習実行内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingRunPost: async (nssolPlatypusApiModelsTrainingApiModelsCreateInputModel?: NssolPlatypusApiModelsTrainingApiModelsCreateInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/training/run`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsTrainingApiModelsCreateInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 検索時の補完に使用する項目を出力する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingSearchFillGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/training/search/fill`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定された条件でページングされた状態で、全学習履歴を取得。詳細検索で使用。
         * @param {number} [idLower] IDの検索条件。  この数値以上のIDが検索される。
         * @param {number} [idUpper] IDの検索条件。  この数値以下のIDが検索される。
         * @param {string} [name] 名前  複数のワードが含まれる場合は\&quot;,\&quot;区切り
         * @param {boolean} [nameOr] 名前がor検索かand検索か
         * @param {string} [parentName] 親学習名  複数のワードが含まれる場合は\&quot;,\&quot;区切り
         * @param {boolean} [parentNameOr] 親学習名がor検索かand検索か
         * @param {string} [startedAtLower] 実行時刻の検索の期間の開始の条件。日付の形式。  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降が検索される。
         * @param {string} [startedAtUpper] 実行時刻の検索の期間の終了の条件。日付の形式。  \&quot;2018/01/01\&quot; → 2018/01/01 23:59:59 以前が検索される。
         * @param {string} [startedBy] 実行者  複数のワードが含まれる場合は\&quot;,\&quot;区切り
         * @param {boolean} [startedByOr] 実行者の検索がor検索かand検索か
         * @param {string} [dataSet] データセット名  複数のワードが含まれる場合は\&quot;,\&quot;区切り
         * @param {boolean} [dataSetOr] データセット名がor検索かand検索か
         * @param {string} [memo] メモ  複数のワードが含まれる場合は\&quot;,\&quot;区切り
         * @param {boolean} [memoOr] メモがor検索かand検索か
         * @param {string} [status] ステータス  複数のワードが含まれる場合は\&quot;,\&quot;区切り
         * @param {boolean} [statusOr] ステータスがor検索かand検索か
         * @param {string} [entryPoint] 実行コマンド  複数のワードが含まれる場合は\&quot;,\&quot;区切り
         * @param {boolean} [entryPointOr] 実行コマンドがor検索かand検索か
         * @param {string} [tags] タグ  複数のワードが含まれる場合は\&quot;,\&quot;区切り
         * @param {boolean} [tagsOr] タグがor検索かand検索か
         * @param {number} [perPage] 表示件数。指定がない場合は上限(1000件)。
         * @param {number} [page] ページ番号。デフォルトは1。
         * @param {boolean} [withTotal] 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingSearchGet: async (idLower?: number, idUpper?: number, name?: string, nameOr?: boolean, parentName?: string, parentNameOr?: boolean, startedAtLower?: string, startedAtUpper?: string, startedBy?: string, startedByOr?: boolean, dataSet?: string, dataSetOr?: boolean, memo?: string, memoOr?: boolean, status?: string, statusOr?: boolean, entryPoint?: string, entryPointOr?: boolean, tags?: string, tagsOr?: boolean, perPage?: number, page?: number, withTotal?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/training/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (idLower !== undefined) {
                localVarQueryParameter['IdLower'] = idLower;
            }

            if (idUpper !== undefined) {
                localVarQueryParameter['IdUpper'] = idUpper;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (nameOr !== undefined) {
                localVarQueryParameter['NameOr'] = nameOr;
            }

            if (parentName !== undefined) {
                localVarQueryParameter['ParentName'] = parentName;
            }

            if (parentNameOr !== undefined) {
                localVarQueryParameter['ParentNameOr'] = parentNameOr;
            }

            if (startedAtLower !== undefined) {
                localVarQueryParameter['StartedAtLower'] = startedAtLower;
            }

            if (startedAtUpper !== undefined) {
                localVarQueryParameter['StartedAtUpper'] = startedAtUpper;
            }

            if (startedBy !== undefined) {
                localVarQueryParameter['StartedBy'] = startedBy;
            }

            if (startedByOr !== undefined) {
                localVarQueryParameter['StartedByOr'] = startedByOr;
            }

            if (dataSet !== undefined) {
                localVarQueryParameter['DataSet'] = dataSet;
            }

            if (dataSetOr !== undefined) {
                localVarQueryParameter['DataSetOr'] = dataSetOr;
            }

            if (memo !== undefined) {
                localVarQueryParameter['Memo'] = memo;
            }

            if (memoOr !== undefined) {
                localVarQueryParameter['MemoOr'] = memoOr;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (statusOr !== undefined) {
                localVarQueryParameter['StatusOr'] = statusOr;
            }

            if (entryPoint !== undefined) {
                localVarQueryParameter['EntryPoint'] = entryPoint;
            }

            if (entryPointOr !== undefined) {
                localVarQueryParameter['EntryPointOr'] = entryPointOr;
            }

            if (tags !== undefined) {
                localVarQueryParameter['Tags'] = tags;
            }

            if (tagsOr !== undefined) {
                localVarQueryParameter['TagsOr'] = tagsOr;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (withTotal !== undefined) {
                localVarQueryParameter['withTotal'] = withTotal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 検索履歴の一覧を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingSearchHistoryGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/training/search-history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 検索履歴を削除する
         * @param {number} id 削除対象の検索履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingSearchHistoryIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2TrainingSearchHistoryIdDelete', 'id', id)
            const localVarPath = `/api/v2/training/search-history/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 検索履歴を保存する
         * @param {NssolPlatypusApiModelsTrainingApiModelsSearchHistoryInputModel} [nssolPlatypusApiModelsTrainingApiModelsSearchHistoryInputModel] 保存対象の検索履歴入力モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingSearchHistoryPost: async (nssolPlatypusApiModelsTrainingApiModelsSearchHistoryInputModel?: NssolPlatypusApiModelsTrainingApiModelsSearchHistoryInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/training/search-history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsTrainingApiModelsSearchHistoryInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 全学習履歴のIDと名前を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingSimpleGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/training/simple`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定したIdに対応したTagを消去する。
         * @param {NssolPlatypusApiModelsTrainingApiModelsTagsInputModel} [nssolPlatypusApiModelsTrainingApiModelsTagsInputModel] 削除タグの入力モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingTagsDelete: async (nssolPlatypusApiModelsTrainingApiModelsTagsInputModel?: NssolPlatypusApiModelsTrainingApiModelsTagsInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/training/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsTrainingApiModelsTagsInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 選択中のテナントに登録されている学習管理で使用するタグを表示する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingTagsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/training/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定したIdに対応したTagをつける。
         * @param {NssolPlatypusApiModelsTrainingApiModelsTagsInputModel} [nssolPlatypusApiModelsTrainingApiModelsTagsInputModel] 付与タグの入力モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingTagsPost: async (nssolPlatypusApiModelsTrainingApiModelsTagsInputModel?: NssolPlatypusApiModelsTrainingApiModelsTagsInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/training/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsTrainingApiModelsTagsInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrainingApi - functional programming interface
 * @export
 */
export const TrainingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TrainingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 指定された条件でページングされた状態で、全学習履歴を取得
         * @param {string} [id] IDの検索条件。  比較文字列＋数値の形式。
         * @param {string} [name] 名前
         * @param {string} [parentId] 親学習ID
         * @param {string} [parentName] 親学習名
         * @param {string} [startedAt] 実行時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
         * @param {string} [startedBy] 実行者
         * @param {string} [dataSet] データセット名
         * @param {string} [memo] メモ
         * @param {string} [status] ステータス
         * @param {string} [entryPoint] 実行コマンド
         * @param {Array<string>} [tag] タグ
         * @param {number} [perPage] 表示件数。指定がない場合は上限(1000件)。
         * @param {number} [page] ページ番号。デフォルトは1。
         * @param {boolean} [withTotal] 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TrainingGet(id?: string, name?: string, parentId?: string, parentName?: string, startedAt?: string, startedBy?: string, dataSet?: string, memo?: string, status?: string, entryPoint?: string, tag?: Array<string>, perPage?: number, page?: number, withTotal?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TrainingGet(id, name, parentId, parentName, startedAt, startedBy, dataSet, memo, status, entryPoint, tag, perPage, page, withTotal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 学習を正常終了させる。
         * @param {number} id 学習履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TrainingIdCompletePost(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TrainingIdCompletePost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * コンテナの/output/配下から指定ディレクトリパスの直下を検索する  検索対象ディレクトリが見つからない場合もファイル・ディレクトリが空の結果を返す
         * @summary コンテナの出力ファイルの一覧を取得する。
         * @param {number} id 対象の学習履歴ID
         * @param {string} [path] 検索対象ディレクトリ。使用可能文字は「-_1-9a-zA-Z/」
         * @param {boolean} [withUrl] 結果にダウンロード用のURLを含めるか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TrainingIdContainerFilesGet(id: number, path?: string, withUrl?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusInfrastructureStorageListResultInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TrainingIdContainerFilesGet(id, path, withUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 学習履歴を削除する。
         * @param {number} id 学習履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TrainingIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TrainingIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定された学習履歴のエラーイベントを取得します。
         * @param {number} id 学習履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TrainingIdEventsGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusInfrastructureInfosContainerEventInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TrainingIdEventsGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 学習履歴添付ファイルを削除する
         * @param {number} id 対象の学習履歴ID
         * @param {number} fileId 削除するファイルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TrainingIdFilesFileIdDelete(id: number, fileId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TrainingIdFilesFileIdDelete(id, fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 学習履歴添付ファイルの一覧を取得する。
         * @param {number} id 対象の学習履歴ID
         * @param {boolean} [withUrl] 結果にダウンロード用のURLを含めるか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TrainingIdFilesGet(id: number, withUrl?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsTrainingApiModelsAttachedFileOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TrainingIdFilesGet(id, withUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 学習履歴添付ファイルのサイズ(Byte)を取得する
         * @param {number} id 対象の学習履歴ID
         * @param {string} name 対象ファイル名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TrainingIdFilesNameSizeGet(id: number, name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsTrainingApiModelsFileOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TrainingIdFilesNameSizeGet(id, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 学習履歴添付ファイルを登録する。
         * @param {number} id 対象の学習履歴ID
         * @param {NssolPlatypusApiModelsComponentsAddFileInputModel} [nssolPlatypusApiModelsComponentsAddFileInputModel] 追加するファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TrainingIdFilesPost(id: number, nssolPlatypusApiModelsComponentsAddFileInputModel?: NssolPlatypusApiModelsComponentsAddFileInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsTrainingApiModelsAttachedFileOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TrainingIdFilesPost(id, nssolPlatypusApiModelsComponentsAddFileInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定されたIDの学習履歴の詳細情報を取得。
         * @param {number} id 学習履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TrainingIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TrainingIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 学習を途中で強制終了させる。
         * @param {number} id 学習履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TrainingIdHaltPost(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TrainingIdHaltPost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 学習履歴の編集
         * @param {number} id 変更対象の学習履歴ID
         * @param {NssolPlatypusApiModelsTrainingApiModelsEditInputModel} [nssolPlatypusApiModelsTrainingApiModelsEditInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TrainingIdPut(id: number, nssolPlatypusApiModelsTrainingApiModelsEditInputModel?: NssolPlatypusApiModelsTrainingApiModelsEditInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TrainingIdPut(id, nssolPlatypusApiModelsTrainingApiModelsEditInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定した学習のTensor Boardを削除する
         * @param {number} id 対象の学習履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TrainingIdTensorboardDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TrainingIdTensorboardDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定したTensorBoardコンテナ情報を取得する
         * @param {number} id 対象の学習履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TrainingIdTensorboardGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsTrainingApiModelsTensorBoardOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TrainingIdTensorboardGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定した学習のTensor Boardを立てる
         * @param {number} id 対象の学習履歴ID
         * @param {NssolPlatypusApiModelsTrainingApiModelsTensorBoardInputModel} [nssolPlatypusApiModelsTrainingApiModelsTensorBoardInputModel] 起動モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TrainingIdTensorboardPut(id: number, nssolPlatypusApiModelsTrainingApiModelsTensorBoardInputModel?: NssolPlatypusApiModelsTrainingApiModelsTensorBoardInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsTrainingApiModelsTensorBoardOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TrainingIdTensorboardPut(id, nssolPlatypusApiModelsTrainingApiModelsTensorBoardInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 学習を途中で強制終了させる。  ユーザ自身がジョブを停止させた場合。
         * @param {number} id 学習履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TrainingIdUserCancelPost(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TrainingIdUserCancelPost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary マウントする学習履歴を取得
         * @param {Array<string>} [status] ステータス
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TrainingMountGet(status?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TrainingMountGet(status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新規に学習を開始する
         * @param {NssolPlatypusApiModelsTrainingApiModelsCreateInputModel} [nssolPlatypusApiModelsTrainingApiModelsCreateInputModel] 新規学習実行内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TrainingRunPost(nssolPlatypusApiModelsTrainingApiModelsCreateInputModel?: NssolPlatypusApiModelsTrainingApiModelsCreateInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TrainingRunPost(nssolPlatypusApiModelsTrainingApiModelsCreateInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 検索時の補完に使用する項目を出力する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TrainingSearchFillGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsTrainingApiModelsTrainingSearchFillOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TrainingSearchFillGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定された条件でページングされた状態で、全学習履歴を取得。詳細検索で使用。
         * @param {number} [idLower] IDの検索条件。  この数値以上のIDが検索される。
         * @param {number} [idUpper] IDの検索条件。  この数値以下のIDが検索される。
         * @param {string} [name] 名前  複数のワードが含まれる場合は\&quot;,\&quot;区切り
         * @param {boolean} [nameOr] 名前がor検索かand検索か
         * @param {string} [parentName] 親学習名  複数のワードが含まれる場合は\&quot;,\&quot;区切り
         * @param {boolean} [parentNameOr] 親学習名がor検索かand検索か
         * @param {string} [startedAtLower] 実行時刻の検索の期間の開始の条件。日付の形式。  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降が検索される。
         * @param {string} [startedAtUpper] 実行時刻の検索の期間の終了の条件。日付の形式。  \&quot;2018/01/01\&quot; → 2018/01/01 23:59:59 以前が検索される。
         * @param {string} [startedBy] 実行者  複数のワードが含まれる場合は\&quot;,\&quot;区切り
         * @param {boolean} [startedByOr] 実行者の検索がor検索かand検索か
         * @param {string} [dataSet] データセット名  複数のワードが含まれる場合は\&quot;,\&quot;区切り
         * @param {boolean} [dataSetOr] データセット名がor検索かand検索か
         * @param {string} [memo] メモ  複数のワードが含まれる場合は\&quot;,\&quot;区切り
         * @param {boolean} [memoOr] メモがor検索かand検索か
         * @param {string} [status] ステータス  複数のワードが含まれる場合は\&quot;,\&quot;区切り
         * @param {boolean} [statusOr] ステータスがor検索かand検索か
         * @param {string} [entryPoint] 実行コマンド  複数のワードが含まれる場合は\&quot;,\&quot;区切り
         * @param {boolean} [entryPointOr] 実行コマンドがor検索かand検索か
         * @param {string} [tags] タグ  複数のワードが含まれる場合は\&quot;,\&quot;区切り
         * @param {boolean} [tagsOr] タグがor検索かand検索か
         * @param {number} [perPage] 表示件数。指定がない場合は上限(1000件)。
         * @param {number} [page] ページ番号。デフォルトは1。
         * @param {boolean} [withTotal] 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TrainingSearchGet(idLower?: number, idUpper?: number, name?: string, nameOr?: boolean, parentName?: string, parentNameOr?: boolean, startedAtLower?: string, startedAtUpper?: string, startedBy?: string, startedByOr?: boolean, dataSet?: string, dataSetOr?: boolean, memo?: string, memoOr?: boolean, status?: string, statusOr?: boolean, entryPoint?: string, entryPointOr?: boolean, tags?: string, tagsOr?: boolean, perPage?: number, page?: number, withTotal?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TrainingSearchGet(idLower, idUpper, name, nameOr, parentName, parentNameOr, startedAtLower, startedAtUpper, startedBy, startedByOr, dataSet, dataSetOr, memo, memoOr, status, statusOr, entryPoint, entryPointOr, tags, tagsOr, perPage, page, withTotal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 検索履歴の一覧を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TrainingSearchHistoryGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsTrainingApiModelsSearchHistoryOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TrainingSearchHistoryGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 検索履歴を削除する
         * @param {number} id 削除対象の検索履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TrainingSearchHistoryIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TrainingSearchHistoryIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 検索履歴を保存する
         * @param {NssolPlatypusApiModelsTrainingApiModelsSearchHistoryInputModel} [nssolPlatypusApiModelsTrainingApiModelsSearchHistoryInputModel] 保存対象の検索履歴入力モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TrainingSearchHistoryPost(nssolPlatypusApiModelsTrainingApiModelsSearchHistoryInputModel?: NssolPlatypusApiModelsTrainingApiModelsSearchHistoryInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsTrainingApiModelsSearchHistoryOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TrainingSearchHistoryPost(nssolPlatypusApiModelsTrainingApiModelsSearchHistoryInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 全学習履歴のIDと名前を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TrainingSimpleGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TrainingSimpleGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定したIdに対応したTagを消去する。
         * @param {NssolPlatypusApiModelsTrainingApiModelsTagsInputModel} [nssolPlatypusApiModelsTrainingApiModelsTagsInputModel] 削除タグの入力モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TrainingTagsDelete(nssolPlatypusApiModelsTrainingApiModelsTagsInputModel?: NssolPlatypusApiModelsTrainingApiModelsTagsInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TrainingTagsDelete(nssolPlatypusApiModelsTrainingApiModelsTagsInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 選択中のテナントに登録されている学習管理で使用するタグを表示する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TrainingTagsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TrainingTagsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定したIdに対応したTagをつける。
         * @param {NssolPlatypusApiModelsTrainingApiModelsTagsInputModel} [nssolPlatypusApiModelsTrainingApiModelsTagsInputModel] 付与タグの入力モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TrainingTagsPost(nssolPlatypusApiModelsTrainingApiModelsTagsInputModel?: NssolPlatypusApiModelsTrainingApiModelsTagsInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TrainingTagsPost(nssolPlatypusApiModelsTrainingApiModelsTagsInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TrainingApi - factory interface
 * @export
 */
export const TrainingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TrainingApiFp(configuration)
    return {
        /**
         * 
         * @summary 指定された条件でページングされた状態で、全学習履歴を取得
         * @param {string} [id] IDの検索条件。  比較文字列＋数値の形式。
         * @param {string} [name] 名前
         * @param {string} [parentId] 親学習ID
         * @param {string} [parentName] 親学習名
         * @param {string} [startedAt] 実行時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
         * @param {string} [startedBy] 実行者
         * @param {string} [dataSet] データセット名
         * @param {string} [memo] メモ
         * @param {string} [status] ステータス
         * @param {string} [entryPoint] 実行コマンド
         * @param {Array<string>} [tag] タグ
         * @param {number} [perPage] 表示件数。指定がない場合は上限(1000件)。
         * @param {number} [page] ページ番号。デフォルトは1。
         * @param {boolean} [withTotal] 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingGet(id?: string, name?: string, parentId?: string, parentName?: string, startedAt?: string, startedBy?: string, dataSet?: string, memo?: string, status?: string, entryPoint?: string, tag?: Array<string>, perPage?: number, page?: number, withTotal?: boolean, options?: any): AxiosPromise<Array<NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel>> {
            return localVarFp.apiV2TrainingGet(id, name, parentId, parentName, startedAt, startedBy, dataSet, memo, status, entryPoint, tag, perPage, page, withTotal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 学習を正常終了させる。
         * @param {number} id 学習履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdCompletePost(id: number, options?: any): AxiosPromise<NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel> {
            return localVarFp.apiV2TrainingIdCompletePost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * コンテナの/output/配下から指定ディレクトリパスの直下を検索する  検索対象ディレクトリが見つからない場合もファイル・ディレクトリが空の結果を返す
         * @summary コンテナの出力ファイルの一覧を取得する。
         * @param {number} id 対象の学習履歴ID
         * @param {string} [path] 検索対象ディレクトリ。使用可能文字は「-_1-9a-zA-Z/」
         * @param {boolean} [withUrl] 結果にダウンロード用のURLを含めるか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdContainerFilesGet(id: number, path?: string, withUrl?: boolean, options?: any): AxiosPromise<NssolPlatypusInfrastructureStorageListResultInfo> {
            return localVarFp.apiV2TrainingIdContainerFilesGet(id, path, withUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 学習履歴を削除する。
         * @param {number} id 学習履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2TrainingIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定された学習履歴のエラーイベントを取得します。
         * @param {number} id 学習履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdEventsGet(id: number, options?: any): AxiosPromise<NssolPlatypusInfrastructureInfosContainerEventInfo> {
            return localVarFp.apiV2TrainingIdEventsGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 学習履歴添付ファイルを削除する
         * @param {number} id 対象の学習履歴ID
         * @param {number} fileId 削除するファイルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdFilesFileIdDelete(id: number, fileId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2TrainingIdFilesFileIdDelete(id, fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 学習履歴添付ファイルの一覧を取得する。
         * @param {number} id 対象の学習履歴ID
         * @param {boolean} [withUrl] 結果にダウンロード用のURLを含めるか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdFilesGet(id: number, withUrl?: boolean, options?: any): AxiosPromise<Array<NssolPlatypusApiModelsTrainingApiModelsAttachedFileOutputModel>> {
            return localVarFp.apiV2TrainingIdFilesGet(id, withUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 学習履歴添付ファイルのサイズ(Byte)を取得する
         * @param {number} id 対象の学習履歴ID
         * @param {string} name 対象ファイル名
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdFilesNameSizeGet(id: number, name: string, options?: any): AxiosPromise<NssolPlatypusApiModelsTrainingApiModelsFileOutputModel> {
            return localVarFp.apiV2TrainingIdFilesNameSizeGet(id, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 学習履歴添付ファイルを登録する。
         * @param {number} id 対象の学習履歴ID
         * @param {NssolPlatypusApiModelsComponentsAddFileInputModel} [nssolPlatypusApiModelsComponentsAddFileInputModel] 追加するファイル情報
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdFilesPost(id: number, nssolPlatypusApiModelsComponentsAddFileInputModel?: NssolPlatypusApiModelsComponentsAddFileInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsTrainingApiModelsAttachedFileOutputModel> {
            return localVarFp.apiV2TrainingIdFilesPost(id, nssolPlatypusApiModelsComponentsAddFileInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定されたIDの学習履歴の詳細情報を取得。
         * @param {number} id 学習履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdGet(id: number, options?: any): AxiosPromise<NssolPlatypusApiModelsTrainingApiModelsDetailsOutputModel> {
            return localVarFp.apiV2TrainingIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 学習を途中で強制終了させる。
         * @param {number} id 学習履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdHaltPost(id: number, options?: any): AxiosPromise<NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel> {
            return localVarFp.apiV2TrainingIdHaltPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 学習履歴の編集
         * @param {number} id 変更対象の学習履歴ID
         * @param {NssolPlatypusApiModelsTrainingApiModelsEditInputModel} [nssolPlatypusApiModelsTrainingApiModelsEditInputModel] 変更内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdPut(id: number, nssolPlatypusApiModelsTrainingApiModelsEditInputModel?: NssolPlatypusApiModelsTrainingApiModelsEditInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel> {
            return localVarFp.apiV2TrainingIdPut(id, nssolPlatypusApiModelsTrainingApiModelsEditInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定した学習のTensor Boardを削除する
         * @param {number} id 対象の学習履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdTensorboardDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2TrainingIdTensorboardDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定したTensorBoardコンテナ情報を取得する
         * @param {number} id 対象の学習履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdTensorboardGet(id: number, options?: any): AxiosPromise<NssolPlatypusApiModelsTrainingApiModelsTensorBoardOutputModel> {
            return localVarFp.apiV2TrainingIdTensorboardGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定した学習のTensor Boardを立てる
         * @param {number} id 対象の学習履歴ID
         * @param {NssolPlatypusApiModelsTrainingApiModelsTensorBoardInputModel} [nssolPlatypusApiModelsTrainingApiModelsTensorBoardInputModel] 起動モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdTensorboardPut(id: number, nssolPlatypusApiModelsTrainingApiModelsTensorBoardInputModel?: NssolPlatypusApiModelsTrainingApiModelsTensorBoardInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsTrainingApiModelsTensorBoardOutputModel> {
            return localVarFp.apiV2TrainingIdTensorboardPut(id, nssolPlatypusApiModelsTrainingApiModelsTensorBoardInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 学習を途中で強制終了させる。  ユーザ自身がジョブを停止させた場合。
         * @param {number} id 学習履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingIdUserCancelPost(id: number, options?: any): AxiosPromise<NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel> {
            return localVarFp.apiV2TrainingIdUserCancelPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary マウントする学習履歴を取得
         * @param {Array<string>} [status] ステータス
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingMountGet(status?: Array<string>, options?: any): AxiosPromise<Array<NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel>> {
            return localVarFp.apiV2TrainingMountGet(status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新規に学習を開始する
         * @param {NssolPlatypusApiModelsTrainingApiModelsCreateInputModel} [nssolPlatypusApiModelsTrainingApiModelsCreateInputModel] 新規学習実行内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingRunPost(nssolPlatypusApiModelsTrainingApiModelsCreateInputModel?: NssolPlatypusApiModelsTrainingApiModelsCreateInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel> {
            return localVarFp.apiV2TrainingRunPost(nssolPlatypusApiModelsTrainingApiModelsCreateInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 検索時の補完に使用する項目を出力する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingSearchFillGet(options?: any): AxiosPromise<NssolPlatypusApiModelsTrainingApiModelsTrainingSearchFillOutputModel> {
            return localVarFp.apiV2TrainingSearchFillGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定された条件でページングされた状態で、全学習履歴を取得。詳細検索で使用。
         * @param {number} [idLower] IDの検索条件。  この数値以上のIDが検索される。
         * @param {number} [idUpper] IDの検索条件。  この数値以下のIDが検索される。
         * @param {string} [name] 名前  複数のワードが含まれる場合は\&quot;,\&quot;区切り
         * @param {boolean} [nameOr] 名前がor検索かand検索か
         * @param {string} [parentName] 親学習名  複数のワードが含まれる場合は\&quot;,\&quot;区切り
         * @param {boolean} [parentNameOr] 親学習名がor検索かand検索か
         * @param {string} [startedAtLower] 実行時刻の検索の期間の開始の条件。日付の形式。  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降が検索される。
         * @param {string} [startedAtUpper] 実行時刻の検索の期間の終了の条件。日付の形式。  \&quot;2018/01/01\&quot; → 2018/01/01 23:59:59 以前が検索される。
         * @param {string} [startedBy] 実行者  複数のワードが含まれる場合は\&quot;,\&quot;区切り
         * @param {boolean} [startedByOr] 実行者の検索がor検索かand検索か
         * @param {string} [dataSet] データセット名  複数のワードが含まれる場合は\&quot;,\&quot;区切り
         * @param {boolean} [dataSetOr] データセット名がor検索かand検索か
         * @param {string} [memo] メモ  複数のワードが含まれる場合は\&quot;,\&quot;区切り
         * @param {boolean} [memoOr] メモがor検索かand検索か
         * @param {string} [status] ステータス  複数のワードが含まれる場合は\&quot;,\&quot;区切り
         * @param {boolean} [statusOr] ステータスがor検索かand検索か
         * @param {string} [entryPoint] 実行コマンド  複数のワードが含まれる場合は\&quot;,\&quot;区切り
         * @param {boolean} [entryPointOr] 実行コマンドがor検索かand検索か
         * @param {string} [tags] タグ  複数のワードが含まれる場合は\&quot;,\&quot;区切り
         * @param {boolean} [tagsOr] タグがor検索かand検索か
         * @param {number} [perPage] 表示件数。指定がない場合は上限(1000件)。
         * @param {number} [page] ページ番号。デフォルトは1。
         * @param {boolean} [withTotal] 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingSearchGet(idLower?: number, idUpper?: number, name?: string, nameOr?: boolean, parentName?: string, parentNameOr?: boolean, startedAtLower?: string, startedAtUpper?: string, startedBy?: string, startedByOr?: boolean, dataSet?: string, dataSetOr?: boolean, memo?: string, memoOr?: boolean, status?: string, statusOr?: boolean, entryPoint?: string, entryPointOr?: boolean, tags?: string, tagsOr?: boolean, perPage?: number, page?: number, withTotal?: boolean, options?: any): AxiosPromise<Array<NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel>> {
            return localVarFp.apiV2TrainingSearchGet(idLower, idUpper, name, nameOr, parentName, parentNameOr, startedAtLower, startedAtUpper, startedBy, startedByOr, dataSet, dataSetOr, memo, memoOr, status, statusOr, entryPoint, entryPointOr, tags, tagsOr, perPage, page, withTotal, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 検索履歴の一覧を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingSearchHistoryGet(options?: any): AxiosPromise<Array<NssolPlatypusApiModelsTrainingApiModelsSearchHistoryOutputModel>> {
            return localVarFp.apiV2TrainingSearchHistoryGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 検索履歴を削除する
         * @param {number} id 削除対象の検索履歴ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingSearchHistoryIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2TrainingSearchHistoryIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 検索履歴を保存する
         * @param {NssolPlatypusApiModelsTrainingApiModelsSearchHistoryInputModel} [nssolPlatypusApiModelsTrainingApiModelsSearchHistoryInputModel] 保存対象の検索履歴入力モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingSearchHistoryPost(nssolPlatypusApiModelsTrainingApiModelsSearchHistoryInputModel?: NssolPlatypusApiModelsTrainingApiModelsSearchHistoryInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsTrainingApiModelsSearchHistoryOutputModel> {
            return localVarFp.apiV2TrainingSearchHistoryPost(nssolPlatypusApiModelsTrainingApiModelsSearchHistoryInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 全学習履歴のIDと名前を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingSimpleGet(options?: any): AxiosPromise<Array<NssolPlatypusApiModelsTrainingApiModelsSimpleOutputModel>> {
            return localVarFp.apiV2TrainingSimpleGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定したIdに対応したTagを消去する。
         * @param {NssolPlatypusApiModelsTrainingApiModelsTagsInputModel} [nssolPlatypusApiModelsTrainingApiModelsTagsInputModel] 削除タグの入力モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingTagsDelete(nssolPlatypusApiModelsTrainingApiModelsTagsInputModel?: NssolPlatypusApiModelsTrainingApiModelsTagsInputModel, options?: any): AxiosPromise<Array<NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel>> {
            return localVarFp.apiV2TrainingTagsDelete(nssolPlatypusApiModelsTrainingApiModelsTagsInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 選択中のテナントに登録されている学習管理で使用するタグを表示する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingTagsGet(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.apiV2TrainingTagsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定したIdに対応したTagをつける。
         * @param {NssolPlatypusApiModelsTrainingApiModelsTagsInputModel} [nssolPlatypusApiModelsTrainingApiModelsTagsInputModel] 付与タグの入力モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TrainingTagsPost(nssolPlatypusApiModelsTrainingApiModelsTagsInputModel?: NssolPlatypusApiModelsTrainingApiModelsTagsInputModel, options?: any): AxiosPromise<Array<NssolPlatypusApiModelsTrainingApiModelsIndexOutputModel>> {
            return localVarFp.apiV2TrainingTagsPost(nssolPlatypusApiModelsTrainingApiModelsTagsInputModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV2TrainingGet operation in TrainingApi.
 * @export
 * @interface TrainingApiApiV2TrainingGetRequest
 */
export interface TrainingApiApiV2TrainingGetRequest {
    /**
     * IDの検索条件。  比較文字列＋数値の形式。
     * @type {string}
     * @memberof TrainingApiApiV2TrainingGet
     */
    readonly id?: string

    /**
     * 名前
     * @type {string}
     * @memberof TrainingApiApiV2TrainingGet
     */
    readonly name?: string

    /**
     * 親学習ID
     * @type {string}
     * @memberof TrainingApiApiV2TrainingGet
     */
    readonly parentId?: string

    /**
     * 親学習名
     * @type {string}
     * @memberof TrainingApiApiV2TrainingGet
     */
    readonly parentName?: string

    /**
     * 実行時刻の検索条件。  比較文字列＋時刻の形式。  e.g.（比較文字列は半角でOK）  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降 ～ 2018/01/02 00:00:00 より前  \&quot;＞2018/01/01\&quot; → 2018/01/01 00:00:00 以降  \&quot;＜2018/01/01\&quot; → 2018/01/01 00:00:00 以前
     * @type {string}
     * @memberof TrainingApiApiV2TrainingGet
     */
    readonly startedAt?: string

    /**
     * 実行者
     * @type {string}
     * @memberof TrainingApiApiV2TrainingGet
     */
    readonly startedBy?: string

    /**
     * データセット名
     * @type {string}
     * @memberof TrainingApiApiV2TrainingGet
     */
    readonly dataSet?: string

    /**
     * メモ
     * @type {string}
     * @memberof TrainingApiApiV2TrainingGet
     */
    readonly memo?: string

    /**
     * ステータス
     * @type {string}
     * @memberof TrainingApiApiV2TrainingGet
     */
    readonly status?: string

    /**
     * 実行コマンド
     * @type {string}
     * @memberof TrainingApiApiV2TrainingGet
     */
    readonly entryPoint?: string

    /**
     * タグ
     * @type {Array<string>}
     * @memberof TrainingApiApiV2TrainingGet
     */
    readonly tag?: Array<string>

    /**
     * 表示件数。指定がない場合は上限(1000件)。
     * @type {number}
     * @memberof TrainingApiApiV2TrainingGet
     */
    readonly perPage?: number

    /**
     * ページ番号。デフォルトは1。
     * @type {number}
     * @memberof TrainingApiApiV2TrainingGet
     */
    readonly page?: number

    /**
     * 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
     * @type {boolean}
     * @memberof TrainingApiApiV2TrainingGet
     */
    readonly withTotal?: boolean
}

/**
 * Request parameters for apiV2TrainingIdCompletePost operation in TrainingApi.
 * @export
 * @interface TrainingApiApiV2TrainingIdCompletePostRequest
 */
export interface TrainingApiApiV2TrainingIdCompletePostRequest {
    /**
     * 学習履歴ID
     * @type {number}
     * @memberof TrainingApiApiV2TrainingIdCompletePost
     */
    readonly id: number
}

/**
 * Request parameters for apiV2TrainingIdContainerFilesGet operation in TrainingApi.
 * @export
 * @interface TrainingApiApiV2TrainingIdContainerFilesGetRequest
 */
export interface TrainingApiApiV2TrainingIdContainerFilesGetRequest {
    /**
     * 対象の学習履歴ID
     * @type {number}
     * @memberof TrainingApiApiV2TrainingIdContainerFilesGet
     */
    readonly id: number

    /**
     * 検索対象ディレクトリ。使用可能文字は「-_1-9a-zA-Z/」
     * @type {string}
     * @memberof TrainingApiApiV2TrainingIdContainerFilesGet
     */
    readonly path?: string

    /**
     * 結果にダウンロード用のURLを含めるか
     * @type {boolean}
     * @memberof TrainingApiApiV2TrainingIdContainerFilesGet
     */
    readonly withUrl?: boolean
}

/**
 * Request parameters for apiV2TrainingIdDelete operation in TrainingApi.
 * @export
 * @interface TrainingApiApiV2TrainingIdDeleteRequest
 */
export interface TrainingApiApiV2TrainingIdDeleteRequest {
    /**
     * 学習履歴ID
     * @type {number}
     * @memberof TrainingApiApiV2TrainingIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiV2TrainingIdEventsGet operation in TrainingApi.
 * @export
 * @interface TrainingApiApiV2TrainingIdEventsGetRequest
 */
export interface TrainingApiApiV2TrainingIdEventsGetRequest {
    /**
     * 学習履歴ID
     * @type {number}
     * @memberof TrainingApiApiV2TrainingIdEventsGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV2TrainingIdFilesFileIdDelete operation in TrainingApi.
 * @export
 * @interface TrainingApiApiV2TrainingIdFilesFileIdDeleteRequest
 */
export interface TrainingApiApiV2TrainingIdFilesFileIdDeleteRequest {
    /**
     * 対象の学習履歴ID
     * @type {number}
     * @memberof TrainingApiApiV2TrainingIdFilesFileIdDelete
     */
    readonly id: number

    /**
     * 削除するファイルのID
     * @type {number}
     * @memberof TrainingApiApiV2TrainingIdFilesFileIdDelete
     */
    readonly fileId: number
}

/**
 * Request parameters for apiV2TrainingIdFilesGet operation in TrainingApi.
 * @export
 * @interface TrainingApiApiV2TrainingIdFilesGetRequest
 */
export interface TrainingApiApiV2TrainingIdFilesGetRequest {
    /**
     * 対象の学習履歴ID
     * @type {number}
     * @memberof TrainingApiApiV2TrainingIdFilesGet
     */
    readonly id: number

    /**
     * 結果にダウンロード用のURLを含めるか
     * @type {boolean}
     * @memberof TrainingApiApiV2TrainingIdFilesGet
     */
    readonly withUrl?: boolean
}

/**
 * Request parameters for apiV2TrainingIdFilesNameSizeGet operation in TrainingApi.
 * @export
 * @interface TrainingApiApiV2TrainingIdFilesNameSizeGetRequest
 */
export interface TrainingApiApiV2TrainingIdFilesNameSizeGetRequest {
    /**
     * 対象の学習履歴ID
     * @type {number}
     * @memberof TrainingApiApiV2TrainingIdFilesNameSizeGet
     */
    readonly id: number

    /**
     * 対象ファイル名
     * @type {string}
     * @memberof TrainingApiApiV2TrainingIdFilesNameSizeGet
     */
    readonly name: string
}

/**
 * Request parameters for apiV2TrainingIdFilesPost operation in TrainingApi.
 * @export
 * @interface TrainingApiApiV2TrainingIdFilesPostRequest
 */
export interface TrainingApiApiV2TrainingIdFilesPostRequest {
    /**
     * 対象の学習履歴ID
     * @type {number}
     * @memberof TrainingApiApiV2TrainingIdFilesPost
     */
    readonly id: number

    /**
     * 追加するファイル情報
     * @type {NssolPlatypusApiModelsComponentsAddFileInputModel}
     * @memberof TrainingApiApiV2TrainingIdFilesPost
     */
    readonly nssolPlatypusApiModelsComponentsAddFileInputModel?: NssolPlatypusApiModelsComponentsAddFileInputModel
}

/**
 * Request parameters for apiV2TrainingIdGet operation in TrainingApi.
 * @export
 * @interface TrainingApiApiV2TrainingIdGetRequest
 */
export interface TrainingApiApiV2TrainingIdGetRequest {
    /**
     * 学習履歴ID
     * @type {number}
     * @memberof TrainingApiApiV2TrainingIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV2TrainingIdHaltPost operation in TrainingApi.
 * @export
 * @interface TrainingApiApiV2TrainingIdHaltPostRequest
 */
export interface TrainingApiApiV2TrainingIdHaltPostRequest {
    /**
     * 学習履歴ID
     * @type {number}
     * @memberof TrainingApiApiV2TrainingIdHaltPost
     */
    readonly id: number
}

/**
 * Request parameters for apiV2TrainingIdPut operation in TrainingApi.
 * @export
 * @interface TrainingApiApiV2TrainingIdPutRequest
 */
export interface TrainingApiApiV2TrainingIdPutRequest {
    /**
     * 変更対象の学習履歴ID
     * @type {number}
     * @memberof TrainingApiApiV2TrainingIdPut
     */
    readonly id: number

    /**
     * 変更内容
     * @type {NssolPlatypusApiModelsTrainingApiModelsEditInputModel}
     * @memberof TrainingApiApiV2TrainingIdPut
     */
    readonly nssolPlatypusApiModelsTrainingApiModelsEditInputModel?: NssolPlatypusApiModelsTrainingApiModelsEditInputModel
}

/**
 * Request parameters for apiV2TrainingIdTensorboardDelete operation in TrainingApi.
 * @export
 * @interface TrainingApiApiV2TrainingIdTensorboardDeleteRequest
 */
export interface TrainingApiApiV2TrainingIdTensorboardDeleteRequest {
    /**
     * 対象の学習履歴ID
     * @type {number}
     * @memberof TrainingApiApiV2TrainingIdTensorboardDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiV2TrainingIdTensorboardGet operation in TrainingApi.
 * @export
 * @interface TrainingApiApiV2TrainingIdTensorboardGetRequest
 */
export interface TrainingApiApiV2TrainingIdTensorboardGetRequest {
    /**
     * 対象の学習履歴ID
     * @type {number}
     * @memberof TrainingApiApiV2TrainingIdTensorboardGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV2TrainingIdTensorboardPut operation in TrainingApi.
 * @export
 * @interface TrainingApiApiV2TrainingIdTensorboardPutRequest
 */
export interface TrainingApiApiV2TrainingIdTensorboardPutRequest {
    /**
     * 対象の学習履歴ID
     * @type {number}
     * @memberof TrainingApiApiV2TrainingIdTensorboardPut
     */
    readonly id: number

    /**
     * 起動モデル
     * @type {NssolPlatypusApiModelsTrainingApiModelsTensorBoardInputModel}
     * @memberof TrainingApiApiV2TrainingIdTensorboardPut
     */
    readonly nssolPlatypusApiModelsTrainingApiModelsTensorBoardInputModel?: NssolPlatypusApiModelsTrainingApiModelsTensorBoardInputModel
}

/**
 * Request parameters for apiV2TrainingIdUserCancelPost operation in TrainingApi.
 * @export
 * @interface TrainingApiApiV2TrainingIdUserCancelPostRequest
 */
export interface TrainingApiApiV2TrainingIdUserCancelPostRequest {
    /**
     * 学習履歴ID
     * @type {number}
     * @memberof TrainingApiApiV2TrainingIdUserCancelPost
     */
    readonly id: number
}

/**
 * Request parameters for apiV2TrainingMountGet operation in TrainingApi.
 * @export
 * @interface TrainingApiApiV2TrainingMountGetRequest
 */
export interface TrainingApiApiV2TrainingMountGetRequest {
    /**
     * ステータス
     * @type {Array<string>}
     * @memberof TrainingApiApiV2TrainingMountGet
     */
    readonly status?: Array<string>
}

/**
 * Request parameters for apiV2TrainingRunPost operation in TrainingApi.
 * @export
 * @interface TrainingApiApiV2TrainingRunPostRequest
 */
export interface TrainingApiApiV2TrainingRunPostRequest {
    /**
     * 新規学習実行内容
     * @type {NssolPlatypusApiModelsTrainingApiModelsCreateInputModel}
     * @memberof TrainingApiApiV2TrainingRunPost
     */
    readonly nssolPlatypusApiModelsTrainingApiModelsCreateInputModel?: NssolPlatypusApiModelsTrainingApiModelsCreateInputModel
}

/**
 * Request parameters for apiV2TrainingSearchGet operation in TrainingApi.
 * @export
 * @interface TrainingApiApiV2TrainingSearchGetRequest
 */
export interface TrainingApiApiV2TrainingSearchGetRequest {
    /**
     * IDの検索条件。  この数値以上のIDが検索される。
     * @type {number}
     * @memberof TrainingApiApiV2TrainingSearchGet
     */
    readonly idLower?: number

    /**
     * IDの検索条件。  この数値以下のIDが検索される。
     * @type {number}
     * @memberof TrainingApiApiV2TrainingSearchGet
     */
    readonly idUpper?: number

    /**
     * 名前  複数のワードが含まれる場合は\&quot;,\&quot;区切り
     * @type {string}
     * @memberof TrainingApiApiV2TrainingSearchGet
     */
    readonly name?: string

    /**
     * 名前がor検索かand検索か
     * @type {boolean}
     * @memberof TrainingApiApiV2TrainingSearchGet
     */
    readonly nameOr?: boolean

    /**
     * 親学習名  複数のワードが含まれる場合は\&quot;,\&quot;区切り
     * @type {string}
     * @memberof TrainingApiApiV2TrainingSearchGet
     */
    readonly parentName?: string

    /**
     * 親学習名がor検索かand検索か
     * @type {boolean}
     * @memberof TrainingApiApiV2TrainingSearchGet
     */
    readonly parentNameOr?: boolean

    /**
     * 実行時刻の検索の期間の開始の条件。日付の形式。  \&quot;2018/01/01\&quot; → 2018/01/01 00:00:00 以降が検索される。
     * @type {string}
     * @memberof TrainingApiApiV2TrainingSearchGet
     */
    readonly startedAtLower?: string

    /**
     * 実行時刻の検索の期間の終了の条件。日付の形式。  \&quot;2018/01/01\&quot; → 2018/01/01 23:59:59 以前が検索される。
     * @type {string}
     * @memberof TrainingApiApiV2TrainingSearchGet
     */
    readonly startedAtUpper?: string

    /**
     * 実行者  複数のワードが含まれる場合は\&quot;,\&quot;区切り
     * @type {string}
     * @memberof TrainingApiApiV2TrainingSearchGet
     */
    readonly startedBy?: string

    /**
     * 実行者の検索がor検索かand検索か
     * @type {boolean}
     * @memberof TrainingApiApiV2TrainingSearchGet
     */
    readonly startedByOr?: boolean

    /**
     * データセット名  複数のワードが含まれる場合は\&quot;,\&quot;区切り
     * @type {string}
     * @memberof TrainingApiApiV2TrainingSearchGet
     */
    readonly dataSet?: string

    /**
     * データセット名がor検索かand検索か
     * @type {boolean}
     * @memberof TrainingApiApiV2TrainingSearchGet
     */
    readonly dataSetOr?: boolean

    /**
     * メモ  複数のワードが含まれる場合は\&quot;,\&quot;区切り
     * @type {string}
     * @memberof TrainingApiApiV2TrainingSearchGet
     */
    readonly memo?: string

    /**
     * メモがor検索かand検索か
     * @type {boolean}
     * @memberof TrainingApiApiV2TrainingSearchGet
     */
    readonly memoOr?: boolean

    /**
     * ステータス  複数のワードが含まれる場合は\&quot;,\&quot;区切り
     * @type {string}
     * @memberof TrainingApiApiV2TrainingSearchGet
     */
    readonly status?: string

    /**
     * ステータスがor検索かand検索か
     * @type {boolean}
     * @memberof TrainingApiApiV2TrainingSearchGet
     */
    readonly statusOr?: boolean

    /**
     * 実行コマンド  複数のワードが含まれる場合は\&quot;,\&quot;区切り
     * @type {string}
     * @memberof TrainingApiApiV2TrainingSearchGet
     */
    readonly entryPoint?: string

    /**
     * 実行コマンドがor検索かand検索か
     * @type {boolean}
     * @memberof TrainingApiApiV2TrainingSearchGet
     */
    readonly entryPointOr?: boolean

    /**
     * タグ  複数のワードが含まれる場合は\&quot;,\&quot;区切り
     * @type {string}
     * @memberof TrainingApiApiV2TrainingSearchGet
     */
    readonly tags?: string

    /**
     * タグがor検索かand検索か
     * @type {boolean}
     * @memberof TrainingApiApiV2TrainingSearchGet
     */
    readonly tagsOr?: boolean

    /**
     * 表示件数。指定がない場合は上限(1000件)。
     * @type {number}
     * @memberof TrainingApiApiV2TrainingSearchGet
     */
    readonly perPage?: number

    /**
     * ページ番号。デフォルトは1。
     * @type {number}
     * @memberof TrainingApiApiV2TrainingSearchGet
     */
    readonly page?: number

    /**
     * 合計件数をレスポンスヘッダ(X-Total-Count)に含めるか。デフォルトはfalse。
     * @type {boolean}
     * @memberof TrainingApiApiV2TrainingSearchGet
     */
    readonly withTotal?: boolean
}

/**
 * Request parameters for apiV2TrainingSearchHistoryIdDelete operation in TrainingApi.
 * @export
 * @interface TrainingApiApiV2TrainingSearchHistoryIdDeleteRequest
 */
export interface TrainingApiApiV2TrainingSearchHistoryIdDeleteRequest {
    /**
     * 削除対象の検索履歴ID
     * @type {number}
     * @memberof TrainingApiApiV2TrainingSearchHistoryIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiV2TrainingSearchHistoryPost operation in TrainingApi.
 * @export
 * @interface TrainingApiApiV2TrainingSearchHistoryPostRequest
 */
export interface TrainingApiApiV2TrainingSearchHistoryPostRequest {
    /**
     * 保存対象の検索履歴入力モデル
     * @type {NssolPlatypusApiModelsTrainingApiModelsSearchHistoryInputModel}
     * @memberof TrainingApiApiV2TrainingSearchHistoryPost
     */
    readonly nssolPlatypusApiModelsTrainingApiModelsSearchHistoryInputModel?: NssolPlatypusApiModelsTrainingApiModelsSearchHistoryInputModel
}

/**
 * Request parameters for apiV2TrainingTagsDelete operation in TrainingApi.
 * @export
 * @interface TrainingApiApiV2TrainingTagsDeleteRequest
 */
export interface TrainingApiApiV2TrainingTagsDeleteRequest {
    /**
     * 削除タグの入力モデル
     * @type {NssolPlatypusApiModelsTrainingApiModelsTagsInputModel}
     * @memberof TrainingApiApiV2TrainingTagsDelete
     */
    readonly nssolPlatypusApiModelsTrainingApiModelsTagsInputModel?: NssolPlatypusApiModelsTrainingApiModelsTagsInputModel
}

/**
 * Request parameters for apiV2TrainingTagsPost operation in TrainingApi.
 * @export
 * @interface TrainingApiApiV2TrainingTagsPostRequest
 */
export interface TrainingApiApiV2TrainingTagsPostRequest {
    /**
     * 付与タグの入力モデル
     * @type {NssolPlatypusApiModelsTrainingApiModelsTagsInputModel}
     * @memberof TrainingApiApiV2TrainingTagsPost
     */
    readonly nssolPlatypusApiModelsTrainingApiModelsTagsInputModel?: NssolPlatypusApiModelsTrainingApiModelsTagsInputModel
}

/**
 * TrainingApi - object-oriented interface
 * @export
 * @class TrainingApi
 * @extends {BaseAPI}
 */
export class TrainingApi extends BaseAPI {
    /**
     * 
     * @summary 指定された条件でページングされた状態で、全学習履歴を取得
     * @param {TrainingApiApiV2TrainingGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiV2TrainingGet(requestParameters: TrainingApiApiV2TrainingGetRequest = {}, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiV2TrainingGet(requestParameters.id, requestParameters.name, requestParameters.parentId, requestParameters.parentName, requestParameters.startedAt, requestParameters.startedBy, requestParameters.dataSet, requestParameters.memo, requestParameters.status, requestParameters.entryPoint, requestParameters.tag, requestParameters.perPage, requestParameters.page, requestParameters.withTotal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 学習を正常終了させる。
     * @param {TrainingApiApiV2TrainingIdCompletePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiV2TrainingIdCompletePost(requestParameters: TrainingApiApiV2TrainingIdCompletePostRequest, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiV2TrainingIdCompletePost(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * コンテナの/output/配下から指定ディレクトリパスの直下を検索する  検索対象ディレクトリが見つからない場合もファイル・ディレクトリが空の結果を返す
     * @summary コンテナの出力ファイルの一覧を取得する。
     * @param {TrainingApiApiV2TrainingIdContainerFilesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiV2TrainingIdContainerFilesGet(requestParameters: TrainingApiApiV2TrainingIdContainerFilesGetRequest, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiV2TrainingIdContainerFilesGet(requestParameters.id, requestParameters.path, requestParameters.withUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 学習履歴を削除する。
     * @param {TrainingApiApiV2TrainingIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiV2TrainingIdDelete(requestParameters: TrainingApiApiV2TrainingIdDeleteRequest, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiV2TrainingIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定された学習履歴のエラーイベントを取得します。
     * @param {TrainingApiApiV2TrainingIdEventsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiV2TrainingIdEventsGet(requestParameters: TrainingApiApiV2TrainingIdEventsGetRequest, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiV2TrainingIdEventsGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 学習履歴添付ファイルを削除する
     * @param {TrainingApiApiV2TrainingIdFilesFileIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiV2TrainingIdFilesFileIdDelete(requestParameters: TrainingApiApiV2TrainingIdFilesFileIdDeleteRequest, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiV2TrainingIdFilesFileIdDelete(requestParameters.id, requestParameters.fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 学習履歴添付ファイルの一覧を取得する。
     * @param {TrainingApiApiV2TrainingIdFilesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiV2TrainingIdFilesGet(requestParameters: TrainingApiApiV2TrainingIdFilesGetRequest, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiV2TrainingIdFilesGet(requestParameters.id, requestParameters.withUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 学習履歴添付ファイルのサイズ(Byte)を取得する
     * @param {TrainingApiApiV2TrainingIdFilesNameSizeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiV2TrainingIdFilesNameSizeGet(requestParameters: TrainingApiApiV2TrainingIdFilesNameSizeGetRequest, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiV2TrainingIdFilesNameSizeGet(requestParameters.id, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 学習履歴添付ファイルを登録する。
     * @param {TrainingApiApiV2TrainingIdFilesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiV2TrainingIdFilesPost(requestParameters: TrainingApiApiV2TrainingIdFilesPostRequest, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiV2TrainingIdFilesPost(requestParameters.id, requestParameters.nssolPlatypusApiModelsComponentsAddFileInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定されたIDの学習履歴の詳細情報を取得。
     * @param {TrainingApiApiV2TrainingIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiV2TrainingIdGet(requestParameters: TrainingApiApiV2TrainingIdGetRequest, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiV2TrainingIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 学習を途中で強制終了させる。
     * @param {TrainingApiApiV2TrainingIdHaltPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiV2TrainingIdHaltPost(requestParameters: TrainingApiApiV2TrainingIdHaltPostRequest, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiV2TrainingIdHaltPost(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 学習履歴の編集
     * @param {TrainingApiApiV2TrainingIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiV2TrainingIdPut(requestParameters: TrainingApiApiV2TrainingIdPutRequest, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiV2TrainingIdPut(requestParameters.id, requestParameters.nssolPlatypusApiModelsTrainingApiModelsEditInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定した学習のTensor Boardを削除する
     * @param {TrainingApiApiV2TrainingIdTensorboardDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiV2TrainingIdTensorboardDelete(requestParameters: TrainingApiApiV2TrainingIdTensorboardDeleteRequest, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiV2TrainingIdTensorboardDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定したTensorBoardコンテナ情報を取得する
     * @param {TrainingApiApiV2TrainingIdTensorboardGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiV2TrainingIdTensorboardGet(requestParameters: TrainingApiApiV2TrainingIdTensorboardGetRequest, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiV2TrainingIdTensorboardGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定した学習のTensor Boardを立てる
     * @param {TrainingApiApiV2TrainingIdTensorboardPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiV2TrainingIdTensorboardPut(requestParameters: TrainingApiApiV2TrainingIdTensorboardPutRequest, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiV2TrainingIdTensorboardPut(requestParameters.id, requestParameters.nssolPlatypusApiModelsTrainingApiModelsTensorBoardInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 学習を途中で強制終了させる。  ユーザ自身がジョブを停止させた場合。
     * @param {TrainingApiApiV2TrainingIdUserCancelPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiV2TrainingIdUserCancelPost(requestParameters: TrainingApiApiV2TrainingIdUserCancelPostRequest, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiV2TrainingIdUserCancelPost(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary マウントする学習履歴を取得
     * @param {TrainingApiApiV2TrainingMountGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiV2TrainingMountGet(requestParameters: TrainingApiApiV2TrainingMountGetRequest = {}, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiV2TrainingMountGet(requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新規に学習を開始する
     * @param {TrainingApiApiV2TrainingRunPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiV2TrainingRunPost(requestParameters: TrainingApiApiV2TrainingRunPostRequest = {}, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiV2TrainingRunPost(requestParameters.nssolPlatypusApiModelsTrainingApiModelsCreateInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 検索時の補完に使用する項目を出力する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiV2TrainingSearchFillGet(options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiV2TrainingSearchFillGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定された条件でページングされた状態で、全学習履歴を取得。詳細検索で使用。
     * @param {TrainingApiApiV2TrainingSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiV2TrainingSearchGet(requestParameters: TrainingApiApiV2TrainingSearchGetRequest = {}, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiV2TrainingSearchGet(requestParameters.idLower, requestParameters.idUpper, requestParameters.name, requestParameters.nameOr, requestParameters.parentName, requestParameters.parentNameOr, requestParameters.startedAtLower, requestParameters.startedAtUpper, requestParameters.startedBy, requestParameters.startedByOr, requestParameters.dataSet, requestParameters.dataSetOr, requestParameters.memo, requestParameters.memoOr, requestParameters.status, requestParameters.statusOr, requestParameters.entryPoint, requestParameters.entryPointOr, requestParameters.tags, requestParameters.tagsOr, requestParameters.perPage, requestParameters.page, requestParameters.withTotal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 検索履歴の一覧を取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiV2TrainingSearchHistoryGet(options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiV2TrainingSearchHistoryGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 検索履歴を削除する
     * @param {TrainingApiApiV2TrainingSearchHistoryIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiV2TrainingSearchHistoryIdDelete(requestParameters: TrainingApiApiV2TrainingSearchHistoryIdDeleteRequest, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiV2TrainingSearchHistoryIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 検索履歴を保存する
     * @param {TrainingApiApiV2TrainingSearchHistoryPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiV2TrainingSearchHistoryPost(requestParameters: TrainingApiApiV2TrainingSearchHistoryPostRequest = {}, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiV2TrainingSearchHistoryPost(requestParameters.nssolPlatypusApiModelsTrainingApiModelsSearchHistoryInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 全学習履歴のIDと名前を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiV2TrainingSimpleGet(options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiV2TrainingSimpleGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定したIdに対応したTagを消去する。
     * @param {TrainingApiApiV2TrainingTagsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiV2TrainingTagsDelete(requestParameters: TrainingApiApiV2TrainingTagsDeleteRequest = {}, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiV2TrainingTagsDelete(requestParameters.nssolPlatypusApiModelsTrainingApiModelsTagsInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 選択中のテナントに登録されている学習管理で使用するタグを表示する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiV2TrainingTagsGet(options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiV2TrainingTagsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定したIdに対応したTagをつける。
     * @param {TrainingApiApiV2TrainingTagsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiV2TrainingTagsPost(requestParameters: TrainingApiApiV2TrainingTagsPostRequest = {}, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiV2TrainingTagsPost(requestParameters.nssolPlatypusApiModelsTrainingApiModelsTagsInputModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 管理者向けにユーザの一覧を取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminUsersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定したユーザを削除する
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminUsersIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminUsersIdDelete', 'id', id)
            const localVarPath = `/api/v2/admin/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定したユーザの表示名を変更する
         * @param {number} id 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminUsersIdDisplayNamePut: async (id: number, body?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminUsersIdDisplayNamePut', 'id', id)
            const localVarPath = `/api/v2/admin/users/{id}/displayName`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 管理者向けに指定したユーザの情報を取得する。
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminUsersIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminUsersIdGet', 'id', id)
            const localVarPath = `/api/v2/admin/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定したユーザのパスワードを変更する
         * @param {number} id 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminUsersIdPasswordPut: async (id: number, body?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminUsersIdPasswordPut', 'id', id)
            const localVarPath = `/api/v2/admin/users/{id}/password`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定したユーザを編集する
         * @param {number} id 
         * @param {NssolPlatypusApiModelsUserApiModelsEditInputModel} [nssolPlatypusApiModelsUserApiModelsEditInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminUsersIdPut: async (id: number, nssolPlatypusApiModelsUserApiModelsEditInputModel?: NssolPlatypusApiModelsUserApiModelsEditInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminUsersIdPut', 'id', id)
            const localVarPath = `/api/v2/admin/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsUserApiModelsEditInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ユーザをローカルアカウントとして新規追加する
         * @param {NssolPlatypusApiModelsUserApiModelsCreateInputModel} [nssolPlatypusApiModelsUserApiModelsCreateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminUsersPost: async (nssolPlatypusApiModelsUserApiModelsCreateInputModel?: NssolPlatypusApiModelsUserApiModelsCreateInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsUserApiModelsCreateInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary LDAPサーバに問い合わせを行い、各ユーザの権限を更新する
         * @param {NssolPlatypusApiModelsUserApiModelsLdapAuthenticationInputModel} [nssolPlatypusApiModelsUserApiModelsLdapAuthenticationInputModel] LDAP認証情報入力モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminUsersSyncLdapPost: async (nssolPlatypusApiModelsUserApiModelsLdapAuthenticationInputModel?: NssolPlatypusApiModelsUserApiModelsLdapAuthenticationInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/users/sync-ldap`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsUserApiModelsLdapAuthenticationInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary テナント向けに、所属しているユーザの一覧を取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantUsersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/tenant/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定したユーザを接続中のテナントから削除する
         * @param {number} id ユーザID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantUsersIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2TenantUsersIdDelete', 'id', id)
            const localVarPath = `/api/v2/tenant/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary テナント向けに指定したユーザの情報を取得する。
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantUsersIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2TenantUsersIdGet', 'id', id)
            const localVarPath = `/api/v2/tenant/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定したユーザについての接続中のテナントに対するロール情報を編集する
         * @param {number} id ユーザID
         * @param {Array<number>} [requestBody] 登録するロールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantUsersIdRolesPut: async (id: number, requestBody?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2TenantUsersIdRolesPut', 'id', id)
            const localVarPath = `/api/v2/tenant/users/{id}/roles`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 管理者向けにユーザの一覧を取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminUsersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsUserApiModelsIndexForAdminOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminUsersGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定したユーザを削除する
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminUsersIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminUsersIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定したユーザの表示名を変更する
         * @param {number} id 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminUsersIdDisplayNamePut(id: number, body?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminUsersIdDisplayNamePut(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 管理者向けに指定したユーザの情報を取得する。
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminUsersIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsUserApiModelsIndexForAdminOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminUsersIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定したユーザのパスワードを変更する
         * @param {number} id 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminUsersIdPasswordPut(id: number, body?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminUsersIdPasswordPut(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定したユーザを編集する
         * @param {number} id 
         * @param {NssolPlatypusApiModelsUserApiModelsEditInputModel} [nssolPlatypusApiModelsUserApiModelsEditInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminUsersIdPut(id: number, nssolPlatypusApiModelsUserApiModelsEditInputModel?: NssolPlatypusApiModelsUserApiModelsEditInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsUserApiModelsIndexForAdminOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminUsersIdPut(id, nssolPlatypusApiModelsUserApiModelsEditInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ユーザをローカルアカウントとして新規追加する
         * @param {NssolPlatypusApiModelsUserApiModelsCreateInputModel} [nssolPlatypusApiModelsUserApiModelsCreateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminUsersPost(nssolPlatypusApiModelsUserApiModelsCreateInputModel?: NssolPlatypusApiModelsUserApiModelsCreateInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsUserApiModelsIndexForAdminOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminUsersPost(nssolPlatypusApiModelsUserApiModelsCreateInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary LDAPサーバに問い合わせを行い、各ユーザの権限を更新する
         * @param {NssolPlatypusApiModelsUserApiModelsLdapAuthenticationInputModel} [nssolPlatypusApiModelsUserApiModelsLdapAuthenticationInputModel] LDAP認証情報入力モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminUsersSyncLdapPost(nssolPlatypusApiModelsUserApiModelsLdapAuthenticationInputModel?: NssolPlatypusApiModelsUserApiModelsLdapAuthenticationInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminUsersSyncLdapPost(nssolPlatypusApiModelsUserApiModelsLdapAuthenticationInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary テナント向けに、所属しているユーザの一覧を取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TenantUsersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsUserApiModelsIndexForTenantOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TenantUsersGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定したユーザを接続中のテナントから削除する
         * @param {number} id ユーザID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TenantUsersIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TenantUsersIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary テナント向けに指定したユーザの情報を取得する。
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TenantUsersIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsUserApiModelsIndexForTenantOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TenantUsersIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定したユーザについての接続中のテナントに対するロール情報を編集する
         * @param {number} id ユーザID
         * @param {Array<number>} [requestBody] 登録するロールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2TenantUsersIdRolesPut(id: number, requestBody?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsUserApiModelsIndexForAdminOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2TenantUsersIdRolesPut(id, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary 管理者向けにユーザの一覧を取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminUsersGet(options?: any): AxiosPromise<Array<NssolPlatypusApiModelsUserApiModelsIndexForAdminOutputModel>> {
            return localVarFp.apiV2AdminUsersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定したユーザを削除する
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminUsersIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2AdminUsersIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定したユーザの表示名を変更する
         * @param {number} id 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminUsersIdDisplayNamePut(id: number, body?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2AdminUsersIdDisplayNamePut(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 管理者向けに指定したユーザの情報を取得する。
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminUsersIdGet(id: number, options?: any): AxiosPromise<NssolPlatypusApiModelsUserApiModelsIndexForAdminOutputModel> {
            return localVarFp.apiV2AdminUsersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定したユーザのパスワードを変更する
         * @param {number} id 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminUsersIdPasswordPut(id: number, body?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2AdminUsersIdPasswordPut(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定したユーザを編集する
         * @param {number} id 
         * @param {NssolPlatypusApiModelsUserApiModelsEditInputModel} [nssolPlatypusApiModelsUserApiModelsEditInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminUsersIdPut(id: number, nssolPlatypusApiModelsUserApiModelsEditInputModel?: NssolPlatypusApiModelsUserApiModelsEditInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsUserApiModelsIndexForAdminOutputModel> {
            return localVarFp.apiV2AdminUsersIdPut(id, nssolPlatypusApiModelsUserApiModelsEditInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ユーザをローカルアカウントとして新規追加する
         * @param {NssolPlatypusApiModelsUserApiModelsCreateInputModel} [nssolPlatypusApiModelsUserApiModelsCreateInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminUsersPost(nssolPlatypusApiModelsUserApiModelsCreateInputModel?: NssolPlatypusApiModelsUserApiModelsCreateInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsUserApiModelsIndexForAdminOutputModel> {
            return localVarFp.apiV2AdminUsersPost(nssolPlatypusApiModelsUserApiModelsCreateInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary LDAPサーバに問い合わせを行い、各ユーザの権限を更新する
         * @param {NssolPlatypusApiModelsUserApiModelsLdapAuthenticationInputModel} [nssolPlatypusApiModelsUserApiModelsLdapAuthenticationInputModel] LDAP認証情報入力モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminUsersSyncLdapPost(nssolPlatypusApiModelsUserApiModelsLdapAuthenticationInputModel?: NssolPlatypusApiModelsUserApiModelsLdapAuthenticationInputModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2AdminUsersSyncLdapPost(nssolPlatypusApiModelsUserApiModelsLdapAuthenticationInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary テナント向けに、所属しているユーザの一覧を取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantUsersGet(options?: any): AxiosPromise<Array<NssolPlatypusApiModelsUserApiModelsIndexForTenantOutputModel>> {
            return localVarFp.apiV2TenantUsersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定したユーザを接続中のテナントから削除する
         * @param {number} id ユーザID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantUsersIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2TenantUsersIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary テナント向けに指定したユーザの情報を取得する。
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantUsersIdGet(id: number, options?: any): AxiosPromise<NssolPlatypusApiModelsUserApiModelsIndexForTenantOutputModel> {
            return localVarFp.apiV2TenantUsersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定したユーザについての接続中のテナントに対するロール情報を編集する
         * @param {number} id ユーザID
         * @param {Array<number>} [requestBody] 登録するロールID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2TenantUsersIdRolesPut(id: number, requestBody?: Array<number>, options?: any): AxiosPromise<NssolPlatypusApiModelsUserApiModelsIndexForAdminOutputModel> {
            return localVarFp.apiV2TenantUsersIdRolesPut(id, requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV2AdminUsersIdDelete operation in UserApi.
 * @export
 * @interface UserApiApiV2AdminUsersIdDeleteRequest
 */
export interface UserApiApiV2AdminUsersIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof UserApiApiV2AdminUsersIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiV2AdminUsersIdDisplayNamePut operation in UserApi.
 * @export
 * @interface UserApiApiV2AdminUsersIdDisplayNamePutRequest
 */
export interface UserApiApiV2AdminUsersIdDisplayNamePutRequest {
    /**
     * 
     * @type {number}
     * @memberof UserApiApiV2AdminUsersIdDisplayNamePut
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof UserApiApiV2AdminUsersIdDisplayNamePut
     */
    readonly body?: string
}

/**
 * Request parameters for apiV2AdminUsersIdGet operation in UserApi.
 * @export
 * @interface UserApiApiV2AdminUsersIdGetRequest
 */
export interface UserApiApiV2AdminUsersIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof UserApiApiV2AdminUsersIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV2AdminUsersIdPasswordPut operation in UserApi.
 * @export
 * @interface UserApiApiV2AdminUsersIdPasswordPutRequest
 */
export interface UserApiApiV2AdminUsersIdPasswordPutRequest {
    /**
     * 
     * @type {number}
     * @memberof UserApiApiV2AdminUsersIdPasswordPut
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof UserApiApiV2AdminUsersIdPasswordPut
     */
    readonly body?: string
}

/**
 * Request parameters for apiV2AdminUsersIdPut operation in UserApi.
 * @export
 * @interface UserApiApiV2AdminUsersIdPutRequest
 */
export interface UserApiApiV2AdminUsersIdPutRequest {
    /**
     * 
     * @type {number}
     * @memberof UserApiApiV2AdminUsersIdPut
     */
    readonly id: number

    /**
     * 
     * @type {NssolPlatypusApiModelsUserApiModelsEditInputModel}
     * @memberof UserApiApiV2AdminUsersIdPut
     */
    readonly nssolPlatypusApiModelsUserApiModelsEditInputModel?: NssolPlatypusApiModelsUserApiModelsEditInputModel
}

/**
 * Request parameters for apiV2AdminUsersPost operation in UserApi.
 * @export
 * @interface UserApiApiV2AdminUsersPostRequest
 */
export interface UserApiApiV2AdminUsersPostRequest {
    /**
     * 
     * @type {NssolPlatypusApiModelsUserApiModelsCreateInputModel}
     * @memberof UserApiApiV2AdminUsersPost
     */
    readonly nssolPlatypusApiModelsUserApiModelsCreateInputModel?: NssolPlatypusApiModelsUserApiModelsCreateInputModel
}

/**
 * Request parameters for apiV2AdminUsersSyncLdapPost operation in UserApi.
 * @export
 * @interface UserApiApiV2AdminUsersSyncLdapPostRequest
 */
export interface UserApiApiV2AdminUsersSyncLdapPostRequest {
    /**
     * LDAP認証情報入力モデル
     * @type {NssolPlatypusApiModelsUserApiModelsLdapAuthenticationInputModel}
     * @memberof UserApiApiV2AdminUsersSyncLdapPost
     */
    readonly nssolPlatypusApiModelsUserApiModelsLdapAuthenticationInputModel?: NssolPlatypusApiModelsUserApiModelsLdapAuthenticationInputModel
}

/**
 * Request parameters for apiV2TenantUsersIdDelete operation in UserApi.
 * @export
 * @interface UserApiApiV2TenantUsersIdDeleteRequest
 */
export interface UserApiApiV2TenantUsersIdDeleteRequest {
    /**
     * ユーザID
     * @type {number}
     * @memberof UserApiApiV2TenantUsersIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiV2TenantUsersIdGet operation in UserApi.
 * @export
 * @interface UserApiApiV2TenantUsersIdGetRequest
 */
export interface UserApiApiV2TenantUsersIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof UserApiApiV2TenantUsersIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV2TenantUsersIdRolesPut operation in UserApi.
 * @export
 * @interface UserApiApiV2TenantUsersIdRolesPutRequest
 */
export interface UserApiApiV2TenantUsersIdRolesPutRequest {
    /**
     * ユーザID
     * @type {number}
     * @memberof UserApiApiV2TenantUsersIdRolesPut
     */
    readonly id: number

    /**
     * 登録するロールID
     * @type {Array<number>}
     * @memberof UserApiApiV2TenantUsersIdRolesPut
     */
    readonly requestBody?: Array<number>
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary 管理者向けにユーザの一覧を取得する。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV2AdminUsersGet(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiV2AdminUsersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定したユーザを削除する
     * @param {UserApiApiV2AdminUsersIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV2AdminUsersIdDelete(requestParameters: UserApiApiV2AdminUsersIdDeleteRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiV2AdminUsersIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定したユーザの表示名を変更する
     * @param {UserApiApiV2AdminUsersIdDisplayNamePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV2AdminUsersIdDisplayNamePut(requestParameters: UserApiApiV2AdminUsersIdDisplayNamePutRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiV2AdminUsersIdDisplayNamePut(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 管理者向けに指定したユーザの情報を取得する。
     * @param {UserApiApiV2AdminUsersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV2AdminUsersIdGet(requestParameters: UserApiApiV2AdminUsersIdGetRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiV2AdminUsersIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定したユーザのパスワードを変更する
     * @param {UserApiApiV2AdminUsersIdPasswordPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV2AdminUsersIdPasswordPut(requestParameters: UserApiApiV2AdminUsersIdPasswordPutRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiV2AdminUsersIdPasswordPut(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定したユーザを編集する
     * @param {UserApiApiV2AdminUsersIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV2AdminUsersIdPut(requestParameters: UserApiApiV2AdminUsersIdPutRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiV2AdminUsersIdPut(requestParameters.id, requestParameters.nssolPlatypusApiModelsUserApiModelsEditInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ユーザをローカルアカウントとして新規追加する
     * @param {UserApiApiV2AdminUsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV2AdminUsersPost(requestParameters: UserApiApiV2AdminUsersPostRequest = {}, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiV2AdminUsersPost(requestParameters.nssolPlatypusApiModelsUserApiModelsCreateInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary LDAPサーバに問い合わせを行い、各ユーザの権限を更新する
     * @param {UserApiApiV2AdminUsersSyncLdapPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV2AdminUsersSyncLdapPost(requestParameters: UserApiApiV2AdminUsersSyncLdapPostRequest = {}, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiV2AdminUsersSyncLdapPost(requestParameters.nssolPlatypusApiModelsUserApiModelsLdapAuthenticationInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary テナント向けに、所属しているユーザの一覧を取得する。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV2TenantUsersGet(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiV2TenantUsersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定したユーザを接続中のテナントから削除する
     * @param {UserApiApiV2TenantUsersIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV2TenantUsersIdDelete(requestParameters: UserApiApiV2TenantUsersIdDeleteRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiV2TenantUsersIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary テナント向けに指定したユーザの情報を取得する。
     * @param {UserApiApiV2TenantUsersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV2TenantUsersIdGet(requestParameters: UserApiApiV2TenantUsersIdGetRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiV2TenantUsersIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定したユーザについての接続中のテナントに対するロール情報を編集する
     * @param {UserApiApiV2TenantUsersIdRolesPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV2TenantUsersIdRolesPut(requestParameters: UserApiApiV2TenantUsersIdRolesPutRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiV2TenantUsersIdRolesPut(requestParameters.id, requestParameters.requestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserGroupApi - axios parameter creator
 * @export
 */
export const UserGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ユーザグループ一覧を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminUsergroupGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/usergroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ユーザグループを削除する
         * @param {number} id ユーザグループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminUsergroupIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminUsergroupIdDelete', 'id', id)
            const localVarPath = `/api/v2/admin/usergroup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定されたIDのユーザグループ情報を取得する
         * @param {number} id ユーザグループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminUsergroupIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminUsergroupIdGet', 'id', id)
            const localVarPath = `/api/v2/admin/usergroup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 既存のユーザグループを編集する
         * @param {number} id ユーザグループID
         * @param {NssolPlatypusApiModelsUserGroupApiModelsCreateInputModel} [nssolPlatypusApiModelsUserGroupApiModelsCreateInputModel] ユーザグループ入力モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminUsergroupIdPut: async (id: number, nssolPlatypusApiModelsUserGroupApiModelsCreateInputModel?: NssolPlatypusApiModelsUserGroupApiModelsCreateInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2AdminUsergroupIdPut', 'id', id)
            const localVarPath = `/api/v2/admin/usergroup/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsUserGroupApiModelsCreateInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新規にユーザグループを登録する
         * @param {NssolPlatypusApiModelsUserGroupApiModelsCreateInputModel} [nssolPlatypusApiModelsUserGroupApiModelsCreateInputModel] ユーザグループ入力モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminUsergroupPost: async (nssolPlatypusApiModelsUserGroupApiModelsCreateInputModel?: NssolPlatypusApiModelsUserGroupApiModelsCreateInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/usergroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nssolPlatypusApiModelsUserGroupApiModelsCreateInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserGroupApi - functional programming interface
 * @export
 */
export const UserGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary ユーザグループ一覧を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminUsergroupGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NssolPlatypusApiModelsUserGroupApiModelsIndexOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminUsergroupGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ユーザグループを削除する
         * @param {number} id ユーザグループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminUsergroupIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminUsergroupIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定されたIDのユーザグループ情報を取得する
         * @param {number} id ユーザグループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminUsergroupIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsUserGroupApiModelsDetailsOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminUsergroupIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 既存のユーザグループを編集する
         * @param {number} id ユーザグループID
         * @param {NssolPlatypusApiModelsUserGroupApiModelsCreateInputModel} [nssolPlatypusApiModelsUserGroupApiModelsCreateInputModel] ユーザグループ入力モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminUsergroupIdPut(id: number, nssolPlatypusApiModelsUserGroupApiModelsCreateInputModel?: NssolPlatypusApiModelsUserGroupApiModelsCreateInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsUserGroupApiModelsDetailsOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminUsergroupIdPut(id, nssolPlatypusApiModelsUserGroupApiModelsCreateInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新規にユーザグループを登録する
         * @param {NssolPlatypusApiModelsUserGroupApiModelsCreateInputModel} [nssolPlatypusApiModelsUserGroupApiModelsCreateInputModel] ユーザグループ入力モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AdminUsergroupPost(nssolPlatypusApiModelsUserGroupApiModelsCreateInputModel?: NssolPlatypusApiModelsUserGroupApiModelsCreateInputModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsUserGroupApiModelsDetailsOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AdminUsergroupPost(nssolPlatypusApiModelsUserGroupApiModelsCreateInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserGroupApi - factory interface
 * @export
 */
export const UserGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserGroupApiFp(configuration)
    return {
        /**
         * 
         * @summary ユーザグループ一覧を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminUsergroupGet(options?: any): AxiosPromise<Array<NssolPlatypusApiModelsUserGroupApiModelsIndexOutputModel>> {
            return localVarFp.apiV2AdminUsergroupGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ユーザグループを削除する
         * @param {number} id ユーザグループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminUsergroupIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiV2AdminUsergroupIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定されたIDのユーザグループ情報を取得する
         * @param {number} id ユーザグループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminUsergroupIdGet(id: number, options?: any): AxiosPromise<NssolPlatypusApiModelsUserGroupApiModelsDetailsOutputModel> {
            return localVarFp.apiV2AdminUsergroupIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 既存のユーザグループを編集する
         * @param {number} id ユーザグループID
         * @param {NssolPlatypusApiModelsUserGroupApiModelsCreateInputModel} [nssolPlatypusApiModelsUserGroupApiModelsCreateInputModel] ユーザグループ入力モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminUsergroupIdPut(id: number, nssolPlatypusApiModelsUserGroupApiModelsCreateInputModel?: NssolPlatypusApiModelsUserGroupApiModelsCreateInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsUserGroupApiModelsDetailsOutputModel> {
            return localVarFp.apiV2AdminUsergroupIdPut(id, nssolPlatypusApiModelsUserGroupApiModelsCreateInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新規にユーザグループを登録する
         * @param {NssolPlatypusApiModelsUserGroupApiModelsCreateInputModel} [nssolPlatypusApiModelsUserGroupApiModelsCreateInputModel] ユーザグループ入力モデル
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AdminUsergroupPost(nssolPlatypusApiModelsUserGroupApiModelsCreateInputModel?: NssolPlatypusApiModelsUserGroupApiModelsCreateInputModel, options?: any): AxiosPromise<NssolPlatypusApiModelsUserGroupApiModelsDetailsOutputModel> {
            return localVarFp.apiV2AdminUsergroupPost(nssolPlatypusApiModelsUserGroupApiModelsCreateInputModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV2AdminUsergroupIdDelete operation in UserGroupApi.
 * @export
 * @interface UserGroupApiApiV2AdminUsergroupIdDeleteRequest
 */
export interface UserGroupApiApiV2AdminUsergroupIdDeleteRequest {
    /**
     * ユーザグループID
     * @type {number}
     * @memberof UserGroupApiApiV2AdminUsergroupIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiV2AdminUsergroupIdGet operation in UserGroupApi.
 * @export
 * @interface UserGroupApiApiV2AdminUsergroupIdGetRequest
 */
export interface UserGroupApiApiV2AdminUsergroupIdGetRequest {
    /**
     * ユーザグループID
     * @type {number}
     * @memberof UserGroupApiApiV2AdminUsergroupIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV2AdminUsergroupIdPut operation in UserGroupApi.
 * @export
 * @interface UserGroupApiApiV2AdminUsergroupIdPutRequest
 */
export interface UserGroupApiApiV2AdminUsergroupIdPutRequest {
    /**
     * ユーザグループID
     * @type {number}
     * @memberof UserGroupApiApiV2AdminUsergroupIdPut
     */
    readonly id: number

    /**
     * ユーザグループ入力モデル
     * @type {NssolPlatypusApiModelsUserGroupApiModelsCreateInputModel}
     * @memberof UserGroupApiApiV2AdminUsergroupIdPut
     */
    readonly nssolPlatypusApiModelsUserGroupApiModelsCreateInputModel?: NssolPlatypusApiModelsUserGroupApiModelsCreateInputModel
}

/**
 * Request parameters for apiV2AdminUsergroupPost operation in UserGroupApi.
 * @export
 * @interface UserGroupApiApiV2AdminUsergroupPostRequest
 */
export interface UserGroupApiApiV2AdminUsergroupPostRequest {
    /**
     * ユーザグループ入力モデル
     * @type {NssolPlatypusApiModelsUserGroupApiModelsCreateInputModel}
     * @memberof UserGroupApiApiV2AdminUsergroupPost
     */
    readonly nssolPlatypusApiModelsUserGroupApiModelsCreateInputModel?: NssolPlatypusApiModelsUserGroupApiModelsCreateInputModel
}

/**
 * UserGroupApi - object-oriented interface
 * @export
 * @class UserGroupApi
 * @extends {BaseAPI}
 */
export class UserGroupApi extends BaseAPI {
    /**
     * 
     * @summary ユーザグループ一覧を取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    public apiV2AdminUsergroupGet(options?: AxiosRequestConfig) {
        return UserGroupApiFp(this.configuration).apiV2AdminUsergroupGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ユーザグループを削除する
     * @param {UserGroupApiApiV2AdminUsergroupIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    public apiV2AdminUsergroupIdDelete(requestParameters: UserGroupApiApiV2AdminUsergroupIdDeleteRequest, options?: AxiosRequestConfig) {
        return UserGroupApiFp(this.configuration).apiV2AdminUsergroupIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定されたIDのユーザグループ情報を取得する
     * @param {UserGroupApiApiV2AdminUsergroupIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    public apiV2AdminUsergroupIdGet(requestParameters: UserGroupApiApiV2AdminUsergroupIdGetRequest, options?: AxiosRequestConfig) {
        return UserGroupApiFp(this.configuration).apiV2AdminUsergroupIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 既存のユーザグループを編集する
     * @param {UserGroupApiApiV2AdminUsergroupIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    public apiV2AdminUsergroupIdPut(requestParameters: UserGroupApiApiV2AdminUsergroupIdPutRequest, options?: AxiosRequestConfig) {
        return UserGroupApiFp(this.configuration).apiV2AdminUsergroupIdPut(requestParameters.id, requestParameters.nssolPlatypusApiModelsUserGroupApiModelsCreateInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新規にユーザグループを登録する
     * @param {UserGroupApiApiV2AdminUsergroupPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    public apiV2AdminUsergroupPost(requestParameters: UserGroupApiApiV2AdminUsergroupPostRequest = {}, options?: AxiosRequestConfig) {
        return UserGroupApiFp(this.configuration).apiV2AdminUsergroupPost(requestParameters.nssolPlatypusApiModelsUserGroupApiModelsCreateInputModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * VersionApi - axios parameter creator
 * @export
 */
export const VersionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary バージョン情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VersionGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/version`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VersionApi - functional programming interface
 * @export
 */
export const VersionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VersionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary バージョン情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2VersionGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NssolPlatypusApiModelsVersionApiModelsVersionOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2VersionGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VersionApi - factory interface
 * @export
 */
export const VersionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VersionApiFp(configuration)
    return {
        /**
         * 
         * @summary バージョン情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2VersionGet(options?: any): AxiosPromise<NssolPlatypusApiModelsVersionApiModelsVersionOutputModel> {
            return localVarFp.apiV2VersionGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VersionApi - object-oriented interface
 * @export
 * @class VersionApi
 * @extends {BaseAPI}
 */
export class VersionApi extends BaseAPI {
    /**
     * 
     * @summary バージョン情報を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionApi
     */
    public apiV2VersionGet(options?: AxiosRequestConfig) {
        return VersionApiFp(this.configuration).apiV2VersionGet(options).then((request) => request(this.axios, this.basePath));
    }
}


