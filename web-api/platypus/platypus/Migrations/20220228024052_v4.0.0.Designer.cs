// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Nssol.Platypus.DataAccess;

namespace Nssol.Platypus.Migrations
{
    [DbContext(typeof(CommonDbContext))]
    [Migration("20220228024052_v4.0.0")]
    partial class v400
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Nssol.Platypus.Models.Git", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ApiUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsNotEditable")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RepositoryUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ServiceType")
                        .HasColumnType("integer");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Gits");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.MenuRoleMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MenuCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("MenuCode", "RoleId")
                        .IsUnique();

                    b.ToTable("MenuRoleMaps");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.Node", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("NotebookEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Partition")
                        .HasColumnType("text");

                    b.Property<bool>("TensorBoardEnabled")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.NodeTenantMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("NodeId")
                        .HasColumnType("bigint");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("NodeId", "TenantId")
                        .IsUnique();

                    b.ToTable("NodeTenantMaps");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.Registry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ApiUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsNotEditable")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("PortNo")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<string>("RegistryUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ServiceType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Registries");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.ResourceContainer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Cpu")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gpu")
                        .HasColumnType("integer");

                    b.Property<int>("Memory")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("NodeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("ResourceContainers");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.ResourceJob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ContainerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Cpu")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gpu")
                        .HasColumnType("integer");

                    b.Property<DateTime>("JobCompletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("JobCreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("JobStartedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Memory")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NodeCpu")
                        .HasColumnType("integer");

                    b.Property<int>("NodeGpu")
                        .HasColumnType("integer");

                    b.Property<int>("NodeMemory")
                        .HasColumnType("integer");

                    b.Property<string>("NodeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenantName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ResourceJobs");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.ResourceNode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Cpu")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gpu")
                        .HasColumnType("integer");

                    b.Property<int>("Memory")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SampleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SampleId");

                    b.ToTable("ResourceNodes");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.ResourceSample", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SampledAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("ResourceSamples");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsNotEditable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemRole")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<long?>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ApiSecurityTokenPass")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EnsureSingleRow")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApiSecurityTokenPass")
                        .IsUnique();

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.Storage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccessKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NfsRoot")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NfsServer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ServerAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.Template", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CreaterTenantId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreaterUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("LatestVersion")
                        .HasColumnType("bigint");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreaterTenantId");

                    b.HasIndex("CreaterUserId");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TemplateVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EvaluationContainerImage")
                        .HasColumnType("text");

                    b.Property<long?>("EvaluationContainerRegistryId")
                        .HasColumnType("bigint");

                    b.Property<string>("EvaluationContainerTag")
                        .HasColumnType("text");

                    b.Property<string>("EvaluationContainerToken")
                        .HasColumnType("text");

                    b.Property<int>("EvaluationCpu")
                        .HasColumnType("integer");

                    b.Property<string>("EvaluationEntryPoint")
                        .HasColumnType("text");

                    b.Property<int>("EvaluationGpu")
                        .HasColumnType("integer");

                    b.Property<int>("EvaluationMemory")
                        .HasColumnType("integer");

                    b.Property<string>("EvaluationRepositoryBranch")
                        .HasColumnType("text");

                    b.Property<string>("EvaluationRepositoryCommitId")
                        .HasColumnType("text");

                    b.Property<long?>("EvaluationRepositoryGitId")
                        .HasColumnType("bigint");

                    b.Property<string>("EvaluationRepositoryName")
                        .HasColumnType("text");

                    b.Property<string>("EvaluationRepositoryOwner")
                        .HasColumnType("text");

                    b.Property<string>("EvaluationRepositoryToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreprocessContainerImage")
                        .HasColumnType("text");

                    b.Property<long?>("PreprocessContainerRegistryId")
                        .HasColumnType("bigint");

                    b.Property<string>("PreprocessContainerTag")
                        .HasColumnType("text");

                    b.Property<string>("PreprocessContainerToken")
                        .HasColumnType("text");

                    b.Property<int>("PreprocessCpu")
                        .HasColumnType("integer");

                    b.Property<string>("PreprocessEntryPoint")
                        .HasColumnType("text");

                    b.Property<int>("PreprocessGpu")
                        .HasColumnType("integer");

                    b.Property<int>("PreprocessMemory")
                        .HasColumnType("integer");

                    b.Property<string>("PreprocessRepositoryBranch")
                        .HasColumnType("text");

                    b.Property<string>("PreprocessRepositoryCommitId")
                        .HasColumnType("text");

                    b.Property<long?>("PreprocessRepositoryGitId")
                        .HasColumnType("bigint");

                    b.Property<string>("PreprocessRepositoryName")
                        .HasColumnType("text");

                    b.Property<string>("PreprocessRepositoryOwner")
                        .HasColumnType("text");

                    b.Property<string>("PreprocessRepositoryToken")
                        .HasColumnType("text");

                    b.Property<long>("TemplateId")
                        .HasColumnType("bigint");

                    b.Property<string>("TrainingContainerImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TrainingContainerRegistryId")
                        .HasColumnType("bigint");

                    b.Property<string>("TrainingContainerTag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrainingContainerToken")
                        .HasColumnType("text");

                    b.Property<int>("TrainingCpu")
                        .HasColumnType("integer");

                    b.Property<string>("TrainingEntryPoint")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TrainingGpu")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingMemory")
                        .HasColumnType("integer");

                    b.Property<string>("TrainingRepositoryBranch")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrainingRepositoryCommitId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TrainingRepositoryGitId")
                        .HasColumnType("bigint");

                    b.Property<string>("TrainingRepositoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrainingRepositoryOwner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrainingRepositoryToken")
                        .HasColumnType("text");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationContainerRegistryId");

                    b.HasIndex("EvaluationRepositoryGitId");

                    b.HasIndex("PreprocessContainerRegistryId");

                    b.HasIndex("PreprocessRepositoryGitId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("TrainingContainerRegistryId");

                    b.HasIndex("TrainingRepositoryGitId");

                    b.ToTable("TemplateVersions");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.Tenant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("AvailableInfiniteTimeNotebook")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("DefaultGitId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("DefaultRegistryId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("LimitCpu")
                        .HasColumnType("integer");

                    b.Property<int?>("LimitGpu")
                        .HasColumnType("integer");

                    b.Property<int?>("LimitMemory")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("StorageBucket")
                        .HasColumnType("text");

                    b.Property<long?>("StorageId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DefaultGitId");

                    b.HasIndex("DefaultRegistryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("StorageId");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantGitMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("GitId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GitId");

                    b.HasIndex("TenantId", "GitId")
                        .IsUnique();

                    b.ToTable("TenantGitMaps");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.Aquarium.DataSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("LatestVersion")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AquariumDatasets");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.Aquarium.DataSetVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AquariumDataSetId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("DataSetId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AquariumDataSetId");

                    b.HasIndex("DataSetId");

                    b.HasIndex("TenantId");

                    b.ToTable("AquariumDatasetVersions");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.Aquarium.Evaluation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("DataSetId")
                        .HasColumnType("bigint");

                    b.Property<long>("DataSetVersionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ExperimentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TrainingHistoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DataSetId");

                    b.HasIndex("DataSetVersionId");

                    b.HasIndex("ExperimentId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TrainingHistoryId");

                    b.ToTable("AquariumEvaluations");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.Data", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("DisplayId")
                        .HasColumnType("bigint");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ParentDataId")
                        .HasColumnType("bigint");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentDataId");

                    b.HasIndex("TenantId");

                    b.ToTable("Data");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.DataFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StoredPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("DataFiles");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.DataProperty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("DataFileId")
                        .HasColumnType("bigint");

                    b.Property<long>("DataId")
                        .HasColumnType("bigint");

                    b.Property<string>("DataString")
                        .HasColumnType("text");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DataFileId");

                    b.HasIndex("DataId");

                    b.HasIndex("TenantId");

                    b.ToTable("DataProperties");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.DataSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("DisplayId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsFlat")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("DataSets");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.DataSetEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("DataId")
                        .HasColumnType("bigint");

                    b.Property<long>("DataSetId")
                        .HasColumnType("bigint");

                    b.Property<long>("DataTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DataId");

                    b.HasIndex("DataSetId");

                    b.HasIndex("DataTypeId");

                    b.HasIndex("TenantId");

                    b.ToTable("DataSetEntries");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.DataTagMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("DataId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DataId");

                    b.HasIndex("TagId");

                    b.HasIndex("TenantId");

                    b.ToTable("DataTagMaps");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.DataType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("DataTypes");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.Experiment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("DataSetId")
                        .HasColumnType("bigint");

                    b.Property<long>("DataSetVersionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ExperimentPreprocessId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TemplateId")
                        .HasColumnType("bigint");

                    b.Property<long>("TemplateVersionId")
                        .HasColumnType("bigint");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TrainingHistoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DataSetId");

                    b.HasIndex("DataSetVersionId");

                    b.HasIndex("ExperimentPreprocessId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("TemplateVersionId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TrainingHistoryId");

                    b.ToTable("Experiments");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.ExperimentPreprocess", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("DataSetId")
                        .HasColumnType("bigint");

                    b.Property<long>("DataSetVersionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TemplateId")
                        .HasColumnType("bigint");

                    b.Property<long>("TemplateVersionId")
                        .HasColumnType("bigint");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.Property<long>("TrainingHistoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DataSetId");

                    b.HasIndex("DataSetVersionId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("TemplateVersionId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TrainingHistoryId");

                    b.ToTable("ExperimentPreprocesses");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.InferenceHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Configuration")
                        .HasColumnType("text");

                    b.Property<string>("ContainerImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ContainerRegistryId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("ContainerTag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Cpu")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("DataSetId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DisplayId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntryPoint")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Favorite")
                        .HasColumnType("boolean");

                    b.Property<int>("Gpu")
                        .HasColumnType("integer");

                    b.Property<bool>("LocalDataSet")
                        .HasColumnType("boolean");

                    b.Property<string>("LogSummary")
                        .HasColumnType("text");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<int>("Memory")
                        .HasColumnType("integer");

                    b.Property<string>("ModelBranch")
                        .HasColumnType("text");

                    b.Property<string>("ModelCommitId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ModelGitId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("ModelRepository")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModelRepositoryOwner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Node")
                        .HasColumnType("text");

                    b.Property<string>("Options")
                        .HasColumnType("text");

                    b.Property<string>("Partition")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Zip")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ContainerRegistryId");

                    b.HasIndex("DataSetId");

                    b.HasIndex("TenantId");

                    b.ToTable("InferenceHistories");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.InferenceHistoryAttachedFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("InferenceHistoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StoredPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InferenceHistoryId");

                    b.HasIndex("TenantId");

                    b.ToTable("InferenceHistoryAttachedFiles");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.InferenceHistoryParentInferenceMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("InferenceHistoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InferenceHistoryId");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "InferenceHistoryId", "ParentId")
                        .IsUnique();

                    b.ToTable("InferenceHistoryParentInferenceMaps");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.InferenceHistoryParentMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("InferenceHistoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InferenceHistoryId");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "InferenceHistoryId", "ParentId")
                        .IsUnique();

                    b.ToTable("InferenceHistoryParentMaps");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.NotebookHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Configuration")
                        .HasColumnType("text");

                    b.Property<string>("ContainerImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ContainerRegistryId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContainerTag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Cpu")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("DataSetId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DisplayId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntryPoint")
                        .HasColumnType("text");

                    b.Property<int?>("ExpiresIn")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<bool>("Favorite")
                        .HasColumnType("boolean");

                    b.Property<int>("Gpu")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("JobStartedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("JupyterLabVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LocalDataSet")
                        .HasColumnType("boolean");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<int>("Memory")
                        .HasColumnType("integer");

                    b.Property<string>("ModelBranch")
                        .HasColumnType("text");

                    b.Property<string>("ModelCommitId")
                        .HasColumnType("text");

                    b.Property<long?>("ModelGitId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModelRepository")
                        .HasColumnType("text");

                    b.Property<string>("ModelRepositoryOwner")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Node")
                        .HasColumnType("text");

                    b.Property<string>("Options")
                        .HasColumnType("text");

                    b.Property<string>("Partition")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContainerRegistryId");

                    b.HasIndex("DataSetId");

                    b.HasIndex("TenantId");

                    b.ToTable("NotebookHistories");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.NotebookHistoryParentInferenceMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("NotebookHistoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NotebookHistoryId");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "NotebookHistoryId", "ParentId")
                        .IsUnique();

                    b.ToTable("NotebookHistoryParentInferenceMaps");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.NotebookHistoryParentTrainingMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("NotebookHistoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NotebookHistoryId");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "NotebookHistoryId", "ParentId")
                        .IsUnique();

                    b.ToTable("NotebookHistoryParentTrainingMaps");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.Preprocess", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ContainerImage")
                        .HasColumnType("text");

                    b.Property<long?>("ContainerRegistryId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContainerTag")
                        .HasColumnType("text");

                    b.Property<int>("Cpu")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("DisplayId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntryPoint")
                        .HasColumnType("text");

                    b.Property<int>("Gpu")
                        .HasColumnType("integer");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<int>("Memory")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RepositoryBranch")
                        .HasColumnType("text");

                    b.Property<string>("RepositoryCommitId")
                        .HasColumnType("text");

                    b.Property<long?>("RepositoryGitId")
                        .HasColumnType("bigint");

                    b.Property<string>("RepositoryName")
                        .HasColumnType("text");

                    b.Property<string>("RepositoryOwner")
                        .HasColumnType("text");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContainerRegistryId");

                    b.HasIndex("TenantId");

                    b.ToTable("Preprocesses");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.PreprocessHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ContainerIdentifier")
                        .HasColumnType("text");

                    b.Property<int?>("Cpu")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Gpu")
                        .HasColumnType("integer");

                    b.Property<long>("InputDataId")
                        .HasColumnType("bigint");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<int?>("Memory")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Options")
                        .HasColumnType("text");

                    b.Property<string>("Partition")
                        .HasColumnType("text");

                    b.Property<long?>("PreprocessId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InputDataId");

                    b.HasIndex("PreprocessId");

                    b.HasIndex("TenantId");

                    b.ToTable("PreprocessHistories");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.PreprocessHistoryOutput", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OutputDataId")
                        .HasColumnType("bigint");

                    b.Property<long>("PreprocessHistoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OutputDataId");

                    b.HasIndex("PreprocessHistoryId");

                    b.HasIndex("TenantId");

                    b.ToTable("PreprocessHistoryOutputs");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.TensorBoardContainer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ExpiresIn")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<string>("Host")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MountedTrainingHistoryIds")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PortNo")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.Property<long>("TrainingHistoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("TrainingHistoryId");

                    b.ToTable("TensorBoardContainers");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.TrainingHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Configuration")
                        .HasColumnType("text");

                    b.Property<string>("ContainerImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ContainerRegistryId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("ContainerTag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Cpu")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("DataSetId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DisplayId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntryPoint")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Favorite")
                        .HasColumnType("boolean");

                    b.Property<int>("Gpu")
                        .HasColumnType("integer");

                    b.Property<bool>("LocalDataSet")
                        .HasColumnType("boolean");

                    b.Property<string>("LogSummary")
                        .HasColumnType("text");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<int>("Memory")
                        .HasColumnType("integer");

                    b.Property<string>("ModelBranch")
                        .HasColumnType("text");

                    b.Property<string>("ModelCommitId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ModelGitId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModelRepository")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModelRepositoryOwner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Node")
                        .HasColumnType("text");

                    b.Property<string>("Options")
                        .HasColumnType("text");

                    b.Property<string>("Partition")
                        .HasColumnType("text");

                    b.Property<string>("Ports")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Zip")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ContainerRegistryId");

                    b.HasIndex("DataSetId");

                    b.HasIndex("TenantId");

                    b.ToTable("TrainingHistories");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.TrainingHistoryAttachedFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StoredPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.Property<long>("TrainingHistoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("TrainingHistoryId");

                    b.ToTable("TrainingHistoryAttachedFiles");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.TrainingHistoryParentMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.Property<long>("TrainingHistoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TrainingHistoryId");

                    b.HasIndex("TenantId", "TrainingHistoryId", "ParentId")
                        .IsUnique();

                    b.ToTable("TrainingHistoryParentMaps");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.TrainingHistoryTagMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.Property<long>("TrainingHistoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TrainingHistoryId");

                    b.ToTable("TrainingHistoryTagMaps");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.TrainingSearchHistories", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DataSet")
                        .HasColumnType("text");

                    b.Property<bool?>("DataSetOr")
                        .HasColumnType("boolean");

                    b.Property<string>("EntryPoint")
                        .HasColumnType("text");

                    b.Property<bool?>("EntryPointOr")
                        .HasColumnType("boolean");

                    b.Property<long?>("IdLower")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdUpper")
                        .HasColumnType("bigint");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<bool?>("MemoOr")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParentName")
                        .HasColumnType("text");

                    b.Property<bool?>("ParentNameOr")
                        .HasColumnType("boolean");

                    b.Property<string>("StartedAtLower")
                        .HasColumnType("text");

                    b.Property<string>("StartedAtUpper")
                        .HasColumnType("text");

                    b.Property<string>("StartedBy")
                        .HasColumnType("text");

                    b.Property<bool?>("StartedByOr")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<bool?>("StatusOr")
                        .HasColumnType("boolean");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.Property<bool?>("TagsOr")
                        .HasColumnType("boolean");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.Property<string>("TrainingName")
                        .HasColumnType("text");

                    b.Property<bool?>("TrainingNameOr")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("TrainingSearchHistories");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantRegistryMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RegistryId")
                        .HasColumnType("bigint");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RegistryId");

                    b.HasIndex("TenantId", "RegistryId")
                        .IsUnique();

                    b.ToTable("TenantRegistryMaps");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("DefaultTenantId")
                        .HasColumnType("bigint");

                    b.Property<string>("Mention")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("ServiceType")
                        .HasColumnType("integer");

                    b.Property<string>("SlackUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DefaultTenantId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.UserGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Dn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDirect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("boolean");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.UserGroupRoleMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserGroupId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserGroupRoleMaps");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.UserGroupTenantMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserGroupId", "TenantId")
                        .IsUnique();

                    b.ToTable("UserGroupTenantMaps");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.UserRoleMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsOrigin")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TenantMapId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserGroupTenantMapIds")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantMapId");

                    b.HasIndex("UserId", "RoleId", "TenantMapId")
                        .IsUnique();

                    b.ToTable("UserRoleMaps");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.UserTenantGitMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GitToken")
                        .HasColumnType("text");

                    b.Property<bool>("IsOrigin")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TenantGitMapId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserGroupTenantMapIds")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantGitMapId");

                    b.HasIndex("UserId", "TenantGitMapId")
                        .IsUnique();

                    b.ToTable("UserTenantGitMaps");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.UserTenantMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClusterToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsOrigin")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserGroupTenantMapIds")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId")
                        .IsUnique();

                    b.ToTable("UserTenantMaps");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.UserTenantRegistryMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsOrigin")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegistryPassword")
                        .HasColumnType("text");

                    b.Property<string>("RegistryUserName")
                        .HasColumnType("text");

                    b.Property<long>("TenantRegistryMapId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserGroupTenantMapIds")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantRegistryMapId");

                    b.HasIndex("UserId", "TenantRegistryMapId")
                        .IsUnique();

                    b.ToTable("UserTenantRegistryMaps");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.MenuRoleMap", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.NodeTenantMap", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Node", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.ResourceContainer", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.ResourceNode", "ResourceNode")
                        .WithMany("ResourceContainers")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.ResourceNode", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.ResourceSample", "ResourceSample")
                        .WithMany("ResourceNodes")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.Role", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nssol.Platypus.Models.Template", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "CreaterTenant")
                        .WithMany()
                        .HasForeignKey("CreaterTenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.User", "CreaterUser")
                        .WithMany()
                        .HasForeignKey("CreaterUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TemplateVersion", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Registry", "EvaluationContainerRegistry")
                        .WithMany()
                        .HasForeignKey("EvaluationContainerRegistryId");

                    b.HasOne("Nssol.Platypus.Models.Git", "EvaluationRepositoryGit")
                        .WithMany()
                        .HasForeignKey("EvaluationRepositoryGitId");

                    b.HasOne("Nssol.Platypus.Models.Registry", "PreprocessContainerRegistry")
                        .WithMany()
                        .HasForeignKey("PreprocessContainerRegistryId");

                    b.HasOne("Nssol.Platypus.Models.Git", "PreprocessRepositoryGit")
                        .WithMany()
                        .HasForeignKey("PreprocessRepositoryGitId");

                    b.HasOne("Nssol.Platypus.Models.Template", "Template")
                        .WithMany("TemplateVersions")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.Registry", "TrainingContainerRegistry")
                        .WithMany()
                        .HasForeignKey("TrainingContainerRegistryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.Git", "TrainingRepositoryGit")
                        .WithMany()
                        .HasForeignKey("TrainingRepositoryGitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.Tenant", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Git", "DefaultGit")
                        .WithMany()
                        .HasForeignKey("DefaultGitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.Registry", "DefaultRegistry")
                        .WithMany()
                        .HasForeignKey("DefaultRegistryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.Storage", "Storage")
                        .WithMany()
                        .HasForeignKey("StorageId");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantGitMap", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Git", "Git")
                        .WithMany()
                        .HasForeignKey("GitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany("GitMaps")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.Aquarium.DataSet", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.Aquarium.DataSetVersion", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.Aquarium.DataSet", "AquariumDataSet")
                        .WithMany("DataSetVersions")
                        .HasForeignKey("AquariumDataSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.TenantModels.DataSet", "DataSet")
                        .WithMany()
                        .HasForeignKey("DataSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.Aquarium.Evaluation", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.Aquarium.DataSet", "DataSet")
                        .WithMany()
                        .HasForeignKey("DataSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.TenantModels.Aquarium.DataSetVersion", "DataSetVersion")
                        .WithMany()
                        .HasForeignKey("DataSetVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.TenantModels.Experiment", "Experiment")
                        .WithMany()
                        .HasForeignKey("ExperimentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.TenantModels.TrainingHistory", "TrainingHistory")
                        .WithMany()
                        .HasForeignKey("TrainingHistoryId");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.Data", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.Data", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentDataId");

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.DataFile", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.DataProperty", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.DataFile", "DataFile")
                        .WithMany()
                        .HasForeignKey("DataFileId");

                    b.HasOne("Nssol.Platypus.Models.TenantModels.Data", "Data")
                        .WithMany("DataProperties")
                        .HasForeignKey("DataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.DataSet", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.DataSetEntry", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.Data", "Data")
                        .WithMany()
                        .HasForeignKey("DataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.TenantModels.DataSet", "DataSet")
                        .WithMany("DataSetEntries")
                        .HasForeignKey("DataSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.TenantModels.DataType", "DataType")
                        .WithMany()
                        .HasForeignKey("DataTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.DataTagMap", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.Data", "Data")
                        .WithMany("TagMaps")
                        .HasForeignKey("DataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.TenantModels.Tag", "Tag")
                        .WithMany("DataMaps")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.DataType", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.Experiment", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.Aquarium.DataSet", "DataSet")
                        .WithMany()
                        .HasForeignKey("DataSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.TenantModels.Aquarium.DataSetVersion", "DataSetVersion")
                        .WithMany()
                        .HasForeignKey("DataSetVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.TenantModels.ExperimentPreprocess", "ExperimentPreprocess")
                        .WithMany()
                        .HasForeignKey("ExperimentPreprocessId");

                    b.HasOne("Nssol.Platypus.Models.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.TemplateVersion", "TemplateVersion")
                        .WithMany()
                        .HasForeignKey("TemplateVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.TenantModels.TrainingHistory", "TrainingHistory")
                        .WithMany()
                        .HasForeignKey("TrainingHistoryId");
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.ExperimentPreprocess", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.Aquarium.DataSet", "DataSet")
                        .WithMany()
                        .HasForeignKey("DataSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.TenantModels.Aquarium.DataSetVersion", "DataSetVersion")
                        .WithMany()
                        .HasForeignKey("DataSetVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.TemplateVersion", "TemplateVersion")
                        .WithMany()
                        .HasForeignKey("TemplateVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.TenantModels.TrainingHistory", "TrainingHistory")
                        .WithMany()
                        .HasForeignKey("TrainingHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.InferenceHistory", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Registry", "ContainerRegistry")
                        .WithMany()
                        .HasForeignKey("ContainerRegistryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.TenantModels.DataSet", "DataSet")
                        .WithMany()
                        .HasForeignKey("DataSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.InferenceHistoryAttachedFile", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.InferenceHistory", "InferenceHistory")
                        .WithMany("InferenceHistoryAttachedFile")
                        .HasForeignKey("InferenceHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.InferenceHistoryParentInferenceMap", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.InferenceHistory", "InferenceHistory")
                        .WithMany("ParentInferenceMaps")
                        .HasForeignKey("InferenceHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.TenantModels.InferenceHistory", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.InferenceHistoryParentMap", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.InferenceHistory", "InferenceHistory")
                        .WithMany("ParentMaps")
                        .HasForeignKey("InferenceHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.TenantModels.TrainingHistory", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.NotebookHistory", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Registry", "ContainerRegistry")
                        .WithMany()
                        .HasForeignKey("ContainerRegistryId");

                    b.HasOne("Nssol.Platypus.Models.TenantModels.DataSet", "DataSet")
                        .WithMany()
                        .HasForeignKey("DataSetId");

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.NotebookHistoryParentInferenceMap", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.NotebookHistory", "NotebookHistory")
                        .WithMany("ParentInferenceMaps")
                        .HasForeignKey("NotebookHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.TenantModels.InferenceHistory", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.NotebookHistoryParentTrainingMap", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.NotebookHistory", "NotebookHistory")
                        .WithMany("ParentTrainingMaps")
                        .HasForeignKey("NotebookHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.TenantModels.TrainingHistory", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.Preprocess", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Registry", "ContainerRegistry")
                        .WithMany()
                        .HasForeignKey("ContainerRegistryId");

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.PreprocessHistory", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.Data", "InputData")
                        .WithMany()
                        .HasForeignKey("InputDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.TenantModels.Preprocess", "Preprocess")
                        .WithMany()
                        .HasForeignKey("PreprocessId");

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.PreprocessHistoryOutput", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.Data", "OutputData")
                        .WithMany()
                        .HasForeignKey("OutputDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.TenantModels.PreprocessHistory", "PreprocessHistory")
                        .WithMany("PreprocessHistoryOutputs")
                        .HasForeignKey("PreprocessHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.Tag", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.TensorBoardContainer", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.TenantModels.TrainingHistory", "TrainingHistory")
                        .WithMany()
                        .HasForeignKey("TrainingHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.TrainingHistory", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Registry", "ContainerRegistry")
                        .WithMany()
                        .HasForeignKey("ContainerRegistryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.TenantModels.DataSet", "DataSet")
                        .WithMany()
                        .HasForeignKey("DataSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.TrainingHistoryAttachedFile", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.TenantModels.TrainingHistory", "TrainingHistory")
                        .WithMany("TrainingHistoryAttachedFile")
                        .HasForeignKey("TrainingHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.TrainingHistoryParentMap", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.TrainingHistory", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.TenantModels.TrainingHistory", "TrainingHistory")
                        .WithMany("ParentMaps")
                        .HasForeignKey("TrainingHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.TrainingHistoryTagMap", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantModels.Tag", "Tag")
                        .WithMany("TrainingHistoryMaps")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.TenantModels.TrainingHistory", "TrainingHistory")
                        .WithMany("TagMaps")
                        .HasForeignKey("TrainingHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantModels.TrainingSearchHistories", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.TenantRegistryMap", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Registry", "Registry")
                        .WithMany()
                        .HasForeignKey("RegistryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany("RegistryMaps")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.User", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "DefaultTenant")
                        .WithMany()
                        .HasForeignKey("DefaultTenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.UserGroupRoleMap", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.UserGroup", "UserGroup")
                        .WithMany("RoleMaps")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.UserGroupTenantMap", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany("UserGroupMaps")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.UserRoleMap", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.UserTenantMap", "TenantMap")
                        .WithMany()
                        .HasForeignKey("TenantMapId");

                    b.HasOne("Nssol.Platypus.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.UserTenantGitMap", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantGitMap", "TenantGitMap")
                        .WithMany()
                        .HasForeignKey("TenantGitMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.UserTenantMap", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.User", "User")
                        .WithMany("TenantMaps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nssol.Platypus.Models.UserTenantRegistryMap", b =>
                {
                    b.HasOne("Nssol.Platypus.Models.TenantRegistryMap", "TenantRegistryMap")
                        .WithMany()
                        .HasForeignKey("TenantRegistryMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nssol.Platypus.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
