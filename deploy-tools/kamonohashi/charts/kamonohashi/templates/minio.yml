apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: kqi-system
spec:
  selector:
    matchLabels:
      app: minio 
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: minio
    spec:
      hostNetwork: true
      nodeSelector:
        kubernetes.io/hostname: {{ .Values.appsettings.DeployOptions__ObjectStorageNode }}
      volumes:
      - name: nfs-data
        nfs: 
          server: {{ .Values.appsettings.DeployOptions__NfsStorage }}
          path: {{ .Values.appsettings.DeployOptions__NfsPath }}
      containers:
      - name: minio
        resources:
          limits:
            cpu: {{ .Values.resources.minio.cpu }}
            memory: {{ .Values.resources.minio.memory }}
          requests:
            cpu: {{ .Values.resources.minio.cpu }}
            memory: {{ .Values.resources.minio.memory }}
        volumeMounts:
        - name: nfs-data
          mountPath: "/data"
        image: minio/minio:RELEASE.2020-03-09T18-26-53Z
        args:
        - gateway
        - nas
        - /data
        env:
        - name: MINIO_ACCESS_KEY
          value: {{.Values.appsettings.DeployOptions__ObjectStorageAccessKey}}
        envFrom:
        - secretRef:
            name: minio-credential
        ports:
        - containerPort: 9000
        # Readiness probe detects situations when MinIO server instance
        # is not ready to accept traffic. Kubernetes doesn't forward
        # traffic to the pod while readiness checks fail.
        readinessProbe:
          httpGet:
            path: /minio/health/ready
            port: 9000
          initialDelaySeconds: 120
          periodSeconds: 20
        # Liveness probe detects situations where MinIO server instance
        # is not working properly and needs restart. Kubernetes automatically
        # restarts the pods if liveness checks fail.
        livenessProbe:
          httpGet:
            path: /minio/health/live
            port: 9000
          initialDelaySeconds: 120
          periodSeconds: 20