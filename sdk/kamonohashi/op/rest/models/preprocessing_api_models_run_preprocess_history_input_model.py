# coding: utf-8

"""
    KAMONOHASHI API

    A platform for deep learning  # noqa: E501

    OpenAPI spec version: v2
    Contact: kamonohashi-support@jp.nssol.nipponsteel.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PreprocessingApiModelsRunPreprocessHistoryInputModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu': 'int',
        'data_id': 'int',
        'gpu': 'int',
        'memory': 'int',
        'options': 'dict(str, str)',
        'partition': 'str'
    }

    attribute_map = {
        'cpu': 'cpu',
        'data_id': 'dataId',
        'gpu': 'gpu',
        'memory': 'memory',
        'options': 'options',
        'partition': 'partition'
    }

    def __init__(self, cpu=None, data_id=None, gpu=None, memory=None, options=None, partition=None):  # noqa: E501
        """PreprocessingApiModelsRunPreprocessHistoryInputModel - a model defined in Swagger"""  # noqa: E501

        self._cpu = None
        self._data_id = None
        self._gpu = None
        self._memory = None
        self._options = None
        self._partition = None
        self.discriminator = None

        self.cpu = cpu
        self.data_id = data_id
        self.gpu = gpu
        self.memory = memory
        if options is not None:
            self.options = options
        if partition is not None:
            self.partition = partition

    @property
    def cpu(self):
        """Gets the cpu of this PreprocessingApiModelsRunPreprocessHistoryInputModel.  # noqa: E501


        :return: The cpu of this PreprocessingApiModelsRunPreprocessHistoryInputModel.  # noqa: E501
        :rtype: int
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this PreprocessingApiModelsRunPreprocessHistoryInputModel.


        :param cpu: The cpu of this PreprocessingApiModelsRunPreprocessHistoryInputModel.  # noqa: E501
        :type: int
        """
        if cpu is None:
            raise ValueError("Invalid value for `cpu`, must not be `None`")  # noqa: E501

        self._cpu = cpu

    @property
    def data_id(self):
        """Gets the data_id of this PreprocessingApiModelsRunPreprocessHistoryInputModel.  # noqa: E501


        :return: The data_id of this PreprocessingApiModelsRunPreprocessHistoryInputModel.  # noqa: E501
        :rtype: int
        """
        return self._data_id

    @data_id.setter
    def data_id(self, data_id):
        """Sets the data_id of this PreprocessingApiModelsRunPreprocessHistoryInputModel.


        :param data_id: The data_id of this PreprocessingApiModelsRunPreprocessHistoryInputModel.  # noqa: E501
        :type: int
        """
        if data_id is None:
            raise ValueError("Invalid value for `data_id`, must not be `None`")  # noqa: E501

        self._data_id = data_id

    @property
    def gpu(self):
        """Gets the gpu of this PreprocessingApiModelsRunPreprocessHistoryInputModel.  # noqa: E501


        :return: The gpu of this PreprocessingApiModelsRunPreprocessHistoryInputModel.  # noqa: E501
        :rtype: int
        """
        return self._gpu

    @gpu.setter
    def gpu(self, gpu):
        """Sets the gpu of this PreprocessingApiModelsRunPreprocessHistoryInputModel.


        :param gpu: The gpu of this PreprocessingApiModelsRunPreprocessHistoryInputModel.  # noqa: E501
        :type: int
        """
        if gpu is None:
            raise ValueError("Invalid value for `gpu`, must not be `None`")  # noqa: E501

        self._gpu = gpu

    @property
    def memory(self):
        """Gets the memory of this PreprocessingApiModelsRunPreprocessHistoryInputModel.  # noqa: E501


        :return: The memory of this PreprocessingApiModelsRunPreprocessHistoryInputModel.  # noqa: E501
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this PreprocessingApiModelsRunPreprocessHistoryInputModel.


        :param memory: The memory of this PreprocessingApiModelsRunPreprocessHistoryInputModel.  # noqa: E501
        :type: int
        """
        if memory is None:
            raise ValueError("Invalid value for `memory`, must not be `None`")  # noqa: E501

        self._memory = memory

    @property
    def options(self):
        """Gets the options of this PreprocessingApiModelsRunPreprocessHistoryInputModel.  # noqa: E501


        :return: The options of this PreprocessingApiModelsRunPreprocessHistoryInputModel.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this PreprocessingApiModelsRunPreprocessHistoryInputModel.


        :param options: The options of this PreprocessingApiModelsRunPreprocessHistoryInputModel.  # noqa: E501
        :type: dict(str, str)
        """

        self._options = options

    @property
    def partition(self):
        """Gets the partition of this PreprocessingApiModelsRunPreprocessHistoryInputModel.  # noqa: E501


        :return: The partition of this PreprocessingApiModelsRunPreprocessHistoryInputModel.  # noqa: E501
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this PreprocessingApiModelsRunPreprocessHistoryInputModel.


        :param partition: The partition of this PreprocessingApiModelsRunPreprocessHistoryInputModel.  # noqa: E501
        :type: str
        """

        self._partition = partition

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PreprocessingApiModelsRunPreprocessHistoryInputModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PreprocessingApiModelsRunPreprocessHistoryInputModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
