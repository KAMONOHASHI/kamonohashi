# coding: utf-8

"""
    KAMONOHASHI API

    A platform for deep learning  # noqa: E501

    OpenAPI spec version: v2
    Contact: kamonohashi-support@jp.nssol.nipponsteel.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StorageLogicModelsMultiPartUploadModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_name': 'str',
        'key': 'str',
        'parts_sum': 'int',
        'stored_path': 'str',
        'upload_id': 'str',
        'uris': 'list[str]'
    }

    attribute_map = {
        'file_name': 'fileName',
        'key': 'key',
        'parts_sum': 'partsSum',
        'stored_path': 'storedPath',
        'upload_id': 'uploadId',
        'uris': 'uris'
    }

    def __init__(self, file_name=None, key=None, parts_sum=None, stored_path=None, upload_id=None, uris=None):  # noqa: E501
        """StorageLogicModelsMultiPartUploadModel - a model defined in Swagger"""  # noqa: E501

        self._file_name = None
        self._key = None
        self._parts_sum = None
        self._stored_path = None
        self._upload_id = None
        self._uris = None
        self.discriminator = None

        if file_name is not None:
            self.file_name = file_name
        if key is not None:
            self.key = key
        if parts_sum is not None:
            self.parts_sum = parts_sum
        if stored_path is not None:
            self.stored_path = stored_path
        if upload_id is not None:
            self.upload_id = upload_id
        if uris is not None:
            self.uris = uris

    @property
    def file_name(self):
        """Gets the file_name of this StorageLogicModelsMultiPartUploadModel.  # noqa: E501


        :return: The file_name of this StorageLogicModelsMultiPartUploadModel.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this StorageLogicModelsMultiPartUploadModel.


        :param file_name: The file_name of this StorageLogicModelsMultiPartUploadModel.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def key(self):
        """Gets the key of this StorageLogicModelsMultiPartUploadModel.  # noqa: E501


        :return: The key of this StorageLogicModelsMultiPartUploadModel.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this StorageLogicModelsMultiPartUploadModel.


        :param key: The key of this StorageLogicModelsMultiPartUploadModel.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def parts_sum(self):
        """Gets the parts_sum of this StorageLogicModelsMultiPartUploadModel.  # noqa: E501


        :return: The parts_sum of this StorageLogicModelsMultiPartUploadModel.  # noqa: E501
        :rtype: int
        """
        return self._parts_sum

    @parts_sum.setter
    def parts_sum(self, parts_sum):
        """Sets the parts_sum of this StorageLogicModelsMultiPartUploadModel.


        :param parts_sum: The parts_sum of this StorageLogicModelsMultiPartUploadModel.  # noqa: E501
        :type: int
        """

        self._parts_sum = parts_sum

    @property
    def stored_path(self):
        """Gets the stored_path of this StorageLogicModelsMultiPartUploadModel.  # noqa: E501


        :return: The stored_path of this StorageLogicModelsMultiPartUploadModel.  # noqa: E501
        :rtype: str
        """
        return self._stored_path

    @stored_path.setter
    def stored_path(self, stored_path):
        """Sets the stored_path of this StorageLogicModelsMultiPartUploadModel.


        :param stored_path: The stored_path of this StorageLogicModelsMultiPartUploadModel.  # noqa: E501
        :type: str
        """

        self._stored_path = stored_path

    @property
    def upload_id(self):
        """Gets the upload_id of this StorageLogicModelsMultiPartUploadModel.  # noqa: E501


        :return: The upload_id of this StorageLogicModelsMultiPartUploadModel.  # noqa: E501
        :rtype: str
        """
        return self._upload_id

    @upload_id.setter
    def upload_id(self, upload_id):
        """Sets the upload_id of this StorageLogicModelsMultiPartUploadModel.


        :param upload_id: The upload_id of this StorageLogicModelsMultiPartUploadModel.  # noqa: E501
        :type: str
        """

        self._upload_id = upload_id

    @property
    def uris(self):
        """Gets the uris of this StorageLogicModelsMultiPartUploadModel.  # noqa: E501


        :return: The uris of this StorageLogicModelsMultiPartUploadModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._uris

    @uris.setter
    def uris(self, uris):
        """Sets the uris of this StorageLogicModelsMultiPartUploadModel.


        :param uris: The uris of this StorageLogicModelsMultiPartUploadModel.  # noqa: E501
        :type: list[str]
        """

        self._uris = uris

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StorageLogicModelsMultiPartUploadModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageLogicModelsMultiPartUploadModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
