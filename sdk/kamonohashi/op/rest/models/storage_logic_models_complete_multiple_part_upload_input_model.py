# coding: utf-8

"""
    KAMONOHASHI API

    A platform for deep learning  # noqa: E501

    OpenAPI spec version: v2
    Contact: kamonohashi-support@jp.nssol.nipponsteel.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StorageLogicModelsCompleteMultiplePartUploadInputModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'part_e_tags': 'list[str]',
        'upload_id': 'str'
    }

    attribute_map = {
        'key': 'key',
        'part_e_tags': 'partETags',
        'upload_id': 'uploadId'
    }

    def __init__(self, key=None, part_e_tags=None, upload_id=None):  # noqa: E501
        """StorageLogicModelsCompleteMultiplePartUploadInputModel - a model defined in Swagger"""  # noqa: E501

        self._key = None
        self._part_e_tags = None
        self._upload_id = None
        self.discriminator = None

        self.key = key
        self.part_e_tags = part_e_tags
        self.upload_id = upload_id

    @property
    def key(self):
        """Gets the key of this StorageLogicModelsCompleteMultiplePartUploadInputModel.  # noqa: E501


        :return: The key of this StorageLogicModelsCompleteMultiplePartUploadInputModel.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this StorageLogicModelsCompleteMultiplePartUploadInputModel.


        :param key: The key of this StorageLogicModelsCompleteMultiplePartUploadInputModel.  # noqa: E501
        :type: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def part_e_tags(self):
        """Gets the part_e_tags of this StorageLogicModelsCompleteMultiplePartUploadInputModel.  # noqa: E501


        :return: The part_e_tags of this StorageLogicModelsCompleteMultiplePartUploadInputModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._part_e_tags

    @part_e_tags.setter
    def part_e_tags(self, part_e_tags):
        """Sets the part_e_tags of this StorageLogicModelsCompleteMultiplePartUploadInputModel.


        :param part_e_tags: The part_e_tags of this StorageLogicModelsCompleteMultiplePartUploadInputModel.  # noqa: E501
        :type: list[str]
        """
        if part_e_tags is None:
            raise ValueError("Invalid value for `part_e_tags`, must not be `None`")  # noqa: E501

        self._part_e_tags = part_e_tags

    @property
    def upload_id(self):
        """Gets the upload_id of this StorageLogicModelsCompleteMultiplePartUploadInputModel.  # noqa: E501


        :return: The upload_id of this StorageLogicModelsCompleteMultiplePartUploadInputModel.  # noqa: E501
        :rtype: str
        """
        return self._upload_id

    @upload_id.setter
    def upload_id(self, upload_id):
        """Sets the upload_id of this StorageLogicModelsCompleteMultiplePartUploadInputModel.


        :param upload_id: The upload_id of this StorageLogicModelsCompleteMultiplePartUploadInputModel.  # noqa: E501
        :type: str
        """
        if upload_id is None:
            raise ValueError("Invalid value for `upload_id`, must not be `None`")  # noqa: E501

        self._upload_id = upload_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StorageLogicModelsCompleteMultiplePartUploadInputModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageLogicModelsCompleteMultiplePartUploadInputModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
