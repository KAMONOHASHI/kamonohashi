# coding: utf-8

"""
    KAMONOHASHI API

    A platform for deep learning  # noqa: E501

    OpenAPI spec version: v2
    Contact: kamonohashi-support@jp.nssol.nipponsteel.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PreprocessingApiModelsHistoriesOutputModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'str',
        'data_id': 'int',
        'data_name': 'str',
        'key': 'str',
        'preprocess_id': 'int',
        'preprocess_name': 'str',
        'status': 'str',
        'status_type': 'str'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'data_id': 'dataId',
        'data_name': 'dataName',
        'key': 'key',
        'preprocess_id': 'preprocessId',
        'preprocess_name': 'preprocessName',
        'status': 'status',
        'status_type': 'statusType'
    }

    def __init__(self, created_at=None, data_id=None, data_name=None, key=None, preprocess_id=None, preprocess_name=None, status=None, status_type=None):  # noqa: E501
        """PreprocessingApiModelsHistoriesOutputModel - a model defined in Swagger"""  # noqa: E501

        self._created_at = None
        self._data_id = None
        self._data_name = None
        self._key = None
        self._preprocess_id = None
        self._preprocess_name = None
        self._status = None
        self._status_type = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if data_id is not None:
            self.data_id = data_id
        if data_name is not None:
            self.data_name = data_name
        if key is not None:
            self.key = key
        if preprocess_id is not None:
            self.preprocess_id = preprocess_id
        if preprocess_name is not None:
            self.preprocess_name = preprocess_name
        if status is not None:
            self.status = status
        if status_type is not None:
            self.status_type = status_type

    @property
    def created_at(self):
        """Gets the created_at of this PreprocessingApiModelsHistoriesOutputModel.  # noqa: E501


        :return: The created_at of this PreprocessingApiModelsHistoriesOutputModel.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PreprocessingApiModelsHistoriesOutputModel.


        :param created_at: The created_at of this PreprocessingApiModelsHistoriesOutputModel.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def data_id(self):
        """Gets the data_id of this PreprocessingApiModelsHistoriesOutputModel.  # noqa: E501


        :return: The data_id of this PreprocessingApiModelsHistoriesOutputModel.  # noqa: E501
        :rtype: int
        """
        return self._data_id

    @data_id.setter
    def data_id(self, data_id):
        """Sets the data_id of this PreprocessingApiModelsHistoriesOutputModel.


        :param data_id: The data_id of this PreprocessingApiModelsHistoriesOutputModel.  # noqa: E501
        :type: int
        """

        self._data_id = data_id

    @property
    def data_name(self):
        """Gets the data_name of this PreprocessingApiModelsHistoriesOutputModel.  # noqa: E501


        :return: The data_name of this PreprocessingApiModelsHistoriesOutputModel.  # noqa: E501
        :rtype: str
        """
        return self._data_name

    @data_name.setter
    def data_name(self, data_name):
        """Sets the data_name of this PreprocessingApiModelsHistoriesOutputModel.


        :param data_name: The data_name of this PreprocessingApiModelsHistoriesOutputModel.  # noqa: E501
        :type: str
        """

        self._data_name = data_name

    @property
    def key(self):
        """Gets the key of this PreprocessingApiModelsHistoriesOutputModel.  # noqa: E501


        :return: The key of this PreprocessingApiModelsHistoriesOutputModel.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this PreprocessingApiModelsHistoriesOutputModel.


        :param key: The key of this PreprocessingApiModelsHistoriesOutputModel.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def preprocess_id(self):
        """Gets the preprocess_id of this PreprocessingApiModelsHistoriesOutputModel.  # noqa: E501


        :return: The preprocess_id of this PreprocessingApiModelsHistoriesOutputModel.  # noqa: E501
        :rtype: int
        """
        return self._preprocess_id

    @preprocess_id.setter
    def preprocess_id(self, preprocess_id):
        """Sets the preprocess_id of this PreprocessingApiModelsHistoriesOutputModel.


        :param preprocess_id: The preprocess_id of this PreprocessingApiModelsHistoriesOutputModel.  # noqa: E501
        :type: int
        """

        self._preprocess_id = preprocess_id

    @property
    def preprocess_name(self):
        """Gets the preprocess_name of this PreprocessingApiModelsHistoriesOutputModel.  # noqa: E501


        :return: The preprocess_name of this PreprocessingApiModelsHistoriesOutputModel.  # noqa: E501
        :rtype: str
        """
        return self._preprocess_name

    @preprocess_name.setter
    def preprocess_name(self, preprocess_name):
        """Sets the preprocess_name of this PreprocessingApiModelsHistoriesOutputModel.


        :param preprocess_name: The preprocess_name of this PreprocessingApiModelsHistoriesOutputModel.  # noqa: E501
        :type: str
        """

        self._preprocess_name = preprocess_name

    @property
    def status(self):
        """Gets the status of this PreprocessingApiModelsHistoriesOutputModel.  # noqa: E501


        :return: The status of this PreprocessingApiModelsHistoriesOutputModel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PreprocessingApiModelsHistoriesOutputModel.


        :param status: The status of this PreprocessingApiModelsHistoriesOutputModel.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_type(self):
        """Gets the status_type of this PreprocessingApiModelsHistoriesOutputModel.  # noqa: E501


        :return: The status_type of this PreprocessingApiModelsHistoriesOutputModel.  # noqa: E501
        :rtype: str
        """
        return self._status_type

    @status_type.setter
    def status_type(self, status_type):
        """Sets the status_type of this PreprocessingApiModelsHistoriesOutputModel.


        :param status_type: The status_type of this PreprocessingApiModelsHistoriesOutputModel.  # noqa: E501
        :type: str
        """

        self._status_type = status_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PreprocessingApiModelsHistoriesOutputModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PreprocessingApiModelsHistoriesOutputModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
